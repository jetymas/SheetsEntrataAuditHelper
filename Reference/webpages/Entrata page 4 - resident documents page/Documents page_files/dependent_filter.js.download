if( 'undefined' == typeof( objDependentFilter ) ) {

	objDependentFilter = {}
	objDependentFilter.strModuleOld = '';
	objDependentFilter.boolFilterInitialize		= false;

	objDependentFilter.getFilterType = function getFilterType( strFilterId ) {

		if( $( '#' + strFilterId ).find('.form-advancedmultiselect' ).length > 0 ) {
			return 'CHECKBOX';
		} else if( $( '#' + strFilterId + '_filter' ).find('.multiselect-multilevel' ).length > 0 ) {
			return 'MULTISELECT-MULTILEVEL';
			// buildings and units filter
		} else if( $( '#' + strFilterId + '_filter' ).find('.form-multiassign-add .form-multiselectbox' ).length > 0 ) {
			return 'MULTISELECT-HIDDEN';
			//property group filter
		} else if( $( '#' + strFilterId + '_filter' ).find('.form-advancedmultiselect' ).length > 0 ) {
			return 'CHECKBOX';
		} else if( $( '#' + strFilterId + '_filter' ).find( 'select.form-select ' ).length > 0 ) {
			return 'SELECT';
		} else {
			return;
		}
	}

	objDependentFilter.keyExists = function keyExists(key, search) {
		/**
		 * Check if an array key or object property exists
		 * @key - what value to check for
		 * @search - an array or object to check in
		 */
		if ( !search || ( search.constructor !== Array && search.constructor !== Object ) ) {
			return false;
		}
		for (var i = 0; i < search.length; i++) {
			if (search[i] === key) {
				return true;
			}
		}
		return key in search;
	}

	objDependentFilter.getFilterObjectById = function getFilterObjectById( strElementId ) {

		if( document.getElementById( strElementId ) != null ) {
			if( document.getElementById( strElementId ).nodeName == 'SELECT' ) {
				return document.getElementById( strElementId );
			}
		} else if( document.getElementById( strElementId + '_filter_items' ) != null ) {
			return $( '#' + strElementId + '_filter_items' ).find( '.form-checkbox' );
		} else if( document.getElementById( strElementId + '_filter' ) != null && 'MULTISELECT-HIDDEN' == objDependentFilter.getFilterType( strElementId) ) {
			return $( '#' + strElementId + '_filter' ).find('.form-multiselectbox' );
		}
	}

	objDependentFilter.implement = function implement() {

		for( index in objDependentFilter.arrstrPrimaryFilters ) {
			objDependentFilter.addEventListener( index );
		}

		//default selected checkboxes
		if( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrPrimaryFilters[0]] == 'CHECKBOX' ) {
			$( objDependentFilter.getFilterObjectById( objDependentFilter.arrstrPrimaryFilters[0] )[0] ).trigger('change');
		} else if( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrPrimaryFilters[0]] == 'SELECT' ) {
			$( objDependentFilter.getFilterObjectById( objDependentFilter.arrstrPrimaryFilters[0] ) ).trigger('change');
		}
	}

	objDependentFilter.getFilterIndexByName	= function getFilterIndexByName( strId, arr ) {

		for( index = 0; index < arr.length; index++ ) {
			if( strId.search( arr[index] ) >= 0 ) {
				return index;
			}
		}
		return;
	}

	objDependentFilter.getIndexOfDuplicates	=	function getIndexOfDuplicates( intFilterIndex, arrstrFilterIds ) {
		/**
		 * returns array of index of duplicate/multiple values
		 */
		arrstr = Array();
		for( index in arrstrFilterIds ) {
			if( arrstrFilterIds[index] == arrstrFilterIds[intFilterIndex] && index != intFilterIndex ) {
				arrstr.push(index);
			}
		}
		return arrstr;
	}

	objDependentFilter.getSelectedValues = function getSelectedValues( index, arr ) {
		objFilter = objDependentFilter.getFilterObjectById( arr[index] );
		switch ( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrPrimaryFilters[index]] ) {
			case 'SELECT':
				return $(objFilter).val();
				break;

			case 'CHECKBOX':
				var arrSelectedRequestParams = new Array();
				for( i = 0; i < objFilter.length; i++ ) {
					if( objFilter[i].checked == true && '' != objFilter[i].value ) {
						arrSelectedRequestParams.push(objFilter[i].value);
					}
				}
				return arrSelectedRequestParams;
				break;

			case 'MULTISELECT-HIDDEN':
				objFilter = $(objFilter).find('input[type="hidden"]');
				var arrSelectedRequestParams = new Array();
				for( i = 0; i < objFilter.length; i++ ) {
					arrSelectedRequestParams.push(objFilter[i].value);
				}
				return arrSelectedRequestParams;
				break;
		}
	}

	objDependentFilter.getSelectedValuesCount = function getSelectedValuesCount( index, arr ) {
		objFilter = objDependentFilter.getFilterObjectById( arr[index] );

		// Only in case of checkbox
		var arrSelectedRequestParams = new Array();
		var count = 0;
		if( 'undefined' !== typeof objFilter ) {
			for( intIndex = 0; intIndex < objFilter.length; intIndex++ ) {
				if( objFilter[intIndex].checked == true) {
					count++;
				}
			}
		}
		return count;
	}

	objDependentFilter.getRequstUrlOfOtherFilterWithSimilarDependency = function getRequstUrlOfOtherFilterWithSimilarDependency( intFilterIndex ) {
		strRequestData = '';
		data = '';
		if( objDependentFilter.getIndexOfDuplicates( intFilterIndex, objDependentFilter.arrstrSecondaryFilters ).length > 0 ) {
			arrDuplicateElements = objDependentFilter.getIndexOfDuplicates( intFilterIndex, objDependentFilter.arrstrSecondaryFilters );
			for( index in arrDuplicateElements ) {
				data = objDependentFilter.getSelectedValues( arrDuplicateElements[index], objDependentFilter.arrstrPrimaryFilters );
				strRequestData += '&' + 'report_filter[' + objDependentFilter.arrstrPrimaryFilters[arrDuplicateElements[index]] + ']' + '=' + JSON.stringify( data );
			}
		}
		for( index in objDependentFilter.arrstrAdditionalFilters ) {
			data = objDependentFilter.getSelectedValues( index, objDependentFilter.arrstrAdditionalFilters );
			strRequestData += '&' + 'report_filter[' + objDependentFilter.arrstrAdditionalFilters[index] + ']' + '=' + JSON.stringify( data );
		}
		return strRequestData;
	}

	objDependentFilter.prepareAndGetHtml = function prepareAndGetHtml( intFilterIndex, response ) {
		strHtmlScript = '';
		response = JSON.parse( response ).data;
		switch( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrSecondaryFilters[intFilterIndex]] ) {
			case 'CHECKBOX':
				var arrstrResponseText = [];
				$.map( response, function( value, index ) {
					if( 'object' !== typeof( value ) ) {
						arrstrResponseText.push( value + '=>' + index );
					}
				});

				// To get sorted list of data.
				if( 0 < arrstrResponseText.length ) {
					$.each( arrstrResponseText.sort(), function( index, value ) {
						var arrstrResponse = value.split( '=>' );
						strHtmlScript = strHtmlScript + '<li> <label> <input id="' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] +'_' + arrstrResponse[1] + '" class="form-checkbox" type="checkbox" name="report_filter[' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '][]" value="' + arrstrResponse[1] + '"> ' + arrstrResponse[0] + '	</label></li>';
					});
				} else{
					$.each( response, function( index, value ) {
						if( 'object' == typeof( value ) ) {
							strHtmlScript = strHtmlScript + '<li><span class="header"><i class="right-arrow"></i><input class="form-checkbox classcheck" type="checkbox" > ' + index + '	</span><ul class=\'itemList hide\' >';
							$.each( value, function( index, value ) {
								strHtmlScript = strHtmlScript + '<li> <label> <input id="' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] +'_' + index + '" class="form-checkbox" type="checkbox" name="report_filter[' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '][]" value="' + index + '"> ' + value + '	</label></li>';
							});
							strHtmlScript = strHtmlScript + '</ul></li>';
						}
					});
				}
				break;

			case 'SELECT':
				for( index in response ) {
					strHtmlScript = strHtmlScript + '<option value="' + index + '">' + response[index] +'</option>';
				}
				break;
			case 'MULTISELECT-MULTILEVEL':
				for( property_name in response ) {
					strHtmlScript = strHtmlScript + '<div class="gray pad5 text-white property-header">' + property_name + ' <input type="checkbox" class="form-checkbox selectAll"></div>';
					for( building_name in response[property_name] ) {
						strHtmlScript = strHtmlScript + '<span class="header" ><i class="right-arrow"></i>' + building_name + '<input type="checkbox" class="form-checkbox"></span>';
						strHtmlScript = strHtmlScript + '<ul>';
						for( unit_id in response[property_name][building_name] ) {
							strHtmlScript = strHtmlScript + '<li style="display: list-item;"><label id="' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] +'_' + index + '" class=""><input type="checkbox" class="form-checkbox" value="' + unit_id + '" name="report_filter[' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '][]">' + response[property_name][building_name][unit_id] + '	</label></li>';
						}
						strHtmlScript = strHtmlScript + '</ul>';
					}
				}
				break;
		}
		return strHtmlScript;
	}

	objDependentFilter.showHideFormSubmitContainer = function showHideFormSubmitContainer() {
		//show/hide generate button if mandatory filter dont have any html controls to select
		$( "form#report_form .js_min_required_validation" ).each( function() {
			switch( objDependentFilter.getFilterType( $(this).attr( 'id' ).replace( '_filter', '' ) ) ) {
				case 'CHECKBOX':
					if( $( '#' + $( this ).attr( 'id' ).replace( '_filter','_filter_items' ) ).find( '.form-checkbox' ).length <= 0 ){
						//$( '.form-submit-container' ).hide();
					} else {
						$( '.form-submit-container' ).show();
					}
					break;
				case 'SELECT':
					//for select filters having required attribute true
					$( 'form#report_form [required=true]' ).each( function() {
						if( $( this ).find( 'option' ).length <= 0 ) {
							//$( '.form-submit-container' ).hide();
						} else{
							$( '.form-submit-container' ).show();
						}
					});
					break;
			}
		});
	}

	objDependentFilter.hideValidationMessage = function hideValidationMessage( strFilterId ) {
		ReportsModule.clearFilterErrors( strFilterId + '_filter' );
		if( true == $( '#' + strFilterId + '_filter' ).hasClass('hide') ){
			$( '#' + strFilterId + '_filter' ).hide();
		} else {
			$( '#' + strFilterId + '_filter' ).show();
		}

		objDependentFilter.showHideFormSubmitContainer();
	}

	objDependentFilter.showValidationMessage = function showValidationMessage( strFilterId, strResponse ) {
		objResponse = JSON.parse( strResponse );
		if( objResponse.status != 'success' && objDependentFilter.keyExists( 'errors', objResponse ) != false && objDependentFilter.keyExists( strFilterId, objResponse.errors ) != false ) {
			ReportsModule.clearFilterErrors( strFilterId + '_filter' );
			ReportsModule.addFilterError( strFilterId + '_filter', objResponse.errors[strFilterId] );
			if( true == $( '#' + strFilterId + '_filter' ).hasClass('hide') ){
				$( '#' + strFilterId + '_filter' ).hide();
			} else {
				$( '#' + strFilterId + '_filter' ).show();
			}
			objDependentFilter.showHideFormSubmitContainer();
		} else {
			$( '#' + strFilterId + '_filter' ).hide();
			objDependentFilter.showHideFormSubmitContainer();
		}
	}

	objDependentFilter.processResponsedHtml	= function processResponsedHtml( intFilterIndex, response ) {
		strHtmlResponse = objDependentFilter.prepareAndGetHtml( intFilterIndex, response );
		switch( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrSecondaryFilters[intFilterIndex]] ) {
			case 'CHECKBOX':
				$( '#' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '_filter_items' ).html(strHtmlResponse);
				objDependentFilter.hideValidationMessage( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] );

				//incase of multilevel dependency, add event listener to next filters checkboxes
				if( objDependentFilter.keyExists( objDependentFilter.arrstrSecondaryFilters[intFilterIndex], objDependentFilter.arrstrPrimaryFilters ) == true ) {
					objDependentFilter.addEventListener( objDependentFilter.arrstrPrimaryFilters.indexOf( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] ) );
					$( objDependentFilter.getFilterObjectById( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] ) [0]).trigger('change');
				}

				//handling check/ uncheck select all checkbox
				objDependentFilter.handleSelectAll( intFilterIndex );
				break;

			case 'SELECT':
				$( '#' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] ).html(strHtmlResponse);
				objDependentFilter.hideValidationMessage( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] );

				//trigger change next filter incase of multilevel dependency
				if( objDependentFilter.keyExists( objDependentFilter.arrstrSecondaryFilters[intFilterIndex], objDependentFilter.arrstrPrimaryFilters ) == true ) {
					$( objDependentFilter.getFilterObjectById( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] ) ).trigger('change');
				}

			case 'MULTISELECT-HIDDEN':
				break;

			case 'MULTISELECT-MULTILEVEL':
				$( '#' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '_filter_items' ).html(strHtmlResponse);
				objDependentFilter.hideValidationMessage( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] );

				//trigger change next filter incase of multilevel dependency
				if( objDependentFilter.keyExists( objDependentFilter.arrstrSecondaryFilters[intFilterIndex], objDependentFilter.arrstrPrimaryFilters ) == true ) {
					$( objDependentFilter.getFilterObjectById( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] ) ).trigger('change');
				}
				break;
		}
		psi.patterns.bindEssentials();
	}

	objDependentFilter.handleSelectAll = function handleSelectAll( intFilterIndex ) {
		$( '#' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '_filter input[id$="_list_select_all"]' ).prop('checked',false);
		objFilter = objDependentFilter.getFilterObjectById( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] );
		if( $(objFilter).length > 0 ) {
			$(objFilter).change ( function() {
				var intFilterIndex = objDependentFilter.getFilterIndexByName($(this).prop('name'), objDependentFilter.arrstrSecondaryFilters );
				if( objDependentFilter.getSelectedValuesCount( intFilterIndex, objDependentFilter.arrstrSecondaryFilters ) == $(objFilter).length ) {
					$( '#' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '_filter input[id$="_list_select_all"]' ).prop('checked',true);
				} else {
					$( '#' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '_filter input[id$="_list_select_all"]' ).prop('checked',false);
				}
			});
		} else {
			$( '#' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '_filter input[id$="_list_select_all"]' ).prop('checked',false);
		}
	}

	objDependentFilter.processEmptyResponsedHtml =	function processEmptyResponsedHtml( intFilterIndex, response ) {
		//if multilevel dependency
		if( objDependentFilter.arrstrDependentChain.length > 0 && false != objDependentFilter.keyExists( objDependentFilter.arrstrPrimaryFilters[intFilterIndex], objDependentFilter.arrstrDependentChain ) ) {
			i = objDependentFilter.arrstrDependentChain.indexOf( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] );
			for( i; i < objDependentFilter.arrstrDependentChain.length; i++ ) {

				switch( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrDependentChain[i]] ) {
					case 'CHECKBOX':

						//if it is multiple dependency
						if( objDependentFilter.getIndexOfDuplicates( objDependentFilter.arrstrSecondaryFilters.indexOf( objDependentFilter.arrstrDependentChain[i] ), objDependentFilter.arrstrSecondaryFilters ).length > 0 ) {
							$( objDependentFilter.getFilterObjectById( objDependentFilter.arrstrDependentChain[i-1] ) [0]).trigger('change');
						}
						intFilterIndex = objDependentFilter.arrstrPrimaryFilters.indexOf(objDependentFilter.arrstrDependentChain[i]);
						$( '#' + objDependentFilter.arrstrDependentChain[i] + '_filter_items' ).html('');
						objDependentFilter.showValidationMessage( objDependentFilter.arrstrDependentChain[i], response );
						break;

					case 'SELECT':
						intFilterIndex = objDependentFilter.arrstrPrimaryFilters.indexOf(objDependentFilter.arrstrDependentChain[i]);
						$( '#' + objDependentFilter.arrstrDependentChain[i] ).html('');
						objDependentFilter.showValidationMessage( objDependentFilter.arrstrDependentChain[i], response );

						break;
				}
			}
		} else { //if there is no multilevel dependency
			switch( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrSecondaryFilters[intFilterIndex]] ) {
				case 'CHECKBOX':
					$( '#' +  objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '_filter_items' ).html('');
					objDependentFilter.showValidationMessage( objDependentFilter.arrstrSecondaryFilters[intFilterIndex], response );
					break;

				case 'SELECT':
					objDependentFilter.showValidationMessage( objDependentFilter.arrstrSecondaryFilters[intFilterIndex], response );
					$( '#' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] ).html('');
					break;
			}
		}
	}

	objDependentFilter.addEventListener = function addEventListener( intIndex ) {

		objFilter = objDependentFilter.getFilterObjectById( objDependentFilter.arrstrPrimaryFilters[intIndex] );

		if( objFilter.length > 0 || objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrPrimaryFilters[intIndex]] == 'SELECT' ) { //this control exist on page.

			switch ( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrPrimaryFilters[intIndex]] ) {
				case 'SELECT':
					$( objFilter ).change( function() {

						var intFilterIndex = objDependentFilter.getFilterIndexByName($(this).prop('name'), objDependentFilter.arrstrPrimaryFilters );
						//hide the global error
						$(".global-error").hide();

						//incase of multiple dependency
						strRequestData = objDependentFilter.getRequstUrlOfOtherFilterWithSimilarDependency( intFilterIndex );

						var currVal = this.value;
						if( Math.floor( this.value ) == this.value && $.isNumeric( this.value ) )  {
							currVal = parseInt( this.value );
						}

						$.ajax({
							type : 'POST',
							beforeSend: function() {
								psi.patterns.showLoadingImage({
									strElementSelector: '#'+objDependentFilter.arrstrSecondaryFilters[intFilterIndex]+ '_filter'
								});
							},
							complete: function() {
								psi.patterns.removeLoadingImage({
									strElementSelector: '#'+objDependentFilter.arrstrSecondaryFilters[intFilterIndex]+ '_filter'
								});
							},
							url : objDependentFilter.module + '&action=' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] +'&' + 'report_filter['+objDependentFilter.arrstrPrimaryFilters[intFilterIndex]+']' + '=' + JSON.stringify( currVal ) + strRequestData,
						}).done( function( response ){
							if( 'success' == JSON.parse(response).status ){
								ReportsModule.clearFilterErrors( objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + '_filter' );
								$( '.form-submit-container' ).show();
								$( '#basic-reports-wrapper' ).show();
								objDependentFilter.processResponsedHtml( intFilterIndex, response );
							} else {
								//do nothing
								objDependentFilter.processEmptyResponsedHtml( intFilterIndex, response );
							}
							setTimeout( function() {
								$( '#display_options' ).removeAttr( 'style' );
								$( '.saved-filter-list' ).removeAttr( 'style' );
							}, 1500 );
						});
					});
					break;

				case 'CHECKBOX':
					$(objFilter).change ( function() {
						// Added to work dependent filter for select all changes.
						if( 'undefined' === typeof $(this).attr('name')) {
							var strCheckBoxAttr = $(this).attr('data-name');
						} else {
							var strCheckBoxAttr = $(this).attr('name');
						}
						var intFilterIndex = objDependentFilter.getFilterIndexByName( strCheckBoxAttr, objDependentFilter.arrstrPrimaryFilters );
						arrSelectedRequestParams = objDependentFilter.getSelectedValues( intFilterIndex, objDependentFilter.arrstrPrimaryFilters );

						//incase of multiple dependency
						strRequestData = objDependentFilter.getRequstUrlOfOtherFilterWithSimilarDependency( intFilterIndex );

						if( arrSelectedRequestParams.length > 0 || typeof( strRequestData ) != 'undefined' ) {
							$.ajax({
								type : 'POST',
								beforeSend: function() {
									psi.patterns.showLoadingImage({
										strElementSelector: objDependentFilter.arrstrSecondaryFilters[intFilterIndex]+ '_filter'
									});
								},
								complete: function() {
									psi.patterns.removeLoadingImage({
										strElementSelector: objDependentFilter.arrstrSecondaryFilters[intFilterIndex]+ '_filter'
									});
								},
								url : objDependentFilter.module + '&action=' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + strRequestData,
								data : 'report_filter[' + objDependentFilter.arrstrPrimaryFilters[intFilterIndex] + ']=' + JSON.stringify( arrSelectedRequestParams )
							}).done( function( response ) {
								if( 'success' == JSON.parse(response).status ) {
									objDependentFilter.processResponsedHtml( intFilterIndex, response );
								} else {
									//do nothing
									objDependentFilter.processEmptyResponsedHtml( intFilterIndex, response );
								}
								setTimeout( function() {
									$( '#display_options' ).removeAttr( 'style' );
									$( '.saved-filter-list' ).removeAttr( 'style' );
								}, 1500 );
							});
						}
					});
					break;

				case 'MULTISELECT-HIDDEN':
					$(objFilter).change( function() {
						if( 0 < $(this).find('input[type="hidden"]' ).length ) {
							var intFilterIndex = objDependentFilter.getFilterIndexByName( $(this).find('input[type="hidden"]' ).prop('name'), objDependentFilter.arrstrPrimaryFilters );
						} else {
							intFilterIndex = intIndex;
						}
						arrSelectedRequestParams = objDependentFilter.getSelectedValues( intFilterIndex, objDependentFilter.arrstrPrimaryFilters );

						// incase of multiple dependency
						strRequestData = objDependentFilter.getRequstUrlOfOtherFilterWithSimilarDependency( intFilterIndex );

						if( arrSelectedRequestParams.length > 0 || typeof( strRequestData ) != 'undefined' ) {

							$.ajax({
								type : 'POST',
								beforeSend: function() {
									psi.patterns.showLoadingImage({
										strElementSelector: objDependentFilter.arrstrSecondaryFilters[intFilterIndex]+ '_filter'
									});
								},
								complete: function() {
									psi.patterns.removeLoadingImage({
										strElementSelector: objDependentFilter.arrstrSecondaryFilters[intFilterIndex]+ '_filter'
									});
								},
								url : objDependentFilter.module + '&action=' + objDependentFilter.arrstrSecondaryFilters[intFilterIndex] + strRequestData,
								data : 'report_filter[' + objDependentFilter.arrstrPrimaryFilters[intFilterIndex] + ']=' + JSON.stringify( arrSelectedRequestParams )
							}).done( function( response ) {
								if( 'success' == JSON.parse(response).status ) {
									objDependentFilter.processResponsedHtml( intFilterIndex, response );
								} else {
									//	do nothing
									objDependentFilter.processEmptyResponsedHtml( intFilterIndex, response );
								}
								setTimeout( function() {
									$( '#display_options' ).removeAttr( 'style' );
									$( '.saved-filter-list' ).removeAttr( 'style' );
								}, 1500 );
							});
						}
					});

					break;
			}
		}

	}//end function

	objDependentFilter.initialize =	function() {
		//Get current url from exits tags from ReportsModule present in reports.js
		objDependentFilter.module = objDependentFilter.strViewReportUrl.replace('&action=view_report','');

		//initialize required variables
		objDependentFilter.boolFilterInitialize		= true;

		objDependentFilter.arrstrDependentChain		= new Array(); //To handle multiple dependent filters
		objDependentFilter.arrstrPrimaryFilters		= new Array();
		objDependentFilter.arrstrSecondaryFilters	= new Array();
		objDependentFilter.arrstrAdditionalFilters	= new Array();
		objDependentFilter.arrstrFilterTypes		= {} // object due to key => value requirement here.

		if( $( '[dependent_filter_key]' ).length > 0 ) {

			$( '[dependent_filter_key]' ).each( function( index, objFilter ) {
				strId = $(objFilter).prop('id');
				objDependentFilter.arrstrPrimaryFilters.push( strId.slice( 0, strId.lastIndexOf('_filter') > 0 ? strId.lastIndexOf('_filter') : strId.length  ) );

				objDependentFilter.arrstrSecondaryFilters.push( $(objFilter).attr('dependent_filter_key') );
				if( 'undefined' != typeof($(objFilter).attr('additional_filter_key')) && '' != $(objFilter).attr('additional_filter_key') ) {
					objDependentFilter.arrstrAdditionalFilters.push( $(objFilter).attr('additional_filter_key') );
				}
			});

			//creating filtername => type array
			for( index in objDependentFilter.arrstrPrimaryFilters ) {

				objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrPrimaryFilters[index]] = objDependentFilter.getFilterType( objDependentFilter.arrstrPrimaryFilters[index] );
			}

			for( index in objDependentFilter.arrstrSecondaryFilters ) {
				if( objDependentFilter.keyExists( objDependentFilter.arrstrSecondaryFilters[index], objDependentFilter.arrstrfilterTypes ) == false ) {
					objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrSecondaryFilters[index]] = objDependentFilter.getFilterType( objDependentFilter.arrstrSecondaryFilters[index] );
				}
			}

			for( index in objDependentFilter.arrstrAdditionalFilters ) {
				if( objDependentFilter.keyExists( objDependentFilter.arrstrAdditionalFilters[index], objDependentFilter.arrstrfilterTypes ) == false ) {
					objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrAdditionalFilters[index]] = objDependentFilter.getFilterType( objDependentFilter.arrstrAdditionalFilters[index] );
				}
			}

			//creating dependentChain var
			var strTempFilter = Array();
			for( index in objDependentFilter.arrstrSecondaryFilters ) {
				if( objDependentFilter.keyExists( objDependentFilter.arrstrSecondaryFilters[index], objDependentFilter.arrstrPrimaryFilters ) == true ) {
					if( objDependentFilter.arrstrDependentChain.length == 0 ) {
						objDependentFilter.arrstrDependentChain.push(  objDependentFilter.arrstrPrimaryFilters[index] );
					}
					objDependentFilter.arrstrDependentChain.push(  objDependentFilter.arrstrSecondaryFilters[index] );
					strTempFilter = objDependentFilter.arrstrSecondaryFilters[ objDependentFilter.arrstrPrimaryFilters.indexOf( objDependentFilter.arrstrSecondaryFilters[index] )];
				}
			}

			if( objDependentFilter.arrstrDependentChain.length > 0 ) {
				objDependentFilter.arrstrDependentChain.push( strTempFilter );
			}

			if( null == (objDependentFilter.module).match(/drill/gi) ) {
				objDependentFilter.strModuleOld = objDependentFilter.module;
				objDependentFilter.implement();

				//trigger change event on change of select all checkbox
				$( '.form-advancedmultiselect .form-selectlist .header input.form-checkbox' ).change( function() {
					var $this = $( this );
					setTimeout(function() {
						$( $this.parent().parent().find('ul input.form-checkbox')[0]).trigger('change');
					}, 200);
				});

				//if first filter is CHECKBOX then trigger change event on click reset
				if( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrPrimaryFilters[0]] == 'CHECKBOX' ) {
					$( '.reset-report' ).click(function() {
						$( objDependentFilter.getFilterObjectById( objDependentFilter.arrstrPrimaryFilters[0] )[0] ).trigger('change');
					});
				}
			} else if( null != (objDependentFilter.module).match(/drill/gi) && null != (objDependentFilter.module).match(/show_filters/gi) ) {
				//This case is for dashboard reports having show_filter flag set
				objDependentFilter.strModuleOld = objDependentFilter.module;
				objDependentFilter.implement();

				//trigger change event on change of select all checkbox
				$( '.form-advancedmultiselect .form-selectlist .header input.form-checkbox' ).change( function() {
					var $this = $( this );
					setTimeout(function() {
						$( $this.parent().parent().find('ul input.form-checkbox')[0]).trigger('change');
					}, 200);
				});

				//if first filter is CHECKBOX then trigger change event on click reset
				if( objDependentFilter.arrstrFilterTypes[objDependentFilter.arrstrPrimaryFilters[0]] == 'CHECKBOX' ) {
					$( '.reset-report' ).click(function() {
						$( objDependentFilter.getFilterObjectById( objDependentFilter.arrstrPrimaryFilters[0] )[0] ).trigger('change');
					});
				}
			} else {
				objDependentFilter.module = objDependentFilter.strModuleOld;
			}
		}

		$( document ).on( 'click', 'input.selectAll', function() {
			var thisRef 		= $( this ),
				strLevel2Header = thisRef.parent().siblings( "span.header" ),
				itemCounter 	= strLevel2Header.find( "input.form-checkbox" ).length;

			$.each( strLevel2Header, function( index, value ) {
				$( value ).find( "input.form-checkbox" ).on( 'click', function() {
					if( $( value ).find( "input.form-checkbox:checked" ).length == 0 ) {
						thisRef.prop( "checked", false );
					} else {
						if( strLevel2Header.find( "input.form-checkbox:checked" ).length == itemCounter ) {
							thisRef.prop( "checked", true );
						}
					}
				} );

				if( thisRef.is(':checked') ) {
					$( value ).find( "input.form-checkbox:not(:checked)" ).trigger('click');
				} else {
					$( value ).find( "input.form-checkbox:checked" ).trigger('click');
				}
			} );
		} );
	}

	objDependentFilter.bindPropertyGroupEssentials = function( strPropertyGroupObjectName ) {
		$( '#' + strPropertyGroupObjectName + ' .form-advancedmultiselect' ).on('click', 'li.property-group-record', function() {
			$( '#' + strPropertyGroupObjectName + ' .form-multiselectbox' ).trigger('change');
		});

		$( '#' + strPropertyGroupObjectName + ' .form-advancedmultiselect' ).find('span.property-group-record .add' ).on('click', function() {
			$( '#' + strPropertyGroupObjectName + ' .form-multiselectbox' ).trigger('change');
		});

		$( '#' + strPropertyGroupObjectName + ' .form-multiselectbox ul' ).on('click', function() {
			setTimeout( function() {
				$( '#' + strPropertyGroupObjectName + ' .form-multiselectbox' ).trigger('change');
			}, 500 );

		});

		if( 0 < $( "#" + strPropertyGroupObjectName + " .form-multiselectbox input[type='hidden']").length ) {
			$( '#' + strPropertyGroupObjectName + ' .form-multiselectbox' ).trigger('change');
		}
	}
}