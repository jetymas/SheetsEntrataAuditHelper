$.fn.entrataQuickSearch = function( options ) {

	var defaults = {
		url: null,
		data: {},	//custom form data can be send by using setting this param in beforeRequestSend() function
		lazyLoad: 1, //1: will show lazy load, 0: will show more button
		containerClass: '',
		moreButtonClass: '',
		width: '100%',
		height: 300,
		pageLimit: 10,
		keyCaptureDelay: 400,
		minRequiredChars: 1,
		template: null,	//if template structure is complex, we can alter and set custom handlebar code in this
		beforeRequestSend: null,
		beforeRender: null,
		afterRender: null,
		onRowClick: null,
		quickSearchbanner: null
	};

	var options = $.extend(defaults, options);

	return this.each(function() {
		var objXhr; //this element will keep ajax object handle, so that we can abort any previos call if required.
		var intTimeout, strToken, $container, strPreviousText, handelbarTemplate;
		var $textBox = $(this); //The seach input box, where user typing search text.
		var $keydown = false;
		let strSearchKeyword = ( getCookie( 'user_search_keyword' ) ) ? decodeURIComponent( getCookie('user_search_keyword') ).replaceAll('%20', ' ') : '';
		document.cookie = "user_search_keyword=;";
		let boolIsShowResponse = ( 1 < strSearchKeyword.trim().length && 1 == options.quickSearchbanner && true == $( "#entraraQuickSearch" ).data( "banner" ) ) ? true : false;

		let expirationDate = new Date("June 5, 2010");

		options.close = function () {
			closeResponseBox();
		};

		window.addEventListener('load',function() {
			sessionStorage.removeItem('search_session');
		});

		// init(): execute when object loads; this will prepare basic html dom.
		function init() {

			$textBox.attr('autocomplete', 'off');

			buildContainer();

			handelbarTemplate = getTemplate();

			Handlebars.registerHelper('json', function(obj) {
				return JSON.stringify(obj);
			});

			Handlebars.registerHelper('strip_html', function(strHtml) {

				return ( 'string' === typeof( strHtml ) ) ? strHtml.replace( /(<([^>]+)>)/ig, ' ' ) : '';
			});

			if ( boolIsShowResponse ) {
				$( window ).load(function(e) {
					$('#entraraQuickSearch').val(strSearchKeyword);
					$('.js-entrata-search-field').addClass('expanded');
					$('.js-search-text').css({"display": "none"});
					$('.js-search-field').css({"display": "flex", "opacity": "1", "width":"auto"});
					fetchResponseData( e );
				});
			}
		}

		function initLazyLoad() {
			$container.find(".js-eqsResponse").scroll( function( e ) {
				var intTotalHeight = parseInt( $(this)[0].scrollHeight ) - parseInt( $(this).outerHeight() );
				if ( $(this).scrollTop() > ( intTotalHeight * 0.8 ) ) {
					if( $container.hasClass('ajax_in_process') ) return;

					fetchResponseData( e );
				}
				e.preventDefault();
			})

		}

		function buildContainer() {
			//this is all is html code to show the div container wrapper area and keep it at z-index top.
			var strStyle = 'max-height:'+parseInt(options.height)+'px; overflow-y:auto; display:none; z-index: 1033; position: absolute; background-color: #FFF;';
			var strHtml = ' <div style="clear:both !important"></div> \
							<div class="js-eqsResponse" style="'+strStyle+'"> \
								<table border=0 cellpadding=2 cellspacing=0 width="'+options.width+'" style="table-layout:fixed"><tbody></tbody></table> \
							</div>';

			//The $container is a div element which is wrapping all fastlookup related element inside it.
			$container = $('<div class="js-eqsWrapper" data-page=1 data-limit='+options.pageLimit+'></div>');

			$textBox.wrap( $container );
			$textBox.after(strHtml);

			$container = $textBox.parent('.js-eqsWrapper');

			$container.find('.js-eqsResponse').addClass( options.containerClass );

			//hide box when clicking outside
			$('html').on('click', function(e) {
				if( 0 === $(e.target).parents('.js-eqsWrapper').length ) {
					$container.find('.js-eqsResponse').hide();
				}
			});

			if( 1 == options.lazyLoad ) {
				initLazyLoad();
				$container.find('.js-eqsResponse').scrollTop(0);
			}

			$container.find('.js-eqsResponse').on( 'mousewheel DOMMouseScroll', function ( e ) {
				var event = e.originalEvent,
				d = event.wheelDelta || -event.deltaY;

				this.scrollTop += ( d < 0 ? 1 : -1 ) * 30;
				e.preventDefault();

			});

			$container.on( 'click', '.js_data_rows', function() {
				var rowInfo = $(this).data('info');

				if( 'undefined' == typeof rowInfo ) return false;

				let strSearchType = '';
				let strActiveTab = '';

				if( $('#search_type_name') && $('#search_type_name').html() ) {
					strActiveTab = $('#search_type_name').html().toLowerCase();
				}

				if( rowInfo.data_blob_type_id == 3 ) {
					strSearchType = 'leads';
				} else {
					strSearchType = 'residents';
				}

				if( null === sessionStorage.getItem('search_session') ) {
					sessionStorage.setItem( 'search_session', getToken() );
				}

				const arrRequestClickEventData = {
					"search_string" : $textBox.val(),
					"active_search_type" : strActiveTab,
					"user_search_session" : sessionStorage.getItem('search_session'),
					"version" : 0,
					"event_type" : "qs_click_event",
					"clicked_data_type" : strSearchType,
					"clicked_result_id" : rowInfo.result_id,
					"clicked_result_position" : rowInfo.position_id
				};

				createCookie('UserClickEvent', JSON.stringify(arrRequestClickEventData));

				onRowClick(rowInfo);
				$(this).siblings().removeClass('active');

				//$container.find('input').focus();
			});

			$container.on( 'click', '.js_load_more', function(event) {
				loadMore(event);
			});

			$container.on( 'click', function(event)  {
				$container.find('input').focus();
			});

			$container.find('.js-eqsResponse').on( 'scroll', function ( e ) {
				$container.find('input').focus();
			});

			// to display all results on click of dropdown icon
			$container.siblings( 'i.dropdown' ).on( 'click', function(event) {
				$container.data('page', 1 );
				$(this).css('background', 'url("/Common/assets/components/patterns/images/small_loader.gif") 6px 7px no-repeat');
				fetchResponseData(event);
				$textBox.focus();
			});
			$container.siblings( 'i.dropdown' ).on( 'blur', function() {
				closeResponseBox();
			});
		}

		function buildResponseData( responseData, renderHeader ) {
			var strHtml = '';

			//giving option to call custom fucntion before rendering data
			if( 'function' == typeof options.beforeRender ) { options.beforeRender(); }

			responseData.moreButtonClass = options.moreButtonClass;

			//show/hide more link
			if( ( responseData.results_count ) && ( parseInt( responseData['results_count'] ) >  parseInt( options.pageLimit ) ) ) {
				if( ( 1 != options.lazyLoad ) && ( 1 != options.data.show_all ) ) {
					responseData.showMore = true;
				}
			}

			if( 'column_count' in responseData ) {
				options.columsCount = responseData['column_count'];
			}

			strHtml = handelbarTemplate( responseData );

			//giving option to call custom fucntion after rendering data
			if( 'function' == typeof options.afterRender ) { options.afterRender( strHtml ); }

			strHtml = ( '' == strHtml ) ? '<tr><td>No records</td></tr>' : strHtml;

			return strHtml;
		}

		function getTemplate() {
			var strTemplate = '';

			if( null != options.template ) {
				strTemplate = options.template
			} else {
				strTemplate = '{{#each results}} \
									{{#if header}} \
										<tr> \
											{{#each header}} \
												<th width="{{width}}">{{title}}</th> \
											{{/each}} \
										</tr>  \
									{{/if}} \
									{{#each rows}} \
										<tr class="js_data_rows" data-info="{{data}}"> \
											{{#each fields}} \
												<td style="overflow:hidden; " title="{{{strip_html this}}}">{{{this}}}</td> \
											{{/each}} \
										</tr> \
									{{/each}} \
								{{/each}} \
								{{#if showMore}} \
									<tr><td colspan="{{column_count}}" align="center" class="js_load_more"><div class="button slim">' + __('more') + '</div></td></tr> \
								{{/if}}';
			}

			return Handlebars.compile( strTemplate )
		}

		function loadMore(event) {
			$container.data('page', '1');
			options.data.show_all = '1';

			//if showing all records then this should stop auto loading.
			$container.find(".js-eqsResponse").unbind('scroll');

			fetchResponseData( event );
		}

		// hide reponse list box container
		function closeResponseBox() {
			$container.find('.js-eqsResponse').hide();
		}

		// show reponse list box container
		function showResponseBox( event ) {

			// Hide all open response boxes.
			$('.js-eqsResponse' ).hide();

			// show response box for textbox.
			if( 0 < $container.find('.js-eqsResponse table tbody').html().length ) {
				if( 1 > $textBox.val().trim().length && 'keyup' == event.type ) {
					$container.find('.js-eqsResponse').hide();
				} else {
					$container.find('.js-eqsResponse').show();
				}
			}
		}

		// select table row by adding 'active' class
		function selectRow( rowElement ) {
			$(rowElement).siblings().removeClass('active');
			$(rowElement).addClass('active');
		}

		function onRowClick( data ) {
			if( 'function' == typeof options.onRowClick ) {
				options.onRowClick( data, $textBox );
			}

			closeResponseBox();
		}

		// handle event when user press enter key after selcting any row
		function enterSelection( event, moveDirection ) {

			var objActiveRow    = [];

			if( $container.find('.js_data_rows').hasClass('active') ) {
				objActiveRow = $container.find('.js_data_rows.active');
			} else if( 9 === event.which ) {
				objActiveRow = $container.find('.js_data_rows:first');
			}

			if( objActiveRow.length > 0 ) {
				var objDataInfo = $(objActiveRow).data('info');
				onRowClick( objDataInfo );
			}
		}

		// handle up and down key events to make row selection
		function moveSelection( event, moveDirection ) {
			var moveDirection = moveDirection || 'UP' ;

			if( 'UP' == moveDirection ) {
				var objActiveRow = $container.find('.js_data_rows.active');

				if( objActiveRow.length == 0 ) {
					objActiveRow = $container.find('.js_data_rows:first')
					selectRow( objActiveRow );
				} else {
					objActiveRow = objActiveRow.next();
					selectRow( objActiveRow );
				}
			} else if( 'DOWN' == moveDirection ) {
				var objActiveRow = $container.find('.js_data_rows.active');

				if( objActiveRow.length == 0 ) {
					objActiveRow = $container.find('.js_data_rows:last')
					selectRow( objActiveRow );
				} else {
					objActiveRow = objActiveRow.prev();
					selectRow( objActiveRow );
				}
			}

			event.preventDefault();
		}

		// call ajax request to fetch data from server
		function fetchResponseData( event ) {

			if( 1 > $textBox.val().trim().length && 'keyup' == event.type ) {
				$container.find('.js-eqsResponse').hide();
				return;
			}

			$keydown = false;

			if( 'function' == typeof options.beforeRequestSend ) { options.beforeRequestSend( $textBox ); }

			options.url = $textBox.data('url') || options.url;
			options.data.q = '';

			if( 'keyup' == event.type || 'load' == event.type || ( 'click' == event.type && $(event.currentTarget).attr('class').indexOf('js_load_more') != -1 ) || ( 'scroll' == event.type ) ) {
				options.data.q = $textBox.val();
			}

			options.data.token = strToken = Math.random().toString(36).substr(2);
			options.data.page  = parseInt( $container.data('page') );

			if( null === sessionStorage.getItem('search_session') ) {
				sessionStorage.setItem( 'search_session', getToken() );
			}

			options.data.user_search_session = sessionStorage.getItem('search_session');

			clearTimeout( intTimeout );

			intTimeout = setTimeout( function(){

				if( 'undefined' != typeof objXhr ) {
					objXhr.abort();
					$container.removeClass('ajax_in_process');
					$container.find('.js-eqsLoading').delay(300).remove();
				}

				//do not process if any ajax call is still in progress
				if( $container.hasClass('ajax_in_process') ) return;

				//this class is being used to check if any previos ajax call is still in progress.
				$container.addClass('ajax_in_process');

				objXhr = $.ajax({
					type: "post",
					url: options.url,
					data: options.data,
					dataType: 'json',
					beforeSend: function() {
						//show loading image before starting ajax call
						$container.find('.js-NoResult').remove();
						$container.find('.js-eqsResponse tbody').append('<tr class="js-eqsLoading" style="height:25px"><td class="loading-overlay bg-img-small grey" colspan="'+options.columsCount+'" style="position:relative" colspan="3"></td></tr>');
						showResponseBox( event );

					},
					success: function( arrobjResponse ) {
						var intPage = parseInt( $container.data('page') );
						var resetTop = false;

						if( arrobjResponse && null != arrobjResponse['data'] && null != arrobjResponse['data']['results'] && 'rows' in arrobjResponse['data']['results'][0] ) {
							$container.removeClass('ajax_in_process');

							if( strToken != arrobjResponse['data']['token'] ) return;

							if( 1 == intPage ) {
								var strHtml = buildResponseData( arrobjResponse['data'], true );
								$container.find('.js-eqsResponse table tbody').html( strHtml );
								resetTop = true;

							} else {
								var strHtml = buildResponseData( arrobjResponse['data'], false );
								$container.find('.js-eqsResponse table tbody').append( strHtml );
							}

							showResponseBox( event );

							//increase pagination
							$container.data('page', intPage + 1 );
						} else if( 1 == intPage ) {
							$container.find('.js-eqsResponse table').html('<tbody><tr class="js-NoResult"><td align="center">' + __( 'No results found.' ) + '</td></tr></tbody>');
							if( '' == $textBox.val().trim() && 'keyup' == event.type ) {
								closeResponseBox();
							}
						}

						//hide loading image before starting ajax call
						$container.find('.js-eqsLoading').remove();

						//reset scrollbar position to top
						if( true == resetTop ) {
							$container.find('.js-eqsResponse').scrollTop(0);
						}

						$container.parent().find('i.dropdown').css('background', '');

					},
					error: function(data) {
						//console.log(data);
					}
				});
			}, options.keyCaptureDelay );
		}

		function getToken()
		{
			var characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
			var result = "";
			var charactersLength = characters.length;

			for ( var i = 0; i < 15 ; i++ ) {
				result += characters.charAt(Math.floor(Math.random() * charactersLength));
			}

			return Date.now()+result;
		}

		function createCookie(name, value, days) {
			var expires;
			if (days) {
				var date = new Date();
				date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
				expires = "; expires=" + date.toGMTString();
			}
			else {
				expires = "";
			}
			document.cookie = name + "=" + value + expires + "; path=/";
		}

		// eqs text area event atachment
		$textBox.on( "click", function(e) {
			$keydown    = false;
			showResponseBox( e );
		});

		$textBox.on( "keydown", function(e) {
			strPreviousText = $(this).val();

			if( ( 9 === e.which || 13 === e.which ) && !$keydown ) {
				e.preventDefault();
				enterSelection( e );  // Key Enter
				$keydown    = true;
			}
		});

		$textBox.on( "keyup", function(e) {
			switch(e.which) {

				case 40: moveSelection( e, 'UP'); // Key up
					break;

				case 38: moveSelection( e, 'DOWN'); // Key down
					break;

				case 27: closeResponseBox(); // Key Esc
					break;

				// Need to skip fechResponseData() as we have already triggered in keydown event.
				case 9: // Key Tab
				case 13 : // Key Enter
					break;

				default:
					if( !( '8' == e.which || '46' == e.which ) ) {
						if( options.minRequiredChars > $(this).val().trim().length ) return;
					}

					if( strPreviousText.trim() == $(this).val().trim() ) return;

					$container.data('page', 1);
					options.data.show_all = 0;
					fetchResponseData( e );
			}
		});

		//load default scructure and dom
		init();
	})
};

//$(document).on( 'click', ' .js-eqsResponse #js-property-edit', function(){
//	window.open('/?module=properties_setupxxx&load_large_dialog=%3Fmodule%3Dproperty_details_general_generalxxx%26property[id]%3D' + $(this).data( 'property-id' ) );
//});
