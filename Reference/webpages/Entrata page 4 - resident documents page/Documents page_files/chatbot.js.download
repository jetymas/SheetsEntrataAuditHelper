
class ChatBot {

    static intServiceLimit = 0;
    defaultConfig = {
        'loader_text': 'Creating your message...',
        'btn_use_response': 'Yes, Use Generated Text',
        'input_placeholder': 'What would you like to say in the body of your message?',
        'response_placeholder': "Ok, here's the text I generated for you:",
        'input_heading_text': "In a few words, tell me what you would like to say:",
        'welcome_message': "Ask me whatever you like about this section of Entrata."
    }

    arrHumanInputs          = [];
    objWrapper              = null;
    objDrawerWrapper        = null
    objDrawerButtonClose    = null;
    objDrawerButtonOpen     = null;

    constructor( chatbotId, intServiceLimit, intDefaultLimit, strCacheKey = '' ) {

        this.objInstance = document.querySelector('[ecb="'+ chatbotId + '"]');

        ChatBot.intServiceLimit             = intServiceLimit;
        this.intDefaultLimit                = intDefaultLimit;
        this.strLocalPath                   = 'Entrata/js/module/eli/';
        this.intId                          = chatbotId;
        this.intPropertyId                  = this.objInstance.getAttribute('ecb-pid') || '';
        this.strPP                          = this.objInstance.getAttribute('ecb-pp');
        this.strServiceName                 = this.objInstance.getAttribute('ecb-service_name') || '';
        this.strInput                       = this.objInstance.getAttribute('ecb-input') || '';
        this.permission                     = this.objInstance.getAttribute('ecb-permission');
        this.streaming                      = this.objInstance.getAttribute('ecb-streaming') || 'false';
        this.objChatBotResponseStorage      = new ChatBotResponseStorage( this.getCacheKey( strCacheKey ) );
        this.responseString                 = '';

        const config                        = this.objInstance.getAttribute('ecb-config') || '{}';

        this.config( config );
        this.init();
    }

    init = () => {
        this.strUid = this.generateUid();
        // this.objChatBotResponseStorage.clearResponse();
        // this.objInstance.setAttribute('ecb-init',1);
        this.addChatBotWrapper();
        this.addChatBotDrawer();
        this.addChatBotButton();
    }

    config = ( config ) => {
        config  = JSON.parse( config );
        this.defaultConfig = { ...this.defaultConfig, ...config };

        const root = document.querySelector(":root");
        root && root.style.setProperty('--pseudo-ecb-input-placeholder', '"' + this.defaultConfig.input_placeholder + '"');
    }

    addChatBotWrapper = () => {
            this.objWrapper = document.createElement('div');
            this.objWrapper.classList.add('ecb-wrapper');
            this.objWrapper.setAttribute('ecb-id', this.intId);
    }

    addChatBotDrawer = () => {
        this.objDrawerWrapper = document.createElement('div');
        this.objDrawerWrapper.classList.add('ecb-drawer-wrapper');
        this.objDrawerWrapper.classList.add('ecb-wrapper-background');

        if( null === localStorage.getItem( this.intId + '_drawer' ) ) {
            localStorage.setItem( this.intId + '_drawer', 1 );
        }

        // create close drawer button
        const objDrawerClose = document.createElement('img');
        objDrawerClose.setAttribute( 'ecb-event-type', 'drawer');
        objDrawerClose.setAttribute('src',this.strLocalPath + 'assets/drawer-close.png');
        this.objDrawerButtonClose = document.createElement('button');
        this.objDrawerButtonClose.setAttribute('type', 'button');
        this.objDrawerButtonClose.classList.add('ecb-drawer-button-close');
        this.objDrawerButtonClose.appendChild(objDrawerClose);

        // Add Element
        this.objDrawerWrapper.append( this.objDrawerButtonClose );
        this.objWrapper.append( this.objDrawerWrapper );
        this.objInstance.parentNode.insertBefore(this.objWrapper, this.objInstance);
        this.objWrapper.appendChild(this.objInstance);

        // create open drawer button
        const objDrawerOpen = document.createElement('img');
        objDrawerOpen.setAttribute('src',this.strLocalPath + 'assets/drawer-open.png');
        this.objDrawerButtonOpen = document.createElement('button');
        this.objDrawerButtonOpen.setAttribute('type', 'button');
        this.objDrawerButtonOpen.classList.add('ecb-drawer-button-open');
        this.objDrawerButtonOpen.appendChild(objDrawerOpen);
        this.objDrawerWrapper.insertAdjacentElement( 'afterend', this.objDrawerButtonOpen );

        this.objDrawerButtonOpen.addEventListener( 'click', () => {
            switch(  localStorage.getItem( this.intId + '_drawer_closed_by' ) ) {
                case 'modal':
                    this.showModal();
                    break;
                case 'drawer':
                    this.openDrawer();
                    break;
                default:
                    this.openDrawer();
            }
        } );
        this.objDrawerButtonClose.addEventListener( 'click', (e) => {
            this.closeDrawer(e.target.getAttribute('ecb-event-type'))
        } );
    }

    addChatBotButton = () => {

        this.objChatBotToolTip = document.createElement('span');
        this.objChatBotToolTip.classList.add( 'ecb-drawer-tooltip' );
        this.objChatBotToolTip.textContent = 'How can I help?';
        this.objDrawerWrapper.prepend( this.objChatBotToolTip );

        const objChatBotImg = document.createElement('img');
        objChatBotImg.setAttribute('src',this.strLocalPath + 'assets/outer_cube.png');
        objChatBotImg.classList.add('ecb-button-img');

        this.objChatBotButton = document.createElement('button');
        this.objChatBotButton.setAttribute('type', 'button');
        this.objChatBotButton.classList.add('ecb-button');
        this.objChatBotButton.appendChild(objChatBotImg);
        this.objDrawerWrapper.prepend( this.objChatBotButton );

        ( 1 == localStorage.getItem( this.intId + '_drawer' ) ) ? this.openDrawer() : this.closeDrawer();

        this.objDrawerWrapper.addEventListener( 'click', ( event ) => {
            event.preventDefault();
            if( event.target.classList.contains('ecb-drawer-button-open') || event.target.classList.contains('ecb-button-img') || event.target.classList.contains('ecb-drawer-tooltip') ) {
                if( this.objWrapper.querySelector('.ecb-modal') !== null ) return;
                this.showModal();
            }
        } );
    }

    openDrawer = () => {
        this.objDrawerButtonOpen.style.display = 'none';
        this.objDrawerWrapper.style.display = 'flex';
        localStorage.setItem( this.intId + '_drawer', 1 );
    }

    closeDrawer = ( strEventType = '' ) => {
        //set drawer postion away from the scrollbar
        if( null != this.objInstance.closest('.modal-body') ) {
            this.objDrawerButtonOpen.style.right = '12px';
        }

        localStorage.setItem( this.intId + '_drawer', 0 );
        localStorage.setItem( this.intId + '_drawer_closed_by', strEventType );

        this.objDrawerWrapper.style.display = 'none';
        this.objDrawerButtonOpen.style.display = 'block';
    }

    loader = ( boolShowLoading ) => {
        const modal = document.querySelector('[ecb-id="' + this.intId + '"]').querySelector('.ecb-modal-response.active');
        if( modal ) {
            boolShowLoading ? modal.querySelector('.ecb-modal-loading').style.display = 'flex' : modal.querySelector('.ecb-modal-loading').style.display = 'none';

        }
    }

    generateUid = () => {
        const strCharacters = '0123456789';
        let strResult = '';
        const intCharactersLength = strCharacters.length;
        for( let i = 0; i < 10; i++ ) {
            strResult += strCharacters.charAt( Math.floor( Math.random() * intCharactersLength ) );
        }

        return strResult;
    }

    updateServiceLimit = () => {
        let objServiceLimit = document.querySelector('[ecb-id="' + this.intId + '"]')?.querySelector('.ecb-service-limit span:first-child');

        const objFormData = new FormData();
        objFormData.set( 'permission', this.permission );
        objFormData.set( 'eli-type', 'chatbot' );
        fetch( window.location.origin + '/?module=generative_aixxx&action=get_service_limit', { method: 'POST', body: objFormData })
            .then( res => res.json() )
            .then( res => {
                if( res.success ) {
                    ChatBot.intServiceLimit = res?.data?.service_limit;
                    objServiceLimit.innerHTML = ChatBot.intServiceLimit;
                }
            });
    }

    keyEventListener = () => {
        this.objInput.addEventListener( 'keypress', ( e ) => {
            if( true != e.shiftKey && e.key === 'Enter' ) {
                e.preventDefault();
                this.sendPrompt('');
            } else if( true == e.shiftKey && e.key === 'Enter' ) {
                e.preventDefault();
                if (window.getSelection) {
                    let selection = window.getSelection(),
                        range = selection.getRangeAt(0),
                        br = document.createElement("br"),
                        textNode = document.createTextNode("\u00a0");
                        range.deleteContents();
                        range.insertNode(textNode);
                        range.insertNode(br);
                        range.collapse(false);
                        // range.selectNodeContents(textNode);

                        selection.removeAllRanges();
                        selection.addRange(range);
                        return false;
                }
            }
        });
    }

    showModal = () => {

        this.objDrawerButtonOpen.style.display = 'none';
        const root = document.querySelector(":root");
        root && root.style.setProperty('--pseudo-ecb-input-placeholder', '"' + this.defaultConfig.input_placeholder + '"');

        let formUI = this.loadFormUI(this.strInput);
        let strModal = `
        <div class="ecb-modal" id="` + this.intId + `">
            <div class="ecb-modal-body"> ` + formUI + ` </div>
        </div>`;

        const objParser = new DOMParser();
        const objHtml = objParser.parseFromString(strModal, 'text/html');
        const objBody = objHtml.querySelector('.ecb-modal');
        this.objWrapper.appendChild(objBody);
        this.bindModal();
        this.loadWelcomeMessage();
        this.loadCachedMessages();

        if (this.strInput.length > 0) this.sendPrompt('')

    }

    loadFormUI = ( strInput= '' ) => {
        const boolIsAllowed = ( ChatBot.intServiceLimit < 1 ) ? false : true;
        const strButtonDisabled = (!boolIsAllowed) ? 'disabled' : '';
        return `
                        <div class='ecb-modal-form'>
                            <div class="ecb-init">
                             <div class="ecb-init-icon">
                                <img src='` + this.strLocalPath + `assets/outer_cube.png' />
                              </div>
                              <div  class="ecb-init-message">
                                <span>Entrata Layered Intelligence</span>
                                <svg viewBox="0 0 32 32" class="entrata-svg-icon margin5-right ecb-btn-legal-disclaimer default pointer" data-html="true" data-ui="actiontip-hover" data-placement="bottom" data-selector=".actiontip-click-content-chatbot"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#info-icon"></use></svg>
                                <div class="actiontip-click-content-chatbot hide">Entrata relies on third-party AI technology to produce the AI responses in this chat. Your prompts are shared with the third party, and the AI responses may include inaccurate or offensive information that does not represent Entrata or its views.</div>
                              </div>
                               <div class="ecb-init-close-button">
                                    <img class='ecb-btn-minimize-head' ecb-event-type="modal" src='` + this.strLocalPath + `assets/drawer-close.png' alt='drawer-close.png' />
                                    <img class='ecb-btn-close' src='` + this.strLocalPath + `assets/close.png' alt='close.png' />
                               </div>

                            </div>
                            <div class="ecb-custom-response"></div>
                            <div class="ecb-modal-input-wrapper-parent">
                                <div class="ecb-modal-input-wrapper">
                                    <span class="ecb-modal-input" role="textbox" contenteditable="` + boolIsAllowed + `">` + strInput + `</span>
                                    <div class="ecb-submit-button">
                                        <button type='button' class='ecb-btn-send' ` + strButtonDisabled + `><img src='` + this.strLocalPath + `assets/send_prompt.png' alt="send_prompt.png"/></button>
                                    </div>
                                </div>
                            </div>

                            <div class="ecb-service-limit"><span>` + ChatBot.intServiceLimit + `</span>/<span>` + this.intDefaultLimit + `</span> Prompts remaining</div>
                        </div>
                        `;
    }

    loadResponeUI = () => {
        document.querySelector('[ecb-id="' + this.intId + '"]')?.querySelector('.ecb-modal-response.active')?.classList.remove('active');
        const hideQuery = ( this.strInput !== '' ) ? 'display:none' : '';
        const strResponseUI = `
        <div class='ecb-modal-response active'>
                <div class="ecb-modal-response-wrapper">
                    <div class="ecb-modal-question-wrapper" style="` + hideQuery + `">
                        <img src='` + this.strLocalPath + `assets/reponse_user.png' />
                        <div class="ecb-modal-response-question"></div>
                    </div>
                </div>
                <div class='ecb-modal-loading' style='display:none'>
                    <img src='` + this.strLocalPath + `assets/outer_cube.png' />
                    <span>` + this.defaultConfig.loader_text + `</span>
                </div>

                 <div class='ecb-modal-loading ecb-error-wrapper' style='display:none'>
                    <img src='` + this.strLocalPath + `assets/outer_cube.png' />
                    <div class="alert error slim hide rebuild-error ecb-error">
                        <span></span>
                        <div class="ecb-regenerate-wrapper">
                            <img src='` + this.strLocalPath + `assets/regenerate.png' />
                            <button type="button" class="ecb-btn-regenerate">Regenerate response</button>
                        </div>
                    </div>
                 </div>


            <div class="ecb-modal-response-container" style='display:none'>
                <div class="ecb-modal-response-heading">
                    <img src='` + this.strLocalPath + `assets/outer_cube.png' />
                    <span>` + this.defaultConfig.response_placeholder + `</span>
                </div>
                <div class="ecb-actual-response">
                    <pre></pre>
                </div>
            </div>

        </div>`;

        this.objModalBody = document.querySelector('[ecb-id="' + this.intId +'"]').querySelector('.ecb-modal-body').querySelector('.ecb-modal-form').querySelector('.ecb-custom-response');
        this.objModalBody.classList.add('show-response')
        this.objModalBody.innerHTML += strResponseUI;
        this.bindModal();
    }

    loadWelcomeMessage = () => {
        const strResponseUI =  `
        <div class='ecb-modal-response active'>
            <div class="ecb-modal-response-wrapper">
                <div class="ecb-modal-question-wrapper ecb-modal-question-cube">
                    <img src='` + this.strLocalPath + `assets/outer_cube.png' />
                    <div class="ecb-modal-response-question"> ` + this.defaultConfig.welcome_message + `</div>
                </div>
            </div>
        </div>`;

        this.objModalBody = document.querySelector('[ecb-id="' + this.intId +'"]').querySelector('.ecb-modal-body').querySelector('.ecb-modal-form').querySelector('.ecb-custom-response');
        this.objModalBody.classList.add('show-response')
        this.objModalBody.innerHTML += strResponseUI;
    }

    loadCachedMessages = () => {
        let strCachedMessages = this.objChatBotResponseStorage.getResponse().reduce( ( response, current ) => {


        const strResponseUI =  `
        <div class='ecb-modal-response'>
            <div class="ecb-modal-response-wrapper">
                <div class="ecb-modal-question-wrapper">
                    <img src='` + this.strLocalPath + `assets/reponse_user.png' />
                    <div class="ecb-modal-response-question">` + current.question + `</div>
                </div>
            </div>
            <div class="ecb-modal-response-container">
                <div class="ecb-modal-response-heading">
                    <img src='` + this.strLocalPath + `assets/outer_cube.png' />
                    <span>` + this.defaultConfig.response_placeholder + `</span>
                </div>
                <div class="ecb-actual-response">
                    <pre>` + current.answer + `</pre>
                </div>
            </div>
        </div>`;
            response += strResponseUI;
            return response;
        }, '' );

        this.objModalBody = document.querySelector('[ecb-id="' + this.intId +'"]').querySelector('.ecb-modal-body').querySelector('.ecb-modal-form').querySelector('.ecb-custom-response');
        this.objModalBody.innerHTML += strCachedMessages;
        const  objResponseWrapper = document.querySelector('.ecb-custom-response');
        objResponseWrapper.scrollTo(0, objResponseWrapper.scrollHeight);
    }

    bindModal = () => {
        this.objModal = document.querySelector('[ecb-id="' + this.intId + '"]').querySelector('.ecb-modal');
        this.objInput = document.querySelector('[ecb-id="' + this.intId + '"]').querySelector('.ecb-modal-input');
        this.objBtnSend = document.querySelector('[ecb-id="' + this.intId + '"]').querySelector('.ecb-btn-send');
        this.objBtnCloseModal = document.querySelector('[ecb-id="' + this.intId + '"]').querySelector('.ecb-btn-close');
        this.objBtnMinimizeModal = document.querySelector('[ecb-id="' + this.intId + '"]').querySelector('.ecb-btn-minimize-head');


        this.objBtnModalQuestion = document.querySelector('[ecb-id="' + this.intId + '"]')?.querySelector('.ecb-modal-response.active')?.querySelector('.ecb-modal-response-question');
        this.objBtnModalAnswer = document.querySelector('[ecb-id="' + this.intId + '"]')?.querySelector('.ecb-modal-response.active')?.querySelector('.ecb-actual-response pre');
        this.objBtnModalResponseContainer = document.querySelector('[ecb-id="' + this.intId + '"]')?.querySelector('.ecb-modal-response.active')?.querySelector('.ecb-modal-response-container');
        this.objErrorWrapper = document.querySelector('[ecb-id="' + this.intId + '"]')?.querySelector('.ecb-modal-response.active')?.querySelector('.ecb-error-wrapper')
        this.objError = document.querySelector('[ecb-id="' + this.intId + '"]')?.querySelector('.ecb-modal-response.active')?.querySelector('.ecb-error')
        this.objRegenerateResponse = document.querySelector('[ecb-id="' + this.intId + '"]')?.querySelector('.ecb-modal-response.active')?.querySelector('.ecb-btn-regenerate');

        this.objInput && this.objInput.focus();
        this.objBtnSend && this.objBtnSend.addEventListener( 'click', () => this.sendPrompt('') );
        this.objRegenerateResponse && this.objRegenerateResponse.addEventListener( 'click', this.regenerateResponse )
        this.objBtnCloseModal && this.objBtnCloseModal.addEventListener( 'click', this.closeModal );
        this.objBtnMinimizeModal && this.objBtnMinimizeModal.addEventListener( 'click', ( e ) => {
            this.objDrawerButtonOpen.style.display = 'block';
            this.minimizeModal( e.target.getAttribute('ecb-event-type'), true );
        } );

        this.keyEventListener();
    }

    sendPrompt = ( lastResponse ) => {
        // change modal body to response body

        const strValue = ( lastResponse !== '' ) ? lastResponse : this.objInput.textContent;
        if( '' == strValue || this.objBtnSend.hasAttribute('disabled') ) {
            // TODO Validation
            return;
        }

        this.arrHumanInputs?.push( strValue );

        if( typeof lastResponse !== 'object' && lastResponse === '' ) {
            this.loadResponeUI();
        }

        this.objBtnModalQuestion.innerHTML = strValue;
        this.objInput.innerHTML = '';

        const  objResponseWrapper = document.querySelector('.ecb-custom-response');
        // make a api request
        this.loader( true );
        objResponseWrapper.scrollTo(0, objResponseWrapper.scrollHeight);

        const root = document.querySelector(":root");
        root && root.style.setProperty('--pseudo-ecb-input-placeholder', '"Suggest Changes"');
        this.objBtnSend.classList.add('visited');

        this.objBtnSend.setAttribute( 'disabled', true );

        const objFormData = new FormData();
        objFormData.set('human_input', strValue);
        objFormData.set( 'pp', this.strPP );
        objFormData.set( 'PID', this.intPropertyId );
        objFormData.set( 'session_id', this.strUid );
        objFormData.set( 'service_name', this.strServiceName );
        objFormData.set( 'permission', this.permission || '');
        objFormData.set( 'eli-type', 'chatbot' );
        objFormData.set( 'id', this.intId );
        objFormData.set( 'streaming', this.streaming );

        fetch(window.location.origin + '/?module=generative_aixxx&action=send_prompt', { method:'POST', body: objFormData })
            .then( async res => {

                if( !res.ok ) {
                    const errorResponse =  await res.json();
                    throw new ServerError( res?.status, errorResponse?.message, res?.header?.get('Content-Type') );
                }

                if( res.ok && res?.header?.get('Content-Type') === 'text/html; charset=UTF-8' ) {
                    throw new ServerError( res?.status, '', res?.header?.get('Content-Type') );
                }
                return res;
            })
            .then( response => {
                const stream = response.body;
                const reader = stream.getReader();
                this.responseString = '';

                const readChunk = () => {

                    reader.read()
                        .then(({ value, done}) => {
                            objResponseWrapper.scrollTo(0, objResponseWrapper.scrollHeight);
                            if (done) {
                                this.bindModal();
                                this.objChatBotResponseStorage.setResponse( {question: strValue, answer: this.responseString} );
                                this.updateServiceLimit();
                                return;
                            }
                            // Convert the chunk value to a string
                            let chunkString = new TextDecoder().decode(value);
                            this.loader( false );
                            chunkString = chunkString.replace(/^"+|"+$/g, '');
                            const regex = /\\n|\\r\\n|\\n\\r|\\r/g;
                            chunkString = chunkString.replace(regex, '<br>');
                            this.objBtnModalAnswer.innerHTML += chunkString;
                            this.responseString += chunkString;
                            this.objBtnModalResponseContainer.style.display = 'block';
                            this.objBtnCloseModal.classList.remove('hide');

                            // Read the next chunk
                            readChunk();
                        });
                };

                readChunk();
            } )
            .catch( error => {
                switch( error.intErrorCode ) {
                    case 403:
                        this.objError.querySelector('span').innerHTML = error.message;
                        break;
                    case 429:
                        this.objError.querySelector('span').innerHTML = error.message;
                        break;
                    default:
                        this.objError.querySelector('span').innerHTML = 'Oops, something went wrong. Please try again.';
                        break;
                }
                this.loader( false );
                this.objBtnCloseModal.classList.remove('hide');
                this.objErrorWrapper.style.display = 'flex';
            }).finally( () => {
                this.objBtnSend.removeAttribute( 'disabled' );
                this.objBtnSend.classList.remove('visited');
        });
    }

    closeModal = () => {
        this.openDrawer();
        this.objChatBotResponseStorage.clearResponse();
        this.minimizeModal();
    }

    minimizeModal = ( strEventType = '', hideDrawerButton = false ) => {
        if( hideDrawerButton === true ) {
            this.closeDrawer( strEventType );
        }

        this.objModal.remove();
    }

    regenerateResponse = () => {
        let strLastResponse = this.arrHumanInputs.pop();
        this.objErrorWrapper.style.display = 'none'
        this.sendPrompt( strLastResponse );
    }

    getCacheKey = ( strCacheKey ) => {
        if( strCacheKey == '' ) {
            strCacheKey = this.intId;
        } else {
            strCacheKey += '_' + this.intId;
        }

        return strCacheKey;
    }
}

class ChatBotResponseStorage {

    constructor( id ) {
        this.intId = id;
    }

    getResponse = () => {
        const responses = JSON.parse(sessionStorage.getItem( this.intId ));
        return responses || [];
    }

    setResponse = ( newResponse ) => {
        const responses = [ ...this.getResponse(), newResponse ];
        sessionStorage.setItem( this.intId, JSON.stringify( responses ) );
    }

    getLastResponse = () => {
        const responses = this.getResponse();
        const response = responses.pop();
        return response;
    }

    clearResponse = () => {
        sessionStorage.removeItem( this.intId );
    }
}

// main execution
psi.chatBot = ( function() {
    let initChatBot = ( chatbotId ) => {
                let arrobjChatbots = document.querySelectorAll('chatbot');
                if( 1 < arrobjChatbots.length) {
                    console.log('multiple chatbots found');
                    return;
                }

        const objFormData = new FormData();
        objFormData.set('permission', ( document.querySelector('[ecb="' + chatbotId + '"]').getAttribute('ecb-permission') ) || '');
        objFormData.set( 'eli-type', 'chatbot' );
        fetch( window.location.origin + '/?module=generative_aixxx&action=get_configuration', { method: 'POST', body: objFormData })
            .then( res => res.json() )
            .then( res => {
                if( res.success ) {
                    if( res?.data?.is_allowed ) {
                        const intServiceLimit = res?.data?.service_limit;
                        const intDefaultLimit = res?.data?.default_limit;
                        const strCacheKey       = res?.data?.cache_key;
                        let chatBot = new ChatBot( chatbotId,intServiceLimit, intDefaultLimit, strCacheKey );
                    }
                }
            });
            }

    return {
        initChatBot
    }
})();
