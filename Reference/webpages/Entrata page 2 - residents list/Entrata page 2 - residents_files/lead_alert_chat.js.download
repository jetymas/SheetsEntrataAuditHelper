function getCurrentUtcTime() {
	var intCurrentTime = Date.now();
	var intUtcTimestamp = new Date( ( new Date( intCurrentTime ) ).toUTCString() ).getTime();
	return intUtcTimestamp / 1000; // return seconds instead of milliseconds
}

function getLocalTime( intTimestamp ) {
	var myDate = new Date( intTimestamp * 1000 );
	return myDate.toLocaleString();
}

var objLeadAlterChat = function() {

	var arrstrChatHistory = {};

	function storeChat( objMessage ) {

		var strFrom = objMessage.getAttribute( "from" );
		var strMessageId = objMessage.getAttribute( "id" );
		var strChatRoomId = strFrom.split( "@" )[0];
		var boolIsProspect = 1;
		var strNick = strFrom.split( '/' )[1];
		var strMsg = getText( objMessage.getElementsByTagName( "body" )[0] );
		var strSender = objMessage.getAttribute( "sender" );
		var strStatus = objMessage.getAttribute( "status" );

		var intEventId = null;
		var intParameterTime = null;
		var objParameterElement = objMessage.getElementsByTagName( 'parameter' );
		if( 0 < objParameterElement.length ) {
			if( (objParameterElement[0]).hasAttribute( 'status' ) ) {
				strStatus = (objParameterElement[0]).getAttribute( "status" );
			}
			if( (objParameterElement[0]).hasAttribute( 'sender' ) ) {
				strSender = (objParameterElement[0]).getAttribute( "sender" );
			}
			if( (objParameterElement[0]).hasAttribute( 'event_id' ) ) {
				intEventId = (objParameterElement[0]).getAttribute( "event_id" );
			}
			if( (objParameterElement[0]).hasAttribute( 'time' ) ) {
				intParameterTime = (objParameterElement[0]).getAttribute( "time" );
			}
		}

		if( "transfer" === strStatus ) {
			strMsg = strSender + ' has transferred the chat.';
		}else if( "leave" === strStatus ) {
			strMsg = strSender + ' has left the chat.';
		}else if( "join" === strStatus ) {
			strMsg = strSender + ' has joined the chat.';
		} else if( "end" === strStatus ) {
			strMsg = strSender + ' ended the chat.';
		}

		if( 'chat_transferred'  == strStatus ) {
			if( true == objMessage.hasAttribute('event_id') ) {
				arrstrChatHistory[strChatRoomId]['other_details'] = { event_id :objMessage.getAttribute( "event_id" ) };
				var eventId = arrstrChatHistory[strChatRoomId]['other_details'];
			}
			clearChachedChatHistory( strChatRoomId );
			arrstrChatHistory[strChatRoomId]['other_details'] = eventId;
		}

		if( "undefined" != typeof( strNick ) && null !== strNick.match( /^(entrata)/g ) ) {
			boolIsProspect = 0;
		}

		if ( '' !=  strMsg ) {
			intTime = objMessage.getAttribute( "time" );
			if( !intTime && undefined != intParameterTime && null != intParameterTime && '' != intParameterTime ) {
				intTime = intParameterTime;
			}

			var objChatHistory = {
				msg_id          : strMessageId,
				msg             : strMsg,
				sender          : strSender,
				time            : intTime,
				status          : strStatus,
				is_prospect     : boolIsProspect
			};
		}

		if( undefined === arrstrChatHistory[strChatRoomId] ) {
			arrstrChatHistory[strChatRoomId] = {};
		}

		if( null != intEventId && '' != intEventId && undefined != intEventId ) {
			arrstrChatHistory[strChatRoomId]['other_details'] = { event_id: intEventId };
		}

		if( true == objMessage.hasAttribute('event_id') ) {
			arrstrChatHistory[strChatRoomId]['other_details'] = { event_id :objMessage.getAttribute( "event_id" ) };
		}

		if( null != strMessageId ) {
			arrstrChatHistory[strChatRoomId][strMessageId] = objChatHistory;
		}
		return true;
	}

	function updateMessageStatus( strChatRoomKey, strMsgId, strStatus, intTime ) {
		if( undefined !== arrstrChatHistory[strChatRoomKey] && undefined !== arrstrChatHistory[strChatRoomKey][strMsgId] ) {
			arrstrChatHistory[strChatRoomKey][strMsgId].status = strStatus;
			arrstrChatHistory[strChatRoomKey][strMsgId].time = intTime;
		}
		return true;
	}

	function getChatHistory( strChatRoomJid ) {
		var objChatHistory = arrstrChatHistory[strChatRoomJid];
		delete arrstrChatHistory[strChatRoomJid];
		return objChatHistory;
	}

	function cacheChatHistory( objMessage ) {

		var strMsg  = getText( objMessage.getElementsByTagName( "body" )[0] );
		// we don't need to other attributes so by passing
		if( true == objMessage.hasAttribute("event_id") ) {
			storeChat(objMessage);
		}
		var event_id = null;
		var objParameterElement = objMessage.getElementsByTagName( 'parameter' );
		if( objParameterElement.length > 0 ) {
			event_id = ( objParameterElement[0] ).hasAttribute("event_id")
		}

		if( undefined != event_id && null != event_id && '' != event_id  ) {
			storeChat(objMessage);
		}

		if( null === strMsg ) {
			return true;
		}

		var objReceived = objMessage.getElementsByTagName( "received" );
		var objRead = objMessage.getElementsByTagName( "read" );
		var strFrom = objMessage.getAttribute( "from" );
		var intTime = objMessage.getAttribute( "time" );
		var strChatRoom = strFrom.split( "@" )[0];

		if( 0 < objReceived.length ) {
			var strMsgId = ( objReceived[0] ).getAttribute( "id" );
			intTime = ( objReceived[0] ).getAttribute( "time" );
			updateMessageStatus( strChatRoom, strMsgId, "Received", intTime );
		} else if( 0 < objRead.length ) {
			var strReadMsgId = ( objRead[0] ).getAttribute( "id" );
			intTime = ( objRead[0] ).getAttribute( "time" );
			updateMessageStatus( strChatRoom, strReadMsgId, "Read", intTime );
		} else if( "" !== strMsg || null !== objMessage.getAttribute( "status" ) ) {
			storeChat( objMessage );
		}
		return true;
	}

	function initChatHistory( strChatRoomJid ) {
		strChatRoomJid = strChatRoomJid.split('@')[0];
		arrstrChatHistory[strChatRoomJid] = {};
	}

	function getText( elem ) {
		if( !elem ) {
			return null;
		}

		// nodeType 3 - Text data element
		var str = "";
		if( elem.childNodes.length === 0 && elem.nodeType == 3 ) {
			str += elem.nodeValue;
		}

		for( var i = 0; i < elem.childNodes.length; i++ ) {
			if( elem.childNodes[i].nodeType == 3 ) {
				str += elem.childNodes[i].nodeValue;
			}
		}

		str = str.replace( /\&/g, "&amp;" );
		str = str.replace( /</g, "&lt;" );
		str = str.replace( />/g, "&gt;" );
		str = str.replace( /'/g, "&apos;" );
		str = str.replace( /"/g, "&quot;" );

		return str;
	}

	function clearChachedChatHistory( strChatRoomJid ) {
		arrstrChatHistory[strChatRoomJid] = {};
	}

	return {
		cacheChatHistory: cacheChatHistory,
		getChatHistory: getChatHistory,
		initChatHistory: initChatHistory,
		clearChachedChatHistory: clearChachedChatHistory
	};

}();