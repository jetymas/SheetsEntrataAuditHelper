var ReportsModule = {};
ReportsModule.tokens = {};
ReportsModule.correlationId = null;
ReportsModule.strOutputType				= 'screen';
ReportsModule.boolReportSorting			= false;
ReportsModule.boolLoadPeriodFilterValue	= true;
ReportsModule.strFormName				= '#report_form';
ReportsModule.strViewReportUrl			= '';

ReportsModule.submitViewReport = function() {
	psi.patterns.ajaxRequest( { strElementSelector: '#library-report-container', url: ReportsModule.strViewReportUrl,
		method: 'post',
		data: $( '#report_form' ).serialize(),
		success: function( strResponse ) {

			if( '{' == strResponse[0] ) {
				var parsedJson = $.parseJSON( strResponse );
				if( null != parsedJson.error ) {
					for( i=0; i < parsedJson.error.length; i++ ) {
						if( 'object' === typeof( parsedJson.error[i] ) ) {
							// Filter specific error message - just grab the message, we have no way to target it to the filter yet
							$( '#form_error_msg' ).append( '<span class="font14 lineheight">' + parsedJson.error[i].message + '</span><br/>' );
						} else {
							// General messages are just strings, not arrays, so we can use it directly
							$( '#form_error_msg' ).append( '<span class="font14 lineheight">' + parsedJson.error[i] + '</span><br/>' );
						}
					}
					$( '#form_error' ).show( 'slow' );
				}
			} else {
				$('#form_error').hide();
				$('.update-filters').show();

				if( $('.onoff').hasClass('off') ) {
					$('.show_or_hide_filters').trigger('click');
				}
				$( '#report-filters' ).hide();
				$( '#basic-reports-wrapper' ).html( strResponse );
				psi.patterns.bindEssentials();
			}

			psi.patterns.removeLoadingImage( { strElementSelector: '#library-report-container' } );

		}
	} );
};

ReportsModule.validateReportFilter = function( boolSaveFilter ) {
	if( true != boolSaveFilter ) {
		boolSaveFilter = false;
	}
	try {
		ReportsModule.validated = true;
		ReportsModule.boolFuncResponse = true;
		$( '#form_error_msg' ).html( '' );

		//Call validation functions on all input fields that are visible
		$('form#report_form').find(':input:not(:disabled):not(:button):not(:checkbox)').each(function(){

			// Get filter id for error message targeting
			var filterId = $(this).parents('div[id$="_filter"]').attr('id');
			//Check for required fields
			//Also check for visible elemnts
			if( $(this).attr('required') ) {

				switch( this.type ) {
					case 'password':
					case 'select-multiple':
					case 'select-one':
					case 'text':
						if( '' == $(this).val() ) {
							ReportsModule.boolFuncResponse &= false;
							$( '#form_error_msg' ).append( '<span class="font14 lineheight">' + $(this).attr('required_msg') + '</span><br>' );
							if( 'undefined' !== typeof filterId ) {
								ReportsModule.addFilterError( filterId, $(this).attr('required_msg') );
							}
						}
						break;
					case 'hidden':
						if( '' == $(this).val() && 'required' == $(this).attr('required') ) {
							ReportsModule.boolFuncResponse &= false;
							$( '#form_error_msg' ).append( '<span class="font14 lineheight">' + $(this).attr('required_msg') + '</span><br>' );
							if( 'undefined' !== typeof filterId ) {
								ReportsModule.addFilterError( filterId, $(this).attr('required_msg') );
							}
						}
						break;
					case 'textarea':
						break;
					case 'checkbox':
						break;
					case 'radio':
						break;
				}

			}
			if( $(this).attr('validation_function_name') ) {
				var boolEvalResult = false;
				var validation_function_name = $(this).attr('validation_function_name');
				var validation_msg = $(this).attr('validation_msg');
				var params = $(this).attr('validation_function_params');
				ReportsModule.boolFuncResponse &= boolEvalResult = eval(validation_function_name +"(" +   params + ");");
				if( 'undefined' !== typeof filterId && false == boolEvalResult ) {
					ReportsModule.addFilterError( filterId, $(this).attr('validation_msg') );
				}
			}

			if( 'undefined' != typeof( property_limit ) && 'undefined' != typeof( property_count ) ) {

				if( ( property_limit < property_count ) && ( 'property_ids_filter' == filterId ) ) {

					var propertyIdsFilter = 'property_ids'+ '_filter';
					if( $( 'div#property_list0 ul.open' ).has( 'li' ).length == 0 ) {
						ReportsModule.validated = false;
						ReportsModule.addFilterError( propertyIdsFilter, $( '#property_list0' ).attr( 'msg' ) );
					}
				}
			}
		});

		$("form#report_form .js_min_required_validation:visible").each( function() {
			if( undefined !== $( this ).attr( 'min_required' ) ) {

				var strFilterId 			= $(this).attr('id');
				if( -1 == jQuery.inArray( strFilterId.substring(0, strFilterId.length - 7), ReportsModule.arrstrExcludeFilterKeyValidation ) || false == boolSaveFilter ) {

					var intRequiredCount 		= $( this ).attr( 'min_required' );
					var intSelectedListItems 	= 0;

					var boolIsAdvanceFilter = ( 'undefined' !== typeof PropertyGroupCombo && 'undefined' !== typeof( PropertyGroupCombo.type ) && 'Advanced-v2' === PropertyGroupCombo.type );
					if( false === boolIsAdvanceFilter ) {
						boolIsAdvanceFilter = ( 'undefined' !== typeof propertyGroupComboLite && 'undefined' !== typeof( propertyGroupComboLite.type ) && 'Advanced-lite' === propertyGroupComboLite.type );
					}

					if( 'property_group_ids_filter' == strFilterId && true === boolIsAdvanceFilter ) {
						intSelectedListItems = $( this ).find( 'input[type=hidden]' ).length;
					} else {
						intSelectedListItems = $( this ).find( 'input[type=checkbox]:checked' ).length;
					}
					if( 'report_filter[ps_product_ids]' == $( this ).find( 'input[type=hidden]' ).attr('name') ) {
						intSelectedListItems = intSelectedListItems - 1;
					}
					// Validation added for case when we select select all and there is no element present in multi select list.
					ReportsModule.strComboBoxFilterkeyTest		= strFilterId.replace( '_filter', '_list_select_all' );
					if( 1 == intSelectedListItems && true == $( '#' + ReportsModule.strComboBoxFilterkeyTest ).is( ':checked' ) ) {
						intSelectedListItems = 0;
					}

					if( intSelectedListItems < intRequiredCount ) {

						if( undefined !== $( this ).attr( 'msg' ) ) {
							var strErrorMessage = $( this ).attr( 'msg' );
						} else {
							var strErrorMessage = 'Invalid input.';
						}
						$( '.report-filters #form_error_msg' ).append( '<span class="font14 lineheight">' + strErrorMessage + '</span><br>' );
						if( 'undefined' !== strFilterId ) {
							ReportsModule.addFilterError( strFilterId, strErrorMessage );
						}
						ReportsModule.validated = false;
					}
				}
			}
		});

		if( true == ReportsModule.boolFuncResponse && true == ReportsModule.validated) {
			return true;
		} else {
			$( '.update-filters' ).hide();
			$( '#form_error_msg' ).css({'line-height': '14px'});
			$( '#form_error' ).show( 'slow' );
			return false;
		}
	} catch( e ) {
		return false;
	}
	return true;
};

ReportsModule.saveReportFilter = function( module, filterContainer ) {

	if( 'FORM' != filterContainer.prop('tagName') ) {
		filterContainer = filterContainer.find('form');
	}

	this[module].filterData = filterContainer.serialize();
	this[module].columnOptions = psi.reportDisplayOptions.getDisplayOptions() ? $.param( { display_options: psi.reportDisplayOptions.getDisplayOptions() } ) : '';
};

ReportsModule.saveDownloadOptions = function( module, downloadOptionsContainer ) {

	if( 0 < downloadOptionsContainer.length ) {

		if( 'FORM' != downloadOptionsContainer.prop('tagName') ) {
			downloadOptionsContainer = downloadOptionsContainer.find('form');
		}

		this[module].downloadOptions = downloadOptionsContainer.serialize();
	} else {
		this[module].downloadOptions = null;
	}
};

ReportsModule.saveSortOptions = function( module, column, direction, isClickToSortColumn ) {

	this[module].sortOptions = 'sort_by=' + column + '&sort_order=' + direction;
	if( 1 == isClickToSortColumn ) {
		this[module].sortOptions = 'sort_by=' + column + '&sort_order=' + direction + '&is_click_to_sort_column=' + isClickToSortColumn;
	}
};

ReportsModule.savePageOptions = function( module, pageNumber ) {
	if( null != pageNumber ) {
		this[module].pageOptions = 'page_no=' + pageNumber;
	} else {
		this[module].pageOptions = '';
	}
};

ReportsModule.getRequestData = function( module ) {
	return Array.prototype.join.call(
		jQuery( [ this[module].filterData, this[module].sortOptions, this[module].columnOptions, this[module].downloadOptions ] )
			.filter(function( index, value ) { return value; } ), "&"
	) + '&report_module=' + module;
};

ReportsModule.generateReport = function( module, action, viewDataContainer, pageNo ) {
	if( 'export_api' == action ) {
		// Create a form we can use to trigger the download
		var url = this[module].strViewReportUrl.replace( /&?action=[^&]*/, '' ) + '&action=' + action;

		$.ajax({
			url: url,
			data: data,
			method: 'post',
			success: function( strResponse ) {
				viewDataContainer.find('.view-data-content').text( strResponse );
			}
		});
	} else if( 'view_report' != action ) {
		// Perform download

		// Create a form we can use to trigger the download
		var url = this[module].strViewReportUrl.replace( /&?action=[^&]*/, '' ) + '&action=' + action,
			data = Array.prototype.join.call( jQuery( [ this[module].filterData, this[module].sortOptions, this[module].columnOptions, this[module].downloadOptions ] ).filter(function( index, value ) { return value; } ), "&" ),
			$form = $('<form>').appendTo('body');

		// Add request data to the form
		$.each( data.replace( /\+/g, ' ' ).split( '&' ), function() {
			var kvp = this.split('=');
			$form.append( '<input type="hidden" name="' + decodeURIComponent( kvp[0] ) + '" value="' + decodeURIComponent( kvp[1] ) + '" />' );
		});

		// Set method, url, and target
		$form.hide().prop( 'method', 'post' ).prop( 'action', url );

		if( 0 < $form.find( '[name="print"]' ).length ) {
			$form.prop( 'target', '_blank' );
		}

		// Submit the form
		$form.submit();
	} else {

		viewDataContainer.find('.view-data-tools').hide(300);
		viewDataContainer.find('.reports-loader').show(1, function() {
			viewDataContainer.find('.load-report').fadeIn(300);
		});
		viewDataContainer.find('.generated-report').hide(1);

		// adding primary sort column name and sort order in POST data of form
		if( false == ReportsModule.boolReportSorting ) {
			if( 'descending' == $("input[name=primary_sort_order]:checked").val() ) {
				strSortOrder = 'DESC';
			} else {
				strSortOrder = 'ASC';
			}
			if( 'undefined' != typeof( $('#primary_sort').val() ) ) {
				ReportsModule.saveSortOptions( viewDataContainer.find( '.generate-report' ).data( 'module' ), $('#primary_sort').val(), strSortOrder );
			}
		}

		$.ajax({
			url: this[module].strViewReportUrl,
			method: 'post',
			data: Array.prototype.join.call( jQuery( [ this[module].filterData, this[module].sortOptions, this[module].columnOptions, this[module].pageOptions ] ).filter(function( index, value ) { return value; } ), "&"),
			error: function( xhr, status, error ) {
				viewDataContainer.find( '.reports-loader' ).fadeOut( 100 );
				viewDataContainer.find( '.view-data-filters' ).show( 300 );
				switch( xhr.status ) {
					case 503:
					case 504:
						ReportsModule.addError( 'Your request has timed out. Please try your request again.' );
						break;

					default:
						var errorMsg = xhr.responseText.substring( 0, xhr.responseText.indexOf( '</pre>' ) + 6 );
						ReportsModule.addError( '<span class="margin5" title="' + errorMsg + '">' + __( 'An error occurred while generating the report.' ) + '</span>' );
						break;
				}
			},
			success: function( strResponse ) {

				if( '{' == strResponse[0] ) {
					// There were validation errors
					viewDataContainer.find( '.reports-loader' ).fadeOut( 100 );
					viewDataContainer.find( '.view-data-filters' ).show( 300 );
					var parsedJson = $.parseJSON( strResponse );
					if( null != parsedJson.error ) {
						for( i=0; i < parsedJson.error.length; i++ ) {
							var error = parsedJson.error[i];
							if( 'string' === typeof error ) {
								ReportsModule.addError( error );
							} else if( null !== error && 'object' === typeof error && error.hasOwnProperty( 'filter_key' ) && error.hasOwnProperty( 'message' ) ) {
								ReportsModule.addFilterError( error.filter_key + '_filter', error.message );
							}
						}
					}
				} else {
					// Success; strResponse is the report HTML
					viewDataContainer.find( '.reports-loader' ).fadeOut( 100 );

					var isMultipleDatasets = 0 < viewDataContainer.find( '.pagination' ).parents( '.table-controls' ).length;
					if( 'undefined' !== typeof pageNo && false == isMultipleDatasets ) {

						strResponse = $( "<div />" ).html( strResponse );
						var content = $('#property-' + pageNo, strResponse ).html();
						var page = $( '<tbody id="property-' + pageNo + '" style="display:none;"></tbody>' ).html(content);
						var graphs = strResponse.find( '.a-graph' );
						var inserted = false;
						viewDataContainer.find( '.generated-report tbody[id^="property-"]' ).each( function() {
							var id = parseInt( $(this).attr('id').replace('property-', '' ) );
							if( id > pageNo ) {
								$(this).before( page );
								inserted = true;
								return false;
							}
						});
						if( false == inserted ) {
							viewDataContainer.find( '.generated-report tbody[id^="property-"]:last' ).after( page );
						}
						viewDataContainer.find( '.a-graph' ).hide();
						viewDataContainer.find( '.graph-view' ).append( graphs );

						viewDataContainer.find( '#property-'+ pageNo +'' ).siblings( 'tbody[id^="property-"]' ).hide();
						viewDataContainer.find( '#property-'+ pageNo +'' ).fadeIn(500);

						viewDataContainer.find( '.generated-report').hide(1).delay(200).fadeIn(300, function() {

							// ReportsModule.bindCreateReportEssentials();

							psi.patterns.setEqualHeights({
								elementSelector: '.view-data-container .equal-heights'
							});
						});
					} else {
						viewDataContainer.find('.view-data-content').html( strResponse ).ready( function() {
							//Show the close button on filter box after first successfull generate click
							viewDataContainer.find('.view-data-filters').find('.view-data-close').show();
							viewDataContainer.find('.faux-header').fadeIn(300);
							viewDataContainer.find('.view-data-content .generated-report').hide(1).delay(200).fadeIn(300, function () {
								viewDataContainer.find('#view-data-filters-list').fadeIn(300);
								if( 0 == viewDataContainer.find('#property-finder option:selected').length ) {
									viewDataContainer.find('#property-finder').val('page-1').prop('selected', true);
								}
								var graphView = viewDataContainer.find('.graph-view');
								if( 0 < graphView.length ) {
									viewDataContainer.find('.graph').show();
								}
								viewDataContainer.find('.dark-graph').css('display', 'none');
								viewDataContainer.find('.dark-table').css('display', 'inline-block');

								$(this).find('tr.spacer').prev().children('td').css('border-bottom', 'none');

								// ReportsModule.bindCreateReportEssentials();

								ReportsModule.adjustDivHeights();
							});
						});
					}
				}
			}
		});
	}
};

ReportsModule.convertDateInYmdFormat = function( strDate, strLocale ) {
	const arrstrLocales = [ 'en_US', 'zh_CN', 'es_US', 'fr_CA', 'en_CA' ];
	if( arrstrLocales.includes( strLocale ) ) {
		return strDate;
	}

	let arrDate;
	let strConvertedDate;

	switch( strLocale ) {
		case 'hi_IN':
		case 'es_CL':
			// DateFormat = d-m-Y
			arrDate = strDate.split( '-' );
			strConvertedDate = arrDate[2] + '-' + arrDate[1] + '-' + arrDate[0];
			break;
		default:
			// DateFormat = d/m/Y
			arrDate = strDate.split( '/' );
			strConvertedDate = arrDate[2] + '-' + arrDate[1] + '-' + arrDate[0];
	}

	return strConvertedDate;
};

ReportsModule.isDateInYmdFormat = function( strDate ) {
	const regex = /^\d{4}-\d{2}-\d{2}$/;

	if( null === strDate.match( regex ) ) {
		return false;
	}

	const date = new Date( strDate );
	const timestamp = date.getTime();

	if( typeof timestamp !== 'number' || Number.isNaN( timestamp ) ) {
		return false;
	}

	return date.toISOString().startsWith( strDate );
};

ReportsModule.generateReportAsync = function( module, action, viewDataContainer, pageNo ) {
	$dataGroupMap = 'undefined' === typeof $dataGroupMap ? {} : $dataGroupMap;

	var isFile			= 'view_report' !== action && 'export_api' !== action ? true : false,
		isLargeReport	= false;

	if( 'export_api' === action ) {
		// Create a form we can use to trigger the download
		var url = this[module].strViewReportUrl.replace( /&?action=[^&]*/, '' ) + '&action=' + action,
			data = Array.prototype.join.call( jQuery( [ this[module].filterData, this[module].sortOptions, this[module].columnOptions, this[module].downloadOptions ] ).filter( function( index, value ) {
				return value;
			} ), "&" );
		$( '.view-data-filters' ).hide();

		if( $( '#filters_container' ).data('is-drilldown') ) {
			data = Array.prototype.join.call( jQuery( [ $.param( $( '.js-report-filter-json' ).data( 'filter_html' ) ),
				this[module].downloadOptions ] ).filter(function( index, value ) { return value; } ),
				"&" );

			// In case of dmY date format convert and pass in Ymd date format
			data.forEach( function( d, index ) {
				const strLocale = window.__LOCALE_DATA__.locale;
				const arrstrPeriodTypes = [
					'report_filter[period][date]',
					'report_filter[period][daterange-start]',
					'report_filter[period][daterange-end]',
					'report_filter[period][fyrtodate]',
					'report_filter[period][pmtodate]'
				];
				if( arrstrPeriodTypes.includes( d.name ) && d.value ) {
					this[index].value = ( ReportsModule.isDateInYmdFormat( d.value ) ) ? d.value : ReportsModule.convertDateInYmdFormat( d.value, strLocale );
				}
			}, data );
		}

		$.asyncRequest({
			url: url,
			data: data,
			method: 'post',
			isFile: isFile,
			update: function( strUrl, objResponse ) {
				ReportsModule.tokens[objResponse.token] = objResponse.token;
			},
			success: function( strUrl, strResponse ) {
				viewDataContainer.find('.view-data-content').html( strResponse );
				viewDataContainer.find('.view-data-filters').find('.view-data-close').show();
			}
		});
	} else if( 'view_report' !== action ) {
		// Perform download
		var strFilterIdParam = '';
		if( $.isNumeric( $('.saved-filter-list').val() ) ) {
			strFilterIdParam = '&report_filter_id=' + $('.saved-filter-list').val();
		}

		// adding primary sort column name and sort order in POST data of form
		if( false == ReportsModule.boolReportSorting ) {
			if( 'descending' === $("input[name=primary_sort_order]:checked").val() ) {
				strSortOrder = 'DESC';
			} else {
				strSortOrder = 'ASC';
			}
			if( 'undefined' !== typeof( viewDataContainer.find( 'select[name="primary_sort"]' ).val() ) ) {
				ReportsModule.saveSortOptions( viewDataContainer.find( '.generate-report' ).data( 'module' ), viewDataContainer.find( 'select[name="primary_sort"]' ).val(), strSortOrder );
			}
		}

		// Create a form we can use to trigger the download
		var url = this[module].strViewReportUrl.replace( /&?action=[^&]*/, '' ) + '&action=' + action + strFilterIdParam,
			data = Array.prototype.join.call( jQuery( [ this[module].filterData, this[module].sortOptions, this[module].columnOptions, this[module].downloadOptions ] ).filter(function( index, value ) { return value; } ), "&" ),
			print = ( -1 != data.indexOf( 'print=1' ) );

		if( $( '#filters_container' ).data('is-drilldown') ) {
			data = Array.prototype.join.call( jQuery( [ $.param( $( '.js-report-filter-json' ).data( 'filter_html' ) ),
				this[module].downloadOptions ] ).filter(function( index, value ) { return value; } ),
				"&" );
			url = 1 == print ? url + '&print=1' : url;
		}

		$.asyncRequest({
			url: url,
			data: data,
			method: 'post',
			isFile: isFile,
			update: function( strUrl, objResponse ) {
				ReportsModule.tokens[objResponse.token] = objResponse.token;
			},
			success: function( strUrl, strResponse ) {
				// Open the same url again in a new tab if this is a print view
				ReportsModule.showDownloadFileMessage( action, false );
				if( true == print ) {
					var data = JSON.parse( strResponse );
					$('<form target="_blank" method="post" action="' + data.url  + '" />').appendTo('body').hide().submit();
				}
			},
			error: function( strUrl, strResponse ) {
				try {
					ReportsModule.showDownloadFileMessage( action, false );
					var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );

					// There were validation errors
					viewDataContainer.find( '.reports-loader' ).fadeOut(100);
					viewDataContainer.find( '.view-data-filters' ).show(300);
					if( null != parsedJson.error ) {
						for( i=0; i < parsedJson.error.length; i++ ) {
							var error = parsedJson.error[i];
							if( 'string' === typeof error ) {
								ReportsModule.addError( 'There was an error running the report. <span onclick="$(this).parent().siblings(\'pre\').toggle()">Click here to see the error.</span><pre class="align-left" style="display: none; max-height:400px; overflow-y: scroll;">' + error + '</pre>' );
							} else if( null !== error && 'object' === typeof error && error.hasOwnProperty( 'filter_key' ) && error.hasOwnProperty( 'message' ) ) {
								ReportsModule.addFilterError( error.filter_key + '_filter', error.message );
							}
						}
					}
				} catch( e ) {
					// Something more serious happened
					viewDataContainer.find('.view-data-content').html( strResponse );
				}
			}
		});
	} else {

		viewDataContainer.find('.view-data-tools').hide(300);
		viewDataContainer.find('.reports-loader').show(1, function() {
			$(this).css('width', '90%');
			viewDataContainer.find('.load-report').fadeIn(300);
			$('#view-data-container').css('min-height', '600px');
		});
		viewDataContainer.find('.generated-report').hide(1);

		$( 'a.js-report-history-link' ).attr( 'href', '/?module=report_queuexxx' );

		// adding primary sort column name and sort order in POST data of form
		if( false == ReportsModule.boolReportSorting ) {
			if( 'descending' === $("input[name=primary_sort_order]:checked").val() ) {
				strSortOrder = 'DESC';
			} else {
				strSortOrder = 'ASC';
			}
			if( 'undefined' !== typeof( viewDataContainer.find( 'select[name="primary_sort"]' ).val() ) ) {
				ReportsModule.saveSortOptions( viewDataContainer.find( '.generate-report' ).data( 'module' ), viewDataContainer.find( 'select[name="primary_sort"]' ).val(), strSortOrder );
			}
		}

		var successFn = ReportsModule.getHtmlResponseHandler( viewDataContainer, pageNo ),
			strQueryParams = '';
		if( !$( '#filters_container' ).data('is-drilldown') ) {
			var data = Array.prototype.join.call(
				jQuery( [ this[module].filterData, this[module].sortOptions, this[module].columnOptions, this[module].pageOptions ] )
					.filter(function( index, value ) { return value; } ), "&"
			);
		} else {
			var data = $( '.js-report-filter-json' ).data( 'filter_html' ),
			strSortOptions = this[module].sortOptions;
			if( strSortOptions ) {
				var sortOptions = JSON.parse( '{"' + strSortOptions.replace(/&/g, '","').replace(/=/g,'":"') + '"}', function(key, value) {
					return key === "" ? value : decodeURIComponent(value);
				});
				Object.assign( data, sortOptions );
			}
		}
		if( $.isNumeric( $('.saved-filter-list').val() ) ) {
			strQueryParams = '&report_filter_id=' + $('.saved-filter-list').val();
		}
		$.asyncRequest({
			url: this[module].strViewReportUrl + strQueryParams,
			method: 'post',
			isFile: isFile,
			data: data,
			update: function( strUrl, objResponse ) {
				try {
					var parsedJson = $.isPlainObject( objResponse ) ? objResponse : $.parseJSON( objResponse );
					if( parsedJson.isLargeReport ) {
						// this will identify the large reports to further automatically download in excel format
						// instead of rendering HTML content on UI.
						isFile = true;
						isLargeReport = true;
						if( 0 == $('#js-large-report-message').length ) {
							$( "<p id='js-large-report-message' class='alert info slim'>" + __( 'Your report is too large to show on screen, so an XLS version of the report will automatically be downloaded to your computer when completed.' ) + "</p>" ).insertAfter( '.table-header .js-download-file-message' );
						}
						$( '#js-large-report-message' ).fadeIn( 100 );
						viewDataContainer.find( '.reports-loader' ).fadeOut( 100 );
					}
				} catch( e ) {
					// do nothing continue execution
				}
			},
			success: function( strUrl, strResponse ) {
				if( isLargeReport ) {
					$( '#js-large-report-message' ).fadeOut( 100 );
				} else {
					successFn( strUrl, strResponse );
				}
			},
			error: function( strUrl, strResponse ) {
				try {
					// Handling large drill-downs
					var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );
					if( parsedJson.isLargeReport && parsedJson.url ) {
						if( 0 == $('#js-large-report-message').length ) {
							viewDataContainer.find( '.view-data-content' ).find('.view-data-table-header').find('.table-header').prepend( "<p id='js-large-report-message' class='alert info slim'>" + __( 'Your report is too large to show on screen, so an XLS version of the report will automatically be downloaded to your computer when completed.' ) + "</p>" ).find( '.generated-report' ).fadeIn( 100 );
						}
						$( '#js-large-report-message' ).fadeIn( 100 );
						viewDataContainer.find( '.reports-loader' ).fadeOut( 100 );
						window.location = parsedJson.url;
					} else {
						ReportsModule.getErrorResponseHandler( viewDataContainer )( parsedJson );
					}
				} catch( e ) {
					// We may have processed the async request synchronously, so call the success function
					successFn( strUrl, strResponse );
				}
			}
		});
	}
};

ReportsModule.handleDownload = function( element ) {
	var module = $(element).data( 'module' ),
		action = $(element).data( 'action' ),
		downloadOptionsContainer = $(element).parents( 'form' ),
		uniqueId = module.match(/\d+/g),
		filterContainer = $( '#view-data-filters'+uniqueId.pop() ),
		viewDataContainer = filterContainer.parents( '.view-data-container' ),
		saveFilters = ReportsModule[module].saveFilters || "true" == $(element).data('save-filters');

	if( true == psi.reportDisplayOptions.validateDisplayOptions() ) {
		$( element ).parents( '.ui-dialog-content' ).dialog( 'close' );

		if( true == saveFilters ) {
			ReportsModule.clearAllErrors();
			if( true == ReportsModule.validateReportFilter() ) {
				ReportsModule.saveReportFilter( module, filterContainer );
			} else {
				return;
			}
		}
		ReportsModule.showDownloadFileMessage( action, true );
		ReportsModule.saveDownloadOptions( module, downloadOptionsContainer );
		ReportsModule.generateReportAsync( module, action, viewDataContainer );
	}
};

ReportsModule.showDownloadFileMessage = function( action, show ) {
	var generatedReportDiv = $( '.generated-report' ),
		downloadFileMessageDiv = $( '.table-header' ).find( '.js-download-file-message' );
	if( 'export_pdf' === action || 'export_spreadsheet' === action || 'export_csv' === action ) {
		if(  show  ) {
			downloadFileMessageDiv.removeClass( 'hide' );
			generatedReportDiv.css( { 'margin-top': '80px' } );
			downloadFileMessageDiv.addClass( 'show' );
		} else {
			downloadFileMessageDiv.fadeOut( "slow", function() {
				generatedReportDiv.css( { 'margin-top': '45px' } );
				downloadFileMessageDiv.removeClass( 'show' );
				downloadFileMessageDiv.addClass( 'hide' ).removeAttr( "style" );
			});
		}
	}
}

ReportsModule.loadReportAction = function( actionName, divId, title, width, height ) {
	divId = divId || 'small_modal';
	title = title || __( 'Report Details' );
	width = width || '600';
	height = height || '400';

	var actionUrl = ReportsModule.strViewReportUrl.replace('&action=view_report', '&action=' + actionName );
	psi.patterns.loadDialog( { width: width, height: height, strUrl: actionUrl, strContentId: divId, title: title } );
	return;
};

ReportsModule.loadChargeDetails = function( ar_transaction_id, lease_id, customer_id ) {
	dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=charge_ar_transactionxxx&action=view_charge_ar_transaction&ar_transaction[id]='+ar_transaction_id+'&lease[id]='+lease_id+'&customer[id]='+customer_id+'&from_screen=ledger', strContentId: 'ar_transaction', title: __( 'Charge Details' ) } );
	return;
};

ReportsModule.loadInvoiceDetails = function( ap_header_id, lease_id ) {
	dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=invoicexxx&action=view_invoice&ap_header[id]='+ap_header_id+'&lease[id]='+lease_id, strContentId: 'Invoice', title: __( 'Invoice Details' ) } );
	return;
};

ReportsModule.loadResidents = function( lease_id, customer_id, resident_name, load_full_ledger_tab ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&load_financial_system=1&is_report_drilldown=1&view_full_ledger=' + load_full_ledger_tab, title: __( 'Resident: {%s,0}', [ resident_name ] ) } );
	var funcToCall = 'changeTab';
	var funcArgs = new Array( 'view_ar_transactions', '?module=ledgerxxx&action=view_full_ledger&ledger_filter[show_reversals]=true&sort_by=post_month&sort_dir=DESC' );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadCorporateCustomerOpenItems = function( lease_id, customer_id, occupancy_type_id, customer_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&is_report_drilldown=1&is_corporate_tab=1&occupancy_type_id=' + occupancy_type_id, title: __( 'Customer: {%s, 0}', [customer_name] ) } );
	var funcToCall = 'changeTab';
	var funcArgs = new Array(
		'view_open_ar_transactions',
		'?module=ledgerxxx&action=view_ledger_container&lease[id]=' + lease_id + '#&customer[id]=' + customer_id + '#&event_id=&is_corporate_tab=1&occupancy_type_id=' + occupancy_type_id
	);
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadCustomerPets = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTabSubMenuItem';
	var funcArgs = new Array(
		'customer_lease_tab',
		'?module=customer_petsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=',
		'customer_lease_pets' );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadSpecials = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTabSubMenuItem';
	var funcArgs = new Array(
		'customer_lease_tab',
		'?module=lease_specialsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=',
		'customer_lease_specials'
	);
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadRentableItemsTab = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTabSubMenuItem';
	var funcArgs = new Array(
		'customer_lease_tab',
		'?module=lease_add_on_lease_associationsxxx&add_on_type[id]=2&lease[id]=' + lease_id + '&customer[id]=' + customer_id,
		'customer_lease_rentable_options'
	);
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadInsuranceTab = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTabSubMenuItem';
	var funcArgs = new Array(
		'customer_lease_tab',
		'?module=tenant_lease_term_insurancexxx&lease[id]=' + lease_id + '&customer[id]=' + customer_id,
		'customer_lease_rentable_options'
	);
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadLeaseTermReimbursableTab = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTabSubMenuItem';
	var funcArgs = new Array(
		'customer_lease_tab',
		'?module=tenant_lease_term_reimbursable_expensesxxx&lease[id]=' + lease_id + '&customer[id]=' + customer_id,
		''
	);
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadLeaseTermPercentRentTab = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Tenant: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTabSubMenuItem';
	var funcArgs = new Array(
		'customer_lease_tab',
		'?module=tenant_lease_term_percent_rentxxx&lease[id]=' + lease_id + '&customer[id]=' + customer_id,
		'add_edit_percent_rent'
	);
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadCustomerHousehold = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTab';
	var funcArgs = new Array( 'customer_household_tab', '/?module=household_peoplexxx&action=view_people&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=' );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadPeopleDetails = function( lease_id, customer_id, selected_customer_id ) {
	psi.patterns.loadDialog({ strUrl: '/?module=household_peoplexxx&action=view_profile&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=&sub_tab=&selected_customer[id]='+selected_customer_id, strContentId: 'profile_dialog', title: 'Profile' });
	return;
};

ReportsModule.loadLeaseSummary = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id, title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTab';
	var funcArgs = new Array( 'customer_lease_tab', '/?module=customer_leasexxx&lease[id]='+lease_id+'&customer[id]='+customer_id );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadLeaseViolations = function( lease_id, customer_id, resident_name ) {

	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTabSubMenuItem';
	var funcArgs = new Array(
		'customer_lease_tab',
		'?module=customer_violationsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=',
		'customer_lease_violations' );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadCustomerHouseholdCertifications = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTabSubMenuItem';
	var funcArgs = new Array( 'customer_household_tab', '/?module=household_certificationsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=view_certifications' );
	setTimeout( function(){
		ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
	}, 10 );
};

ReportsModule.loadPaymentDetails = function( paymentId ) {
	dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=update_ar_paymentxxx&action=view_ar_payment&source=resident_receipt_report&ar_payment[id]='+paymentId, strContentId: 'ar_transaction', title: __( 'Payment' ) } );
	return;
};

ReportsModule.loadResidentDeposits = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&load_financial_system=1', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'changeTab';
	var funcArgs = new Array( 'view_deposit_ar_transactions', '?module=ar_transactionsxxx&action=view_deposit_ar_transactions' );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadResidentRepayments = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&load_financial_system=1', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'changeTab';
	var funcArgs = new Array( 'view_repayment_agreements', '?module=repayment_agreementsxxx&action=view_repayment_agreements' );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadLeaseGuestManager = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTab';
	var funcArgs = new Array( 'customer_lease_tab', '/?module=guest_managementsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=' );

	setTimeout( function(){
		ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
	}, 10000 );
};


ReportsModule.loadCustomerGuestManager = function( guest_id, property_id, guest_activity_log_id, check_in_status, guest_name ) {

	if( 0 == check_in_status ) {
		check_in_status = '';
	}

	dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=customer_guestsxxx&action=view_customer_guest_profile&guest[id]='+guest_id+'&property_id='+property_id+'&guest_activity_log_id='+guest_activity_log_id+'&check_in_status='+check_in_status, title: __( '' + guest_name + ' Guest Profile' ) } );
	return;
};


ReportsModule.loadLeaseActivityLog = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTab';
	var funcArgs = new Array( 'customer_activity_tab', '/?module=customer_activityxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=' );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadApplicationLogs = function( application_id, application_name, lease_id, customer_id, lease_interval_id ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=application_systemxxx&application[id]='+application_id, title: __( 'Lead: {%s, 0}', [application_name] ) } );
	var funcToCall = 'loadApplicationTab';
	var funcArgs = new Array( 'application_history_tab', '/?module=application_historyxxx&action=view_application_history&&application[id]='+application_id+'&lease_interval[id]='+lease_interval_id+'&lease[id]='+lease_id+'&customer[id]='+customer_id );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadCustomerLeaseInsurance = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&load_financial_system=1', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTab';
	var funcArgs = new Array( 'customer_lease_tab', '?module=lease_insurancexxx&action=view_insurance_policies' );
	ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
};

ReportsModule.loadCustomerMaintenance = function( lease_id, customer_id, resident_name ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
	var funcToCall = 'loadCustomerTab';
	var funcArgs = new Array( 'customer_maintenance_tab', '/?module=customer_maintenancexxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&is_from_resident_view=1' );

	setTimeout( function(){
		ReportsModule.callFunctionsOnModalWindow( funcToCall, funcArgs );
	}, 500 );
};

ReportsModule.loadDepositDetails = function( depositId ) {
	dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=ar_depositsxxx&action=view_ar_deposit&ar_deposit[id]='+depositId, strContentId: 'view_ar_deposit', title: __( 'Deposits' ) } );
	return;
};

ReportsModule.loadcheckDetails = function( paymentId ) {
	dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=check_registerxxx&action=view_check&payment[id]='+paymentId, strContentId: 'view_check', title: __( 'Check' ) } );
	return;
};

ReportsModule.loadJournalDetails = function( headerNumber ) {
	dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=general_journalxxx&action=view_gl_entry&gl_header[id]='+headerNumber, strContentId: 'view_gl_entry', title: __( 'Journal Entry' ) } );
	return;
};

ReportsModule.loadJobDetails = function( poOrderId, jobId ) {

	if( 'undefined' == typeof( psi.objViewPurchaseOrders ) ) {
		$( document.head ).append( '<script src="Entrata/js/module/purchase_order/purchase_order.js" type="text/javascript"><\/script>' );
	}
	psi.patterns.addDialogContent( { strUrl: '/?module=purchase_orderxxx&action=view_purchase_order&is_po_request_from_job=1&ap_header[id]='+poOrderId+'&job[id]='+jobId, title: __( 'Job Details' ) } );
};

ReportsModule.loadApPayeeDetails = function( apPayeeId ) {
	dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=ap_payee_systemxxx&ap_payee[id]=' +apPayeeId, strContentId: 'Vendor', title: __( 'Vendor Details' ) } );
	return;
};

ReportsModule.loadApPayeeInsuranceDetails = function( apPayeeId ) {

	dialog = psi.patterns.addDialogContent( { strUrl: '/?module=ap_payee_systemxxx&ap_payee[id]=' +apPayeeId, title: __( 'Vendor Details' ) } );
	setTimeout( function() {
		loadApPayeeTab('ap_payee_insurance_tab','/?module=ap_payee_insurancexxx&action=view_ap_payee_policies&ap_payee[id]=' + apPayeeId);
	}, 1000 );
};

ReportsModule.loadApPayeeRecurringTransactionsDetails = function( apPayeeId ) {

	dialog = psi.patterns.addDialogContent( { strUrl: '/?module=ap_payee_systemxxx&ap_payee[id]=' +apPayeeId, title: __( 'Recurring Transaction Details' ) } );
	setTimeout( function() {
		loadApPayeeTab('ap_payee_financial_tab','/?module=scheduled_ap_transactionsxxx&action=view_scheduled_ap_transactions&ap_payee[id]=' + apPayeeId);

		$( '#view_scheduled_ap_transactions' ).addClass( 'selected' ).siblings().removeClass('selected');

	}, 1000 );
};

ReportsModule.viewScheduledApTransaction = function( intScheduledApTransactionHeaderId ) {
	psi.patterns.loadDialog( { strUrl: '?module=scheduled_ap_transactionsxxx&action=view_scheduled_ap_transaction&scheduled_ap_transaction_header[id]=' + intScheduledApTransactionHeaderId + '&is_po_request_from_vendor=1', strContentId: 'view_scheduled_ap_transaction', title: __( 'View Scheduled Transaction' ) } );
};

ReportsModule.loadGLReport = function( url, transaction_basis, gl_account_id, property_id, dateSpan, start_date, end_date, include_zero_balance, exclude_forward_balance, arrstrDates ) {

	if( -1 != url.indexOf("&report_filter[consolidate_properties]=true") ) {
		var property_ids  = property_id.split(',');
		url += '&report_filter[property_ids][]='+ property_ids;

	} else {
		url += '&report_filter[property_ids][]='+ property_id;
	}

	arrstrDates = arrstrDates.split(',');

	if( -1 != $.inArray( dateSpan, arrstrDates ) ) {
		date_span_start = 'start_post_month';
		date_span_end	= 'end_post_month';
	} else {
		date_span_start = 'start_date';
		date_span_end	= 'end_date';
	}

	url += '&report_filter[accounting_method]='+transaction_basis+'&report_filter[period][period_type]='+dateSpan+'&report_filter['+date_span_start+']='+start_date+'&report_filter['+date_span_end+']='+end_date+'&report_filter[gl_account_ids][]='+gl_account_id;
	url += '&report_filter[zero_balances] ='+include_zero_balance;
	url += '&report_filter[exclude_opening_balances] ='+exclude_forward_balance+'&drilldown=1&report_filter[summarize_transaction_types]=none';

	psi.patterns.addDialogContent( { strUrl: url, title: __( 'GL Details' ) } );
};

ReportsModule.loadGLReportPeriodFilter = function( url, transaction_basis, gl_account_id, property_id, dateSpan, start_date, end_date, include_zero_balance, exclude_forward_balance, arrstrDates ) {

	if( -1 != url.indexOf("&report_filter[consolidate_properties]=true") ) {
		var property_ids  = property_id.split(',');
		url += '&report_filter[property_ids][]='+ property_ids;

	} else {
		url += '&report_filter[property_ids][]='+ property_id;
	}

	arrstrDates = arrstrDates.split(',');

	if( -1 != $.inArray( dateSpan, arrstrDates ) ) {
		date_span_start = 'start_post_month';
		date_span_end	= 'end_post_month';
	} else {
		date_span_start = 'start_date';
		date_span_end	= 'end_date';
	}

	url += '&report_filter[accounting_method]='+transaction_basis+'&report_filter[period][period_type]='+dateSpan+'&report_filter['+date_span_start+']='+start_date+'&report_filter['+date_span_end+']='+end_date+'&report_filter[gl_account_ids][]='+gl_account_id;
	url += '&report_filter[zero_balances] ='+include_zero_balance;
	url += '&report_filter[no_activity]=1';
	url += '&report_filter[exclude_opening_balances] ='+exclude_forward_balance+'&drilldown=1';

	psi.patterns.addDialogContent( { strUrl: url, title: __( 'GL Details' ) } );
};

ReportsModule.loadApplication = function( applicationId, applicationName ) {
	dialog = psi.patterns.addDialogContent( { strUrl: '/?module=application_systemxxx&application[id]='+applicationId, title: __( 'Lead: {%s, 0}', [applicationName] ) } );
	return;
};

// This function is still in development and will replace above tow functions
ReportsModule.loadTransactionDetails = function( transactionType, referenceIds ) {
	var url = '';
	var width = 980;
	var height = 600;
	var divId = '';
	var title = '';

	switch( transactionType ) {
		case 'AR Deposit':
			url = '/?module=ar_depositsxxx&action=view_ar_deposit&ar_deposit[id]=' + referenceIds['ar_deposit_id'];
			divId = 'view_ar_deposit';
			title = __( 'Deposits' );
			break;
		case 'AR Payment':
			url = '/?module=charge_ar_transactionxxx&action=view_charge_ar_transaction&ar_transaction[id]=' + referenceIds['ar_payment_id'];
			divId = 'ar_transaction';
			title = __( 'Payment' );
			break;

	}

	dialog = psi.patterns.loadDialog( { width: width, height: height, strUrl: url, strContentId: divId, title: title } );
};

ReportsModule.callFunctionsOnModalWindow = function( strFunction, arrArgs ) {
	var tryCount = 0;
	var timerId = setInterval( function() {
		try {
			strFunction1 = window[strFunction];
			eval( strFunction1( arrArgs[0], arrArgs[1], arrArgs[2] ) );
			clearInterval( timerId );
		} catch( err ) {
			//try for 5 times. Else exit.
			if(tryCount >= 10 ) {
				clearInterval( timerId );
			}
			tryCount = tryCount + 1;
		}
	}, 3500 );
};

ReportsModule.bindEssentials = function() {
	psi.patterns.bindEssentials();
};

ReportsModule.bindCreateReportEssentials = function() {

	this.bindEssentials();
	$( '#report_form' ).submit( function() {
		debugger;
		if( true == ReportsModule.validateReportFilter() ) {
			/*if( 'export_spreadsheet' == ReportsModule.strOutputType ) {
			 $(this).attr( 'action', ReportsModule.strExportSpreadsheetReportUrl );
			 $(this).attr( 'target', '_blank' );
			 return true;
			 } else if( 'export_pdf' == ReportsModule.strOutputType ) {
			 $(this).attr( 'action', ReportsModule.strExportPdfReportUrl );
			 $(this).attr( 'target', '_blank' );
			 return true;
			 } else {*/
			ReportsModule.submitViewReport();
			//}
		}
		return false;
	});

	$("#report_form").each(function() {
		var $minHeight = 345;
		if( $(this).height() > $minHeight) {
			$(this).css({"overflow-y": "scroll","height": "345px"});
		}
	});

	$( '.update-filters' ).click( function() {
		$( '#cancel-filter' ).show( 'slow' );
		$(this).closest( '.filter-box-heading' ).next().slideDown( 500 );
		$(this).fadeOut( 500 );
	});

	$('.show_or_hide_filters').click( function() {
		$( '.update-filters' ).fadeIn( 500 );
		$( '.report-filters' ).slideUp( 500 );
	});

	$('.filters, .display').each(function() {
		var $minHeight = 345;
		if( $(this).height() > $minHeight) {
			$(this).css({'overflow-y': 'scroll','height': '345px'});
		}
	});

	$('.filters-tab').click(function() {
		$(this).addClass('selected').siblings().removeClass('selected');
		$(this).parent().next('div').children('.filters').fadeIn();
		$(this).parent().next('div').children('.display').hide();
	});

	$('.display-tab').click(function() {
		ReportsModule.boolReportSorting	= false;
		$(this).addClass('selected').siblings().removeClass('selected');
		$(this).parent().next('div').children('.display').fadeIn();
		$(this).parent().next('div').children('.filters').hide();
	});

	$("#tables").bind( 'change', function(){
		switch( $(this).val() ) {

			case 'property_preferences':
			case 'property_gl_settings':
			case 'property_late_fee_formulas':
			case 'properties':
			case 'property_merchant_accounts':
			case 'integration_databases':
			case 'integration_clients':
			case 'property_charge_settings':
				$("#website_name_filter").hide();

				if($('#website_name').attr('default_value') ) {
					default_value = $(this).attr('default_value');
				} else {
					default_value = '';
				}

				$('#website_name').val(default_value).change();
				$("#property_name_filter").show();
				break;
			case 'website_info':
			case 'website_template_slot':
			case 'website_preferences':
				$("#property_name_filter").hide();

				if($('#property_name').attr('default_value') ) {
					default_value = $(this).attr('default_value');
				} else {
					default_value = '';
				}

				$('#property_name').val(default_value).change();

				$("#website_name_filter").show();
				break;
			default:
				$("#property_name_filter").hide();
				$("#website_name_filter").hide();
		}
	}).change();

	$( '.reset-report' ).click( function() {
		var strReportName		= $( this ).data( 'report-name' ),
			strVersion			= '&version=' + $( this ).data( 'version' );
		psi.patterns.ajaxRequest({
			strElementSelector: 'div.load-filters',
			url: '/?module=report_filtersxxx&action=edit_report_filter&name=' + strReportName + strVersion + '&load_report=1&refresh_inner_content=1&reset_filter=true',
			complete: function() {
				if( 0 === $( '.saved-filter-list' ).length || 'saved_filters' === $( '.saved-filter-list' ).val() ) {
					//Hide generate button options on reset.
					$( '.save-schedule' ).html( __( 'Save Filter Set' ) );
					$( '.update-filter-set' ).addClass( 'hide' );
					$( '.view-edit-schedules' ).addClass( 'hide' );
					$('.update-filters').addClass('hide');
				}
				if( 0 < $( '.saved-filter-list' ).length && 'saved_filters' != $( '.saved-filter-list' ).val() && 0 < $('[dependent_filter_key]').length ) {
					$( '.saved-filter-list' ).css({
						'pointer-events' : 'none',
						'opacity' : '0.4'
					});
				}
				psi.reportDisplayOptions.setDisplayOptions({});
			}
		});
	});

	// Generate report handlers
	$(document).off( 'click', '.generate-report' );
	$(document).on( 'click', '.generate-report', function(e) {
		var module = $(this).data( 'module' ),
			action = $(this).data( 'action' ),
			viewDataContainer = $(this).parents( '.view-data-container' ),
			filterContainer = viewDataContainer.find( '.view-data-filters' );

		ReportsModule.clearAllErrors();
        	ReportsModule.unsetColumnSortOptions(module);

		if( true == ReportsModule.validateReportFilter() && true == psi.reportDisplayOptions.validateDisplayOptions() ) {
			// Clear pagination, to start at page 1
			ReportsModule.savePageOptions( module, null );
			// Save filters
			ReportsModule.saveReportFilter( module, filterContainer );

			// Show graph icon
			$( '.dark-graph' ).hide();
			$( '.dark-table' ).show();

			// Generate report
			callback = function() {
				if( 'function' !== typeof $.asyncRequest ) {
					setTimeout( callback, 300 );
				} else {
					ReportsModule.generateReportAsync( module, action, viewDataContainer );
				}
			}
			callback();
		} else {
			$( '#report_form' ).scrollTop(0);
		}
	});

	$(document).off( 'click', '.download-report' );
	$(document).on( 'click', '.download-report', function(e) {
		e.preventDefault();
		ReportsModule.handleDownload( this );
	});

	// Report Documentation handler
	$(document)
		.off( 'click', '.js-view-documentation' )
		.on( 'click', '.js-view-documentation', function(e) {
			e.preventDefault();

			var $instance		= $(this).closest('.js-report-instance'),
				reportName		= $instance.data('report-name'),
				reportType		= $instance.data('report-type'),
				reportVersion	= $instance.data('report-version');

			psi.patterns.loadDialog({
				width:			'auto',
				height:			'auto',
				strUrl:			'/?module=reportsxxx&name=' + reportName + '&version=' + reportVersion + '&type=' + reportType + 'is_library_report=1&action=report_details',
				strContentId:	'small_modal',
				title:			__( 'Report Details' )
			});
		});

	// Column sort handler
	$(document).off( 'click', 'thead .sortable' );
	$(document).on( 'click', 'thead .sortable', function(e) {
		e.preventDefault();

		ReportsModule.boolReportSorting	= true;

		var viewDataContainer = $(this).parents('.view-data-container'),
			sortBy = $(this).attr('data-sort'),
			sortOrderMarker = [];

		if( 'TH' == $(this).prop('tagName') ) {
			sortOrderMarker = $(this).find('i');
		} else if( 'SPAN' == $(this).prop('tagName') ) {
			sortOrderMarker = $(this).siblings('i');
		}

		var module = viewDataContainer.find( '.generate-report' ).data( 'module' );
		var sortOrder = sortOrderMarker.length == 0 || sortOrderMarker.hasClass('desc') || sortOrderMarker.hasClass('up-arrow') ? 'ASC' : 'DESC';

		viewDataContainer.find('.sortable').removeClass('selected');
		viewDataContainer.find('.sortable i').remove();
		viewDataContainer.find('.sortable').siblings('i').remove();
		$(this).addClass('selected');
		var isClickToSortColumn = 1;

		if( 'TH' == $(this).prop('tagName') ) {
			$(this).append( '<i class="' + sortOrder.toLowerCase() + '"></i>' );
		} else if( 'SPAN' == $(this).prop('tagName') ) {
			$(this).next().after( '<i class="' + ( sortOrder == 'ASC' ? 'down-arrow' : 'up-arrow' ) + '"></i>' );
		}

		ReportsModule.saveSortOptions( module, sortBy, sortOrder, isClickToSortColumn );
		ReportsModule.generateReportAsync( module, 'view_report', viewDataContainer );
	});

	// Jumplist change event handler
	$(document).off( 'change', '.property-finder' );
	$(document).on( 'change', '.property-finder', function(e) {
		var propClass = $(this).val(),
			parent = $(this).parents('.view-data-container'),
			module = parent.find( '.generate-report' ).data( 'module' ),
			report_unique_id = parent.find( '.generated-report' ).data( 'report-unique-id' ),
			$modalHold = parent.parents('.modal-body-container'),
			$dataTables = parent.find( '.dataset table' ),
			$scrollTarget = parent.find( '.' + propClass ),
			$header = parent.find( '.table-header' );

		let $currentReportDataGroupMap = 'undefined' !== typeof $dataGroupMap && 'undefined' !== typeof $dataGroupMap[report_unique_id] ? $dataGroupMap[report_unique_id] : new Map();
		if( 0 < $currentReportDataGroupMap.size ) {
			$scrollTarget = $currentReportDataGroupMap.get( propClass );
		}

		if( $(this).hasClass( 'static-data' ) ) {
			// All sections are displayed at once; scroll to the selected one
			var headerBottom = $header.position().top + $header.outerHeight( true ) - $scrollTarget.children().first().outerHeight() - 1;
			var scrollCorrect = parent.find( '.' + propClass ).offset().top + $modalHold.scrollTop() - headerBottom;
			$modalHold.animate( {scrollTop: scrollCorrect}, 500 );
		} else {
			if( $(this).hasClass( 'pagination' ) ) {
				var pageUrl = $(this).find( "[value='" + propClass + "']" ).data( 'href' ),
					pageNo = pageUrl.match(/&page_no=(\d+)/)[1];

				ReportsModule.savePageOptions( module, pageNo );
			}

			if( 0 == $scrollTarget.length ) {
				// Selected page has not previously been loaded, so load it
				ReportsModule.generateReportAsync( module, 'view_report', parent, pageNo );
			} else {
				const selectedPageDetails = $currentReportDataGroupMap.get( propClass );
				if( 'undefined' !== typeof selectedPageDetails && 0 < selectedPageDetails.length ) {
					$dataTables.find( "tbody[data-section]" ).each( function( index, ele ) {
						ele.replaceWith( selectedPageDetails[index] );
					} );
				}
				if( $(this).hasClass( 'js-paginate-by-dataset' ) ) {
					$( '.view-data-table-header' ).find( ".generic-reports-slant:not(.dataset)[data-dataset-id!='" + propClass + "']" ).hide();
					$( '#generated-report' ).find( ".dataset-sizer[data-dataset-id!='" + propClass + "']" ).hide();
					$( '.view-data-table-header' ).find( ".generic-reports-slant:not(.dataset)[data-dataset-id='" + propClass + "']" ).show();
					$( '#generated-report' ).find( ".dataset-sizer[data-dataset-id='" + propClass + "']" ).show();
				}
				parent.find( '.a-graph' ).css( 'display', 'none' );

				// This is to add multiple literal graphs instead of just one, adding the correct data and split value for each graph.
				// These graphs would then appear with the appropriate data page.
				var selectedPageValue = $( 'option:selected', this ).text();
				if( selectedPageValue ) {
					parent.find( '.a-graph[data-split-value="' + selectedPageValue + '"]' ).css( 'display', 'inline-block' );
					parent.find( '.a-graph[data-page="' + propClass + '"]' ).css( 'display', 'inline-block' );
				} else {
					parent.find( '.a-graph[data-page="' + propClass + '"], .a-graph:not([data-page])' ).css( 'display', 'inline-block' );
				}

				$scrollTarget.fadeIn( 500, function() {
					// to reset the horizontal scroll bar position
					psi.patterns.bindEssentials();
				}).delay( 501 ).queue( function() {
					ReportsModule.adjustDivHeights();
					$(this).dequeue();
				});
				$modalHold.animate( { scrollTop: 0 }, 500 );

				// To render Sparkline format for updated jumplist value
				FusionCharts.ready( function() {

					const sparklineHTMLCollection = document.getElementsByClassName( 'sparkline' ) || []
					for( let element of sparklineHTMLCollection ) {
						if( document.getElementById( element.id ) ) {
							let sparklineConfig = element.getAttribute( 'data-sparkline-config' );
							let fusioncharts = new FusionCharts( JSON.parse( sparklineConfig ) );
							fusioncharts.render();
						}
					}
				} );
			}
		}
	});

	// Graph toggle handler
	$(document).off( 'click', '.graph' );
	$(document).on( 'click', '.graph', function() {
		var parent = $(this).parents('.view-data-container');
		parent.find('.dark-graph').toggle();
		parent.find('.dark-table').toggle();
		parent.find('.graph-view').toggle();
		parent.find('.view-data-table-header table').toggle();
		ReportsModule.adjustDivHeights();
		if( $(".view-data-container").height() > ( $( window ).height() - 50 ) ) {
			$(".view-data-container").scroll();
		}
		setTimeout( function() {
			$( ".js-maintain-scrollbar-wrapper" ).css( { top: ( $( ".timestamp" ).position().top + 40 ) + 'px' } );
		}, 500 );

	});

	$(document).on('click', '.close-button.close,.title', function(){
		setTimeout(function(){
			if( $(".timestamp").length ) {
				$(".js-maintain-scrollbar-wrapper").css({ top: ( $(".timestamp").position().top )+ 'px' });
			}
		}, 500)
	});

	$(".update-filter-set").off('click').on( 'click', function(e) {
		var intReportFilterId 	= $('.saved-filter-list').val(),
			intReportId 		= $('.saved-filter-list').attr("data-report-id"),
			$filterContainer	= $(this).parents('.view-data-filters'),
			module				= $filterContainer.data('module');

		ReportsModule.clearAllErrors();

		if( true == psi.reportDisplayOptions.validateDisplayOptions() ) {
			setTimeout( function() {
				if( true == ReportsModule.validateReportFilter( true ) ) {
					ReportsModule.saveReportFilter(module, $filterContainer);
					psi.patterns.ajaxRequest( {
						url: '/?module=report_filtersxxx&action=update_report_filter&report_filter_id=' + intReportFilterId + '&report_id=' + intReportId + '&refresh_inner_content=1',
						strElementSelector: 'div.load-filters',
						data: ReportsModule.getRequestData(module),
						success: function( response ) {
							psi.patterns.removeLoadingImage( {
								strElementSelector: 'div.load-filters'
							} );
							try {
								var objResponse = $.parseJSON( response );
								if( true == objResponse['error'] ) {
									$( '.global-error' ).html( '<p class="alert error slim"><i>! </i>' + objResponse.message + '</p>' );
									$( '.global-error' ).css( 'display', 'block' );
								} else {
									$( '.saved-filter-list' ).trigger( 'change' );
								}
							} catch( e ) {
								$( 'div.load-filters' ).html( response );
							}
						}
					} );
				}
			}, 100 );
		}
	});

	$(".view-edit-schedules").off('click').on( 'click', function() {
		var intReportFilterId	= $('.saved-filter-list').val(),
			strReportName		= $( '#report_name' ).val(),
			strReportVersion	= $( '#report_version' ).val();

		psi.patterns.loadDialog( {
			width: 990,
			height: 600,
			strUrl: '/?module=scheduled_reportsxxx&action=view_scheduled_reports&report_filter_id=' + intReportFilterId + '&name=' + strReportName + '&version=' + strReportVersion,
			strContentId: '',
			title: __( 'Schedule for:' ) + ' ' + $('.table-controls').find('.inlineblock').html()
		} );
	});

};

ReportsModule.clearErrors = function() {
	$('.global-error').fadeOut(100).html('');
};

ReportsModule.addError = function( message ) {
	var tag = 'p';
	if( message.substr( 0, 5 ) === '<pre>' ) {
		tag = 'pre';
		message = message.replace( /<\/?pre>/ig, '')
	}

	$('.global-error').append( '<' + tag + ' class="alert slim error align-left margin0-bottom">' + message + '</' + tag + '>' ).fadeIn(100);
};

ReportsModule.clearFilterErrors = function( filterId ) {
	var errorParent = $( '#' + filterId + ' > label' );
	var error = errorParent.children('p');
	if( 0 != error.length ) {
		var labelText = errorParent.find('b').html();
		errorParent.html( labelText );
	}
};

ReportsModule.addFilterError = function( filterId, message ) {
	var errorParent = $( '#' + filterId + ' > label' );
	var error = errorParent.children('p');
	if( 0 == error.length ) {
		var labelText = errorParent.html();
		errorParent.html(
			'<p class="alert slim error inline-alert" style="display:none;">' +
			'	<b class="bold">' + labelText + '</b>' +
			'</p>' );
		error = errorParent.children('p');
		error.fadeIn(100);
	}

	error.append( '<br /><em class="margin5-top font11 block">' + message + '</em>' );
};

ReportsModule.clearAllErrors = function() {
	ReportsModule.clearErrors();
	$('div[id$="_filter"]').each( function() {
		ReportsModule.clearFilterErrors( $(this).attr('id') );
	});
};

ReportsModule.unsetColumnSortOptions = function( module ) {
    this[module].sortOptions = '';
};

/* Changes the visiblity of dependent elements
 *
 * Paramenter - 2 Parameters
 * @params strCallerFilterId - The id of the caller element (Mandatory)
 * @params  strToggleFilterId - The id of the dependent element to set visiblity(Optional)
 * @return - NULL
 *
 * (Note :- If caller element is radio button then toggles the element based on 2nd parameter
 * 			whereas with the SELECT's callerId is the only parameter)
 * */
ReportsModule.toggleDependentElements = function( strCallerFilterId, strToggleFilterId, boolRunByValue ) {

	if( typeof boolRunByValue === 'undefined' ) {
		boolRunByValue = false;
	}

	var arrStrhtmlElements 	= [];
	var arrStrhtmlElements 	= ["SELECT"];  //You can add more elements as per requirement
	var strFilterString		='_filter';
	var boolInputValue = $('#'+strCallerFilterId+'_filter input').val();

	//Radio button
	if( $( '#'+strCallerFilterId ).hasClass( "onoff" )) {
		if( true == boolRunByValue && 1 == boolInputValue ) {
			$( '#' +strToggleFilterId + strFilterString ).hide();
			$( '#' +strToggleFilterId + strFilterString ).find( 'input, textarea, button, select').attr( 'disabled','disabled' );
		} else if( $( '#' +strToggleFilterId + strFilterString ).is( ':visible' ) ) {
			$( '#' +strToggleFilterId + strFilterString ).hide();
			$( '#' +strToggleFilterId + strFilterString ).find( 'input, textarea, button, select').attr( 'disabled','disabled' );
		} else {
			$( '#' +strToggleFilterId + strFilterString ).show();
			$( '#' +strToggleFilterId + strFilterString).find( 'input, textarea, button, select' ).removeAttr( 'disabled' );
		}
		//If toggleElement is exits
		if( $( '#' +strToggleFilterId ).length > 0 ) {
			ReportsModule.toggleDependentElements( strToggleFilterId );
		}
	} else {
		//All html Tag except Radio
		var callerFilterDivId = strCallerFilterId + strFilterString;
		var htmlTag = ( $( '[id='+strCallerFilterId+']' ).get(0).tagName );

		if( $.inArray( htmlTag, arrStrhtmlElements ) == 0 ) {
			switch(htmlTag) {
				case 'SELECT':
					var hideElement = ( $('[id='+ strCallerFilterId +']').val() );
					setTimeout( function() {
						$( '#'+strCallerFilterId+' option' ).each( function(e) {
							var optionValue = $(this).val();
							//IF select is visble then show dependent elemnts else hide all dependenet element
							if( $('#'+callerFilterDivId).is(':visible') ) {
								if( hideElement == optionValue ) {
									$( '#'+ optionValue + strFilterString ).show();
									$( '#'+ optionValue + strFilterString).find( 'input, textarea, button, select' ).removeAttr( 'disabled' );
								} else {
									$( '#'+ optionValue + strFilterString ).hide();
									// Restrict to submit disabled elememts
									$( '#'+ optionValue + strFilterString ).find( 'input, textarea, button, select' ).attr( 'disabled', 'disabled' );
								}
							} else {
								$( '#'+ optionValue + strFilterString).hide();
								$( '#'+ optionValue + strFilterString).find( 'input, textarea, button, select' ).attr( 'disabled', 'disabled' );
							}
						});
					}, 300 );
					break;
				default:
					break;
			}
		}
	}
};

ReportsModule.toggleReportFilters = function( strParentField, boolInverted ) {

	if( typeof boolInverted === 'undefined' || null == boolInverted ) {
		boolInverted = false;
	}

	var boolInputValue = $('#'+strParentField+'_filter input').val();
	var arrstrChildElementNames = $('#'+strParentField).attr('child_filters').split('|');
	$.each( arrstrChildElementNames, function( index, value ){

		var element = value + '_filter';
		if( boolInverted == boolInputValue ) {
			$('#' + element).hide();
			$( '#' + element ).find( 'input, textarea, button, select').attr( 'disabled','disabled' );
		} else {
			$('#' + element).show();
			$( '#' + element).find( 'input, textarea, button, select' ).removeAttr( 'disabled' );
		}
	} );
};

ReportsModule.toggleDependentElementsInPreLease = function( strTriggerElementId ) {
	if( 'summarize_by_property' == strTriggerElementId ) {
		$('#group_by_filter').toggleClass('hide');
		$('#space_options_filter').toggleClass('hide');
		$('#consolidate_properties_filter').toggleClass('hide');
		$('#combine_unit_spaces_with_same_lease_filter' ).toggleClass('hide');
		$('#actual_space_options_summary_filter' ).toggleClass('hide');
		$('#actual_space_options_summary_filter' ).removeAttr('style');
	} else {
		$('#space_options_filter').toggleClass('hide');
		$('#actual_space_options_summary_filter' ).toggleClass('hide');
	}
}

ReportsModule.showDeleteConfirmBox = function( url, currElement ) {
	var response = confirm("Are you sure you want to delete this recurring payment?");

	if( response == true ) {
		jQuery.ajax({
			type: "GET",
			url: url,
			data: '',
			cache: false
		}).done(function ( data ) {
			if( data == 'false' ) {
				jQuery('.table-controls').append('<label style=color:red id=errorMsg>Selected recurring payment could not be deleted.</label>');
				setTimeout( "$('#errorMsg').remove();", 15000);
				return false;
			} else {
				jQuery(currElement).parent().hide('slow', function() {
					jQuery(currElement).parent().remove();
				});
			}
		});
	} else {
		return false;
	}
};

ReportsModule.toggleAdvancedTrailingFuturePeriods = function( objCaller, arrstrFilterKeys, boolIsAllowedPeriodsForDates, arrstrPeriodOptions, arrOptionKeyValues ) {
	var arrstrPostMonthsAndDates;
	if( 'undefined' !== typeof( boolIsAllowedPeriodsForDates ) && true === boolIsAllowedPeriodsForDates ) {
		arrstrPostMonthsAndDates = [ 'today', 'yesterday', 'date', 'currentwk', 'lastwk' ];
	} else {
		arrstrPostMonthsAndDates = [ 'currentcm', 'priorcm', 'currentpm', 'nextpm', 'priorpm', 'pm', 'cm', 'cq' ];
	}

	var arrstrExpandByPeriodOption = ['currentfyr', 'currentfq', 'priorfq', 'priorfyr', 'pmrange'];
	var arrstrExpandByQuarterOption = ['currentfyr', 'priorfyr', 'pmrange'];
	var arrstrExpandByMonthOption = ['currentfq', 'priorfq','currentfyr', 'priorfyr', 'pmrange'];
	if( 'undefined' !== typeof( arrstrPeriodOptions ) ) {
		arrstrPostMonthsAndDates = arrstrPeriodOptions;
	}

	var arrOptionValues = [];
	var boolVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrstrPostMonthsAndDates ) );
	var boolExpandByVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrstrExpandByPeriodOption ) );
	var boolExpandByMonthVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrstrExpandByMonthOption ) );
	var boolExpandByQuarterVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrstrExpandByQuarterOption ) );

	arrOptionValues['0'] = arrOptionKeyValues['0'];

	if( true == boolExpandByVisible ) {
		$( '#expand_by_month_filter select' ).removeAttr( 'disabled' );
		$( '#expand_by_month_filter' ).show();
		if( boolExpandByMonthVisible ) {
			arrOptionValues['1'] = arrOptionKeyValues['1'];
		}

		if( boolExpandByQuarterVisible && arrOptionKeyValues['3'] ) {
			arrOptionValues['3'] = arrOptionKeyValues['3'];
		}

	} else {
		$( '#expand_by_month_filter' ).hide();
		arrOptionValues['1'] = arrOptionKeyValues['1'];
		if( arrOptionKeyValues['3'] ) {
			arrOptionValues['3'] = arrOptionKeyValues['3'];
		}
	}

	if( 1 == $( '#compare_periods' ).find('input').val() ) {
		$( '#expand_by_gl_book_filter' ).hide();
	} else {
		if( $( '#expand_by_month' ).val() == 0 ) {
			$( '#expand_by_gl_book_filter' ).show();
		} else {
			$( '#expand_by_gl_book_filter' ).hide();
		};
	}

	var strSelectedOption =  $( '#expand_by_month option:selected' ).val();

	$( '#expand_by_month' ).find('option').remove();

	for( indexOption in arrOptionValues ) {
		if( !( $.inArray( indexOption, arrOptionValues ) != -1 ) ) {
			$( '#expand_by_month' ).append( $( '<option></option>' ).val( indexOption ).html( arrOptionValues[indexOption] ) );
		}
	}

	if( ( true == boolExpandByVisible && 'pmrange' == $( objCaller ).val() ) || false == boolExpandByVisible ) {
		$( '#expand_by_month' ).append( $( '<option></option>' ).val( 2 ).html( arrOptionKeyValues['2'] ) );
	}

	$( '#expand_by_month option[value="'+ strSelectedOption +'"]' ).attr('selected', 'selected');

	for( index in arrstrFilterKeys ) {

		var strFilterKey = arrstrFilterKeys[index];
		if( true == boolVisible ) {
			$( '#' + strFilterKey + '_filter' ).show();
		} else {

			// When hiding these, set the values to zero so they don't show weird values in the report parameters
			$( '#' + strFilterKey + '_filter select' ).val( 0 );
			if( 0 != $( '#' + strFilterKey + '_filter input' ).length && 0 != $( '#' + strFilterKey + '_filter input' ).val() ) {
				$( '#' + strFilterKey + '_filter div' ).click();
			}
			$( '#' + strFilterKey + '_filter' ).hide();
		}
	};

	for( index in arrstrFilterKeys ) {
		var strFilterKey = arrstrFilterKeys[index];
		if( true == boolVisible ) {
			$( '#' + strFilterKey + '_filter select' ).change();
		}
	}

}

ReportsModule.toggleAdvancedExpandByPeriodFilter = function( strExpandByPeriod, arrExpandByPeriod ) {

	setTimeout( function() {
		if( 'daterange' == $( '#period_filter_range'  ).val() ) {
			$( '#compare_periods_filter' ).hide();
			$( '#custom_period_filter' ).hide();
			$( '#show_occupancy_percentages_filter' ).hide();
			$( '#begin_end_cash_balances_filter' ).hide();
			if( 0 != $( '#begin_end_cash_balances_filter input' ).length && 0 != $( '#begin_end_cash_balances_filter input' ).val() ) {
				$( '#begin_end_cash_balances_filter div' ).click();
			}
			$( '#beginning_ending_cash_balance_detail_filter' ).hide();
			$( '#year_to_date_filter' ).hide();
			$( '#show_periods_from_filter' ).hide();
			$( '#' + strExpandByPeriod + '_filter select' ).prop( 'selectedIndex', 0 );
			$( '#' + strExpandByPeriod + '_filter' ).hide();
		} else {
			$( '#compare_periods_filter' ).show();
			if( 'expand_by_month' === strExpandByPeriod ) {
				$( '#' + strExpandByPeriod + '_filter select' );
			} else {
				$( '#' + strExpandByPeriod + '_filter select' ).prop( 'selectedIndex', 0 );
			}
			if( 1 == $( '#compare_periods' ).find('input').val() ) {
				$( '#custom_period_filter' ).show();
			}

			if( false == $('#custom_tags_filter_items .form-checkbox, #departments_filter_items .form-checkbox').is( ':checked') ) {
				$( '#show_occupancy_percentages_filter' ).show();
			}

			$( '#begin_end_cash_balances_filter' ).show();
			if( 1 == $( '#begin_end_cash_balances_filter' ).find('input').val() ) {
				$( '#beginning_ending_cash_balance_detail_filter').show();
			}

			$( '#year_to_date_filter' ).show();
		}

		var undfnd;

		if( 1 == $( '#compare_periods_filter input' ).val() ) {
			$( '#' + strExpandByPeriod + '_filter' ).hide();
			$( '#trailing_periods_filter' ).hide();
			$( '#future_periods_filter' ).hide();
			$( '#expand_by_gl_book_filter' ).hide();
		} else {
			if( $( '#expand_by_month' ).val() == 0 ) {
				$( '#expand_by_gl_book_filter' ).show();
			} else {
				$( '#expand_by_gl_book_filter' ).hide();
			};
			ReportsModule.toggleAdvancedTrailingFuturePeriods( $( '#period_filter_range'  ), [ 'trailing_periods', 'future_periods' ], undfnd, undfnd, arrExpandByPeriod );
		}}, 200 );

}

ReportsModule.togglePeriodFilters = function( strTrailingPeriod, strFuturePeriod, strExpandByPeriod, strPeriodFilter, boolIncludeTrailingFuturePeriodValue ) {

	if( typeof(strPeriodFilter) == 'undefined' ) {
		strPeriodFilter = 'period';
	}

	if( typeof(strExpandByPeriod) == 'undefined' ) {
		strExpandByPeriod = null;
	}

	if( typeof(boolIncludeTrailingFuturePeriodValue) == 'undefined' ) {
		boolIncludeTrailingFuturePeriodValue = false;
	}

	if( !boolIncludeTrailingFuturePeriodValue ) {
		if( 0 != $('#' + strTrailingPeriod ).val() ) {
			$( '#' + strFuturePeriod + '_filter' ).hide();
		} else {
			$( '#' + strFuturePeriod + '_filter' ).show();
		}
		if( null != strExpandByPeriod ) {
			$( '#' + strExpandByPeriod + '_filter select' ).removeAttr( 'disabled' );
			$( '#' + strExpandByPeriod + '_filter' ).show();
	}
	}

	if( ( 0 == $('#' + strTrailingPeriod ).val() ) && ( ( 0 == $('#' + strFuturePeriod ).val() ) || 0 == strFuturePeriod.length ) ) {
		if( null != strExpandByPeriod ) {
			$( '#' + strExpandByPeriod + '_filter select' ).prop( 'selectedIndex', 0 );
			$( '#' + strExpandByPeriod + '_filter' ).hide();
		};
	}
	// Update future and trailing filter to default if period filter value changed.
	if( null != strExpandByPeriod ) {
		var strPeriodFilterIdElementSelector = $( '#' + strPeriodFilter + '_filter_range' ), arrstrPostMonthsAndDates;
		// In function toggleTrailingFuturePeriods we added fourth parameter.
		if( 'undefined' !== typeof( strPeriodFilterIdElementSelector.attr('onChange') ) ) {
			var arrstrDates = strPeriodFilterIdElementSelector.attr('onChange').split(',')[4];
		}
		var strPostMonthDate = '';
		//if fourth parameter is not defined then the function works as it is.

		if( 'undefined' !== typeof(strPeriodFilterIdElementSelector.attr( 'onChange' )) && true === strPeriodFilterIdElementSelector.attr('onChange').includes('true') ) {
			arrstrPostMonthsAndDates = ['today', 'yesterday', 'date', 'currentwk', 'lastwk'];
		} else {
			arrstrPostMonthsAndDates = [ 'currentcm', 'priorcm', 'nextcm', 'currentpm', 'nextpm', 'priorpm', 'pm', 'cm', 'cq' ];
		}
		if( undefined != arrstrDates ) {
			// when we have fourth parameter added then we have split by [ brackets. so, we always have string of PosttMonthAndDate on 2nd position
			// then we remove single quote and comma using regex by blank and create an array.
			if( 'undefined' != typeof(strPeriodFilterIdElementSelector.attr( 'onChange' ).split('[')[2]) ) {
				strPostMonthDate = strPeriodFilterIdElementSelector.attr('onChange').split('[')[2].slice(1,-5).replace(/[\ ']+/g, '');
				arrstrPostMonthsAndDates = strPostMonthDate.split(',');
			}
		}

		strPeriodFilterIdElementSelector.change( function() {
			var boolVisible = ( -1 !== $.inArray( $( this ).val(), arrstrPostMonthsAndDates ) );
			if( true == boolVisible ) {
				$( '#' + strFuturePeriod + '_filter' ).show();
				$( '#' + strFuturePeriod ).val( 0 );
				$( '#' + strTrailingPeriod + '_filter' ).show();
				$( '#' + strTrailingPeriod ).val( 0 );
				$( '#' + strExpandByPeriod + '_filter' ).hide();
			} else {
				$( '#' + strFuturePeriod + '_filter' ).hide();
				$( '#' + strTrailingPeriod + '_filter' ).hide();
			}
		} );
	}

	// To handle "Show Periods From" Filter hide/show dependency which is currently present only in Income Statement Report.
	if( ( 0 != $( '#trailing_periods' ).val() || 0 != $( '#future_periods' ).val() ) && 0 != $( '#expand_by_month' ).val() ) {
		$( '#show_periods_from_filter select' ).removeAttr( 'disabled' );
		$( '#show_periods_from_filter' ).show();
	} else {
		$( '#show_periods_from_filter' ).hide();
	}
};

// This function is for handling dependencies of compare period filter with other period filters.
ReportsModule.toggleComparePeriodsFilter = function( strComparePeriods, arrExpandByPeriod ) {

	setTimeout( function() {
		var arrPeriodFilterValues = [ 'pmrange', 'fyrtodate', 'pmtodate', 'currentfq', 'priorfq', 'priorfyr', 'currentfyr' ];
		var arrPeriodFilterValuesForVisibility = [ 'pmrange', 'currentfq', 'priorfq', 'priorfyr', 'currentfyr' ];
		var undfnd;

		if( 0 == $( '#' + strComparePeriods + '_filter' ).find('input').val() && !arrPeriodFilterValues.includes( $('#period_filter_range').val() ) ) {
			ReportsModule.toggleInputFilters( this, [ 'trailing_periods', 'future_periods', 'expand_by_month' ], true );
			ReportsModule.toggleAdvancedTrailingFuturePeriods( $( '#period_filter_range'  ), [ 'trailing_periods', 'future_periods' ], undfnd, undfnd, arrExpandByPeriod );
			$( '#expand_by_gl_book_filter' ).show();
		} else if( 0 == $( '#' + strComparePeriods + '_filter' ).find('input').val() && arrPeriodFilterValuesForVisibility.includes( $('#period_filter_range').val() ) ) {
			ReportsModule.toggleInputFilters( this, [ 'expand_by_month'], true );
			ReportsModule.toggleAdvancedTrailingFuturePeriods( $( '#period_filter_range'  ), [], undfnd, undfnd, arrExpandByPeriod );
			$( '#expand_by_gl_book_filter' ).show();
		} else {
			ReportsModule.toggleInputFilters( this, [ 'trailing_periods', 'future_periods', 'expand_by_month', 'show_periods_from' ], false );
			$( '#trailing_periods' ).prop('disabled', false );
			$( '#future_periods' ).prop('disabled', false );
			$( '#expand_by_gl_book_filter' ).hide();
	} }, 300 );
}

ReportsModule.toggleCompareFilter = function( objCaller ) {

	setTimeout( function() {
		var arrPeriodFilterValues = [ 'date', 'fyrtodate', 'pmtodate', 'priorfq', 'priorfyr', 'currentfyr', 'currentfq', 'pmrange' ];
		if( 1 == $( 'div#compare_post_month_filter' ).find('input').val() || 1 == $( 'div#compare_prior_year_filter' ).find('input').val() || arrPeriodFilterValues.includes( $( objCaller ).val() ) ) {
			ReportsModule.toggleInputFilters( this, [ 'trailing_periods', 'future_periods' ], false );
			$( '#trailing_periods' ).prop('disabled', false );
			$( '#future_periods' ).prop('disabled', false );
		} else {
			ReportsModule.toggleInputFilters( this, [ 'trailing_periods', 'future_periods' ], true );
		}
	}, 300 );
}

ReportsModule.toggleCompareMonthYearFilter = function( objCaller ) {

	var arrPeriodFilterValues = ['date', 'fyrtodate', 'pmtodate', 'priorfq', 'priorfyr', 'currentfyr'];
	setTimeout( function() {
		if( 0 == $( '#compare_post_month input' ).val() && 0 == $( '#compare_prior_year input' ).val() && !arrPeriodFilterValues.includes( $( '#period_filter_range' ).val() ) ) {
			if( $( '#trailing_periods' ).val() != 0 ) {

				$( '#trailing_periods_filter' ).show();
				$( '#future_periods_filter' ).hide();
			} else if( $( '#future_periods' ).val() != 0 ) {

				$( '#future_periods_filter' ).show();
				$( '#trailing_periods_filter' ).hide();
			} else {

				$( '#future_periods_filter' ).show();
				$( '#trailing_periods_filter' ).show();
			}
		} else {

			$( '#trailing_periods_filter' ).hide();
			$( '#future_periods_filter' ).hide();
		}
	}, 300 );
}

ReportsModule.toggleExpandByPeriodFilter = function( strExpandByPeriod, strCaller, boolRemoveMonthOption ) {

	var arrOptionKeyValues = [];

	$("#" + strExpandByPeriod + " option").each(function() {
		arrOptionKeyValues[$(this).val()] =  $(this).text();
	});

	if( strCaller.val() == 'pmrange' ) {

		$( '#trailing_periods_filter' ).hide();
		$( '#future_periods_filter' ).hide();

		$( '#' + strExpandByPeriod + '_filter select' ).removeAttr( 'disabled' );
		$( '#' + strExpandByPeriod + '_filter' ).show();

		if( 1 == $( '#compare_periods' ).find('input').val() ) {
			$( '#' + strExpandByPeriod + '_filter' ).hide();
		}

		if(  0 != $( '#' + strExpandByPeriod ).val() && 3 != $( '#' + strExpandByPeriod ).val() ) {
			$( '#show_periods_from_filter select' ).removeAttr( 'disabled' );
			$( '#show_periods_from_filter' ).show();
		}

		if( boolRemoveMonthOption ) {
			$( '#' + strExpandByPeriod ).find( 'option[value=1]' ).remove();
		}
	} else {

		if( boolRemoveMonthOption && 0 == $( '#' + strExpandByPeriod + ' option[value="1"]' ).length ) {

			$( '#' + strExpandByPeriod + ' option' ).eq( 1 ).before( $( "<option></option>" ).val( 1 ).text( "Month" ) );
		}

		setTimeout( function() {
			if( 1 == $( '#compare_periods' ).find('input').val() ) {
				$( '#trailing_periods_filter' ).hide();
				$( '#future_periods_filter' ).hide();
			}
		}, 200 );
		ReportsModule.toggleTrailingFuturePeriods( strCaller, [ strExpandByPeriod, 'trailing_periods', 'future_periods' ] );
		var arrOptionValues = [];
		$('#' + strExpandByPeriod + ' option').each(function() {
			arrOptionValues.push( $(this).val() );
		});

		if( !( $.inArray( '1', arrOptionValues ) != -1 ) ) {
			$( '#' + strExpandByPeriod ).append( $( '<option></option>' ).val( 1 ).html( arrOptionKeyValues['1'] ) );
		}

	}
};

ReportsModule.toggleConsolidateByFilter = function( strGroupBy, strConsolidateBy ) {
	( 'consolidate_all_properties' == $('#' + strConsolidateBy ).val() ) ? $( '#' + strGroupBy + '_filter' ).show() : $( '#' + strGroupBy + '_filter' ).hide();
}

ReportsModule.toggleReportByOptionFilter = function( strReportByOptions, strReportBy ) {
	setTimeout( function() {
		( 'all' == $('#' + strReportBy ).val() ) ? $( '#' + strReportByOptions + '_filter' ).hide() : $( '#' + strReportByOptions + '_filter' ).show();
	}, 3000 );
}

/* Toggle the Trailing Period Filter and Future Period
 *
 * Parameter - Added 4th Parameter arrstrPeriodOptions
 * @params arrstrPeriodOptions - contains the period filter options
 *  *
 * (Note :- This parameter is added because it is used to show the Trailing Period filter only for specific months)
 * */
ReportsModule.toggleTrailingFuturePeriods = function( objCaller, arrstrFilterKeys, boolIsAllowedPeriodsForDates, arrstrPeriodOptions ) {
	var arrstrPostMonthsAndDates;
	if( 'undefined' !== typeof( boolIsAllowedPeriodsForDates ) && true === boolIsAllowedPeriodsForDates ) {
		arrstrPostMonthsAndDates = [ 'today', 'yesterday', 'date', 'currentwk', 'lastwk' ];
	} else {
		arrstrPostMonthsAndDates = [ 'currentcm', 'priorcm', 'nextcm', 'currentpm', 'nextpm', 'priorpm', 'pm', 'cm', 'cq' ];
	}

	if( 'undefined' !== typeof( arrstrPeriodOptions ) ) {
		arrstrPostMonthsAndDates = arrstrPeriodOptions;
	}

	var boolVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrstrPostMonthsAndDates ) );
	for( index in arrstrFilterKeys ) {
		var strFilterKey = arrstrFilterKeys[index];
		if( true == boolVisible ) {
			$( '#' + strFilterKey + '_filter' ).show();
		} else {
			// When hiding these, set the values to zero so they don't show weird values in the report parameters
			$( '#' + strFilterKey + '_filter select' ).val( 0 );
			if( 0 != $( '#' + strFilterKey + '_filter input' ).length && 0 != $( '#' + strFilterKey + '_filter input' ).val() ) {
				$( '#' + strFilterKey + '_filter div' ).click();
			}
			$( '#' + strFilterKey + '_filter' ).hide();
		}
	};

	// Simulate change on any visible element so that its handlers will fire properly
	for( index in arrstrFilterKeys ) {
		var strFilterKey = arrstrFilterKeys[index];
		if( true == boolVisible ) {
			$( '#' + strFilterKey + '_filter select' ).change();
		}
	}
}

// Onchange event of dropdown toggle multiple filters
ReportsModule.toggleInputFilters = function( objCaller, arrstrFilterKeys, boolVisible ) {
	if( null == boolVisible ) {
		boolVisible = false;
	}
	for( index in arrstrFilterKeys ) {
		var strFilterKey = arrstrFilterKeys[index];
		if( true == boolVisible ) {
			$( '#' + strFilterKey + '_filter' ).removeClass('hide');
			$( '#' + strFilterKey + '_filter' ).find( 'input, textarea, button, select' ).removeAttr( 'disabled' );
			$( '#' + strFilterKey + '_filter' ).show();
		} else {
			// When hiding these, set the values to zero so they don't show weird values in the report parameters
			$( '#' + strFilterKey + '_filter select' ).val( 0 );
			if( 0 != $( '#' + strFilterKey + '_filter input' ).length && 0 != $( '#' + strFilterKey + '_filter input' ).val() ) {
				$( '#' + strFilterKey + '_filter div' ).click();
			}
			$( '#' + strFilterKey + '_filter' ).hide();
			$( '#' + strFilterKey + '_filter' ).find( 'input, textarea, button, select').attr( 'disabled','disabled' );
		}
	}

	// Simulate change on any visible element so that its handlers will fire properly
	for( index in arrstrFilterKeys ) {
		var strFilterKey = arrstrFilterKeys[index];
		if( true == boolVisible ) {
			$( '#' + strFilterKey + '_filter select' ).change();
		}
	}
};

$( "body" ).on( "change", ".js-select-show-hide-filter", function() {
	ReportsModule.selectShowHideFilter(this);
});

$( document ).ajaxComplete(function() {
	if( 0 < $( '.js-select-show-hide-filter' ).length ) {
		ReportsModule.selectShowHideFilter( $( '.js-select-show-hide-filter' ) );
	}
});

ReportsModule.selectShowHideFilter = function( obj ) {
	try {
		var $objSelect = $(obj).find('select');
		var arrstrOptionValues = $.map( $objSelect.find('option'), function(e) { return e.value;
		});
		var strFilterId = $objSelect.val();
		$.each( arrstrOptionValues , function( index, strOptionvalues ) {
			if( strFilterId == strOptionvalues ) {
				$( '.' + strFilterId ).removeClass( 'hide' );
				$( '.' + strOptionvalues + ' input' ).attr("disabled", false );
			} else {
				$( '.' + strOptionvalues + '' ).addClass( 'hide' );
				$( '.' + strOptionvalues + ' input' ).attr("disabled", true );
			}
		});
	} catch( e ) {
		console.log( 'could not find filter with id: ' + $(objSelect).find('select').val() + '_filter' );
	}

};

ReportsModule.getTimezoneAbbreviation = function( date ) {
	var dateString = date + '',
		tzAbbr = dateString.match( /\(([^\)]+)\)$/ ) || dateString.match( /([A-Z]+) [\d]{4}$/ );
	if( tzAbbr ) {
		tzAbbr = tzAbbr[1].match( /[A-Z]/g ).join( '' );
	}
	if( 'USMST' == tzAbbr ) return 'MST';
	if( 'AST' == tzAbbr ) return 'AKST';
	if( 'ADT' == tzAbbr ) return 'AKDT';
	return tzAbbr;
};

ReportsModule.toggleAChandCCFees = function() {
	( 'all_transactions' == $('#source').val() ? $('#ach_cc_fees_filter').hide() : $('#ach_cc_fees_filter').show() );
};

/**
 * Function to set response messages.
 * @param string strMsg Message to be displayed
 * @param string strType Different types are error, info, success
 * @param boolean boolAppendMsg Whether to add new message or append to the previous message.
 */

ReportsModule.addResponseMsg = function( strMsg, strType, boolAppendMsg ) {
	strType			= strType || 'error';
	boolAppendMsg	= boolAppendMsg || false;

	$( '#response_msg' ).removeClass();
	$( '#response_msg' ).addClass( 'alert ' + strType + ' slim' );
	$( '#response_msg' ).show();

	if( false == boolAppendMsg ) {
		$( '#response_msg' ).html( '<span class="font14 lineheight">' + strMsg + '</span><br>' );
	} else {
		$( '#response_msg' ).append( '<span class="font14 lineheight">' + strMsg + '</span><br>' );
	}
};

/**
 *	Function to clear response message received from ajax
 */
ReportsModule.clearResponseMsg = function() {
	$( '#response_msg' ).html( '' );
	$( '#response_msg' ).hide();
};

ReportsModule.loadPeriodFilterValue = function( strFilterKey ) {
	ReportsModule.clearAllErrors();

	for(var propName in ReportsModule) {
		if(ReportsModule.hasOwnProperty(propName) && true == /reportsxxx/.test(propName) ) {
			var strModuleName = propName.replace(/\d+/g, '');
		}
	}

	if( 'undefined' != typeof strModuleName && true == ReportsModule.boolLoadPeriodFilterValue ) {
		var arrPeriodFilterValues	= [ 'currentpm', 'currentpmm', 'priorpm', 'priorpmm', 'nextpm', 'currentfq', 'currentfqm', 'priorfq', 'priorfqm', 'currentfyr', 'priorfyr' ],
		arrstrPeriodFilterMatchValues = [ 'currentpmm', 'priorpmm', 'currentfqm', 'priorfqm' ];

		$('#report_filterproperty_group_ids_selector').on( 'click','li', function() {
			displayValue();
		});

		$('#report_filterproperty_group_ids').on("mouseup","div.form-multiselectbox > ul li", function() {
			displayValue();
		});

		if( 0 < $('#report_filterproperty_group_ids').find( 'ul li:visible' ).length ) {
			setTimeout( function() {
				displayValue();
			}, 500 );
		}

		$('#report_filterproperty_group_ids_selector').on( 'mouseup', '#property_list span .add', function() {
			setTimeout( function() {
				displayValue();
			}, 500 );
		} );

		$('#period_filter').on( 'change', '#use_alternative_year_end', function() {
			if( 'currentfq' == $( '#period_filter #period_filter_range' ).val() || 'priorfq' == $( '#period_filter #period_filter_range' ).val() || 'currentfyr' == $( '#period_filter #period_filter_range' ).val() || 'priorfyr' == $( '#period_filter #period_filter_range' ).val() ) {
				setTimeout( function() {
					displayValue();
				}, 500 );
			}
		});

		$('#period_filter').on( 'change', '#period_filter_range', function() {
			displayValue();
		});

		if( $( 'input[type=hidden][name="report_filter[period][allow_different_post_months]"]' ).val() ) {
			$( document ).on( 'change', '#consolidate_by_filter #consolidate_by', function() {
				displayValue();
			});
		}

		function displayValue() {
			setTimeout( function() {
				ReportsModule.clearAllErrors();

				var strPeriodFilterValue = $( '#period_filter_range' ).val();
				$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
				$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );

				$( '#period_filter_range' ).parent().next().children().addClass( 'hide' );
				$( '#period_filter_range' ).parent().next().find( '.' + strPeriodFilterValue ).removeClass( 'hide' );

				if( $.inArray( strPeriodFilterValue, arrPeriodFilterValues ) !== -1 ) {

					$( '#period_filter #period_filter_start_date' ).removeClass( 'hide' );
					if( 'currentfq' == strPeriodFilterValue || 'priorfq' == strPeriodFilterValue || 'currentfyr' == strPeriodFilterValue || 'priorfyr' == strPeriodFilterValue || $.inArray( strPeriodFilterValue, arrstrPeriodFilterMatchValues ) !== -1 ) {
						$( '#period_filter #period_filter_end_date' ).removeClass( 'hide' );
					}
					psi.patterns.ajaxRequest( {
						url: '/?module=' + strModuleName + '&action=period_filter_display_value',
						data: $( '#report_form' ).serialize(),
						success: function( response ) {
							try {
								var objResponse = $.parseJSON( response );
								if( true == objResponse['error'] ) {
									$( '.global-error p' ).remove();
									$( 'p.error' ).remove();
									$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
									$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );
									$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
									$( '.global-error' ).html( '<p class="alert slim error inline-alert" id="error_msg"><span class="error text-red font12 ">' + objResponse.message + '</span>' ).css( 'display', 'block' );
								} else {
									$( '.global-error p' ).remove();
									var strStartPostMonth = objResponse.data.start_post_month.split( /\//g ),
										strEndPostMonth = objResponse.data.end_post_month.split( /\//g ),
										strStartDate = objResponse.data.start_date.split( /\//g ),
										strEndDate = objResponse.data.end_date.split( /\//g ),
										strWarningMessage = objResponse.message;

									if( 'currentpm' == strPeriodFilterValue || 'priorpm' == strPeriodFilterValue || 'nextpm' == strPeriodFilterValue ) {
										$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );
										if( !strWarningMessage ) {
											$( '#period_filter #period_filter_start_date' ).removeClass( 'hide' ).val( strStartPostMonth[0] + '/' + strStartPostMonth[2] );
											$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
										} else {
											$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
											$( '#period_filter span#period_warning_message' ).removeClass( 'hide' );
											$( '#period_filter span#period_warning_message' ).text( strWarningMessage );
										}
									} else if( 'priorfq' == strPeriodFilterValue || 'currentfq' == strPeriodFilterValue || 'currentfyr' == strPeriodFilterValue || 'priorfyr' == strPeriodFilterValue ) {
										if( !strWarningMessage ) {
											$( '#period_filter #period_filter_start_date' ).removeClass( 'hide' ).val( strEndPostMonth[0] + '/' + strEndPostMonth[2] );
											$( '#period_filter #period_filter_end_date' ).removeClass( 'hide' ).val( strStartPostMonth[0] + '/' + strStartPostMonth[2] );
											$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
										} else {
											$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
											$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );
											$( '#period_filter span#period_warning_message' ).removeClass( 'hide' );
											$( '#period_filter span#period_warning_message' ).text( strWarningMessage );
										}
									} else if(  $.inArray( strPeriodFilterValue, arrstrPeriodFilterMatchValues ) !== -1 ) {
										$( '#period_filter #period_filter_start_date' ).removeClass( 'hide' ).val( strEndDate[0] + '/' + strEndDate[1] + '/' + strEndDate[2] );
										$( '#period_filter #period_filter_end_date' ).removeClass( 'hide' ).val( strStartDate[0] + '/' + strStartDate[1] + '/' + strStartDate[2] );
										$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
									}
								}
							} catch( e ) {
								$( '.global-error' ).html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 "> Failed to load post month.</span>' );
							}
						}
					} );
				} else {
					$( '.global-error p' ).remove();
					$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
					$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );
					$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
				}
			}, 500 );
		}

		/*
		* Added this code hack so that custom_period in Balance Sheet can work properly.
		* We require to add this code as key for period is statically binded in our system.
		* */
		$(document).find('#custom_period_filter #custom_period_filter_range').off( 'change' ).on( 'change', function() {

			strPeriodFilterValue = $( '#custom_period_filter #custom_period_filter_range' ).val();

			$( '#custom_period_filter #custom_period_filter_start_date' ).addClass( 'hide' );
			$( '#custom_period_filter #custom_period_filter_end_date' ).addClass( 'hide' );

			$(this).parent().next().children().addClass( 'hide' );
			$(this).parent().next().find('.' + strPeriodFilterValue).removeClass( 'hide' );

		});
	} else {
		return false;
	}
};

ReportsModule.getHtmlResponseHandler = function( viewDataContainer, pageNo ) {
	return function( url, data ) {
		viewDataContainer.find( '.reports-loader' ).fadeOut( 100 );

		var isMultipleDatasets = 0 < viewDataContainer.find( '.pagination' ).parents( '.table-controls' ).length;
		if( viewDataContainer.find( '#property-finder option:selected' ).length ) {
			var propClass = viewDataContainer.find( '#property-finder option:selected' ).val();
		}

		if( pageNo && false === isMultipleDatasets ) {
			var strResponse = $( "<div />" ).html( data ),
				content = $( '#page-' + pageNo, strResponse ).html(),
				page = $( '<tbody id="page-' + pageNo + '" style="display:none;"></tbody>' ).html( content ),
				graphs = strResponse.find( '.a-graph' ),
				inserted = false;

			viewDataContainer.find( '.generated-report tbody[class^="page-"]' ).each( function() {
				var id = parseInt( $( this ).attr( 'class' ).replace( 'page-', '' ) );
				if( id > pageNo ) {
					$( this ).before( page );
					inserted = true;
					return false;
				}
			} );

			if( false === inserted ) {
				viewDataContainer.find( '.generated-report tbody[class^="page-"]:last' ).after( page );
			}
			viewDataContainer.find( '.a-graph' ).hide();
			viewDataContainer.find( '.graph-view' ).append( graphs );

			viewDataContainer.find( '.page-' + pageNo + '' ).siblings( 'tbody[class^="page-"]' ).hide();
			viewDataContainer.find( '.page-' + pageNo + '' ).fadeIn( 500 );

			viewDataContainer.find( '.generated-report' ).hide( 1 ).delay( 200 ).fadeIn( 300, function() {

				// ReportsModule.bindCreateReportEssentials();

				psi.patterns.setEqualHeights( {
					elementSelector: '.view-data-container .equal-heights'
				} )

				// Make sure the table header fits into the container
				$( '.table-header' ).each( function() {
					$( this ).width( $( this ).parent( '.view-data-table-header' ).width() );
				} );
			} );
		} else {
			viewDataContainer.find( '.view-data-content' ).html( data ).ready( function() {
				//Show the close button on filter box after first successfull generate click
				viewDataContainer.find( '.view-data-filters' ).find( '.view-data-close' ).show();
				viewDataContainer.find( '.faux-header' ).fadeIn( 300 );
				if( 'undefined' != typeof propClass && propClass ) {
					viewDataContainer.find( '#property-finder' ).val( propClass ).prop( 'selected', true ).trigger('change');
				} else {
					viewDataContainer.find( '#property-finder' ).val( 'page-1' ).prop( 'selected', true );
				}
				viewDataContainer.find( '.view-data-content .generated-report' ).hide( 1 ).delay( 200 ).fadeIn( 300, function() {
					viewDataContainer.find( '#view-data-filters-list' ).fadeIn( 300 );

					var graphView = viewDataContainer.find( '.graph-view' );
					if( 0 < graphView.length ) {
						viewDataContainer.find( '.graph' ).show();
					}
					viewDataContainer.find( '.dark-graph' ).css( 'display', 'none' );
					viewDataContainer.find( '.dark-table' ).css( 'display', 'inline-block' );

					$( this ).find( 'tr.spacer' ).prev().children( 'td' ).css( 'border-bottom', 'none' );

					// ReportsModule.bindCreateReportEssentials();
					ReportsModule.adjustDivHeights();

					// Make sure the table header fits into the container
					$( '.table-header' ).each( function() {
						$( this ).width( $( this ).parent( '.view-data-table-header' ).width() );
					} );
				} );
			} );

			// show horizontal scroll bar when generate report using drill-down  ( task id: 1986524 )
			if( -1 != url.indexOf("&drilldown=1") ) {
				setTimeout( function(){
					$('.js-maintain-scrollbar-wrapper').css( {'display': 'block', 'width':$(window).width() - ( $(window).width() * 0.1 ), 'bottom': 0, 'position' : 'fixed' } );
				}, 1500 );
			}
		}
		var completeUrl = new URL(document.location.origin + url),
			correlationId = completeUrl.searchParams.get("token");
		//set attributes for report responses
		$('.js-positive-feedback-button, .js-negative-feedback-button').attr( { 'data-correlation-id' : correlationId, 'data-report-instance-id' : $('[name="report_instance_id"]').val() });
	}
};

ReportsModule.getErrorResponseHandler = function( viewDataContainer ) {
	return function( data, status, xhr ) {
		viewDataContainer.find( '.reports-loader' ).fadeOut(100);
		viewDataContainer.find( '.view-data-filters' ).show(300);
		if( $.isPlainObject( data ) && data.hasOwnProperty( 'error' ) ) {
			for( i=0; i < data.error.length; i++ ) {
				var error = data.error[i];
				if( 'string' === typeof error ) {
					ReportsModule.addError( 'There was an error running the report. <span onclick="$(this).parent().siblings(\'pre\').toggle()">Click here to see the error.</span><pre class="align-left" style="display:none; max-height:400px; overflow-y: scroll;">' + error + '</pre>' );
				} else if( null !== error && 'object' === typeof error && error.hasOwnProperty( 'filter_key' ) && error.hasOwnProperty( 'message' ) ) {
					ReportsModule.addFilterError( error.filter_key + '_filter', error.message );
				}
			}
		}
	};
};

ReportsModule.reloadFilter = function( event ) {
	var strFilterKey = event.data.filter;

	var strUrl = ReportsModule.strViewReportUrl.replace('&action=view_report','&action=view_dependent_filter');
	var strFormName = ( 0 == ReportsModule.strFormName ) ? '#report_form' : ReportsModule.strFormName;

	setTimeout( () => {
		$.ajax({
			type : 'POST',
			data: $( strFormName ).serialize(),
			beforeSend: function() {
				psi.patterns.showLoadingImage({
					strElementSelector: '#' + strFilterKey + '_filter'
				});
			},
			complete: function() {
				psi.patterns.removeLoadingImage({
					strElementSelector: '#' + strFilterKey + '_filter'
				});
			},
			url : strUrl + '&filter_key=' + strFilterKey,
		}).done( function( response ){
			$( '#' + strFilterKey + '_filter' ).replaceWith(response);
			if( true == $( '#' + strFilterKey + '_filter' ).hasClass( 'hide' ) ) {
				$( '#' + strFilterKey + '_filter' ).addClass( 'hide' );
			}
			psi.patterns.bindEssentials();
		});
	}, 100 );
};

function checkFilterIntegrity( event ) {
	/* This function is called by the handlers to verify if all other dependencies are also fulfilled and satisfied before showing or hiding the filter.
	*  The function maintains an array that is used to store boolean value, if a dependency meets the condition then it stores 1 if it does not then it stores 0.*/
	var arrmixDependentFilters = $.parseJSON( event.data.dependencies_array ),
		arrboolFilterValue = [],
		strFilter = event.data.filter;

	$.each( arrmixDependentFilters, function( strFilterKey, mixFilterValue ) {
		/* The setTimeout is used so we don't have to flip the value of toggle button because filterchange(showIf showIfNot) gets called first and then
		*  the hidden input value is changed. */
		setTimeout( function() {
			var intFilterInput = parseInt( $( '#' + strFilterKey + ' > input:hidden ' ).val() );

			var boolshowFilter = '';
			if( true === $( '#' + strFilterKey ).hasClass( 'onoff' ) ) {
				boolshowFilter = intFilterInput;
			} else {
				boolshowFilter = parseInt( $( '#' + strFilterKey + '_filter' ).find( 'select' ).val() );
			}

			switch( mixFilterValue ) {
				case 'showIf':
					if( !boolshowFilter ) {
						arrboolFilterValue.push( 0 );
					} else {
						arrboolFilterValue.push( 1 );
					}
					break;

				case 'showIfNot':
					if( boolshowFilter ) {
						arrboolFilterValue.push( 0 );
					} else {
						arrboolFilterValue.push( 1 );
					}
					break;

				default:
					if( "object" === typeof mixFilterValue && 'showIfValues' === mixFilterValue.function ) {
						var arrmixFilterValue = $( '#' + strFilterKey + '_filter input:checkbox:checked' ).map( function () {
							return $( this ).val();
						} ).get();
						var arrstrParameters = mixFilterValue.parameters.map( String );
						if( 1 <= arrmixFilterValue.length ) {
							// This checks if the filter is a Multi-Select, Combo-Box or a normal filter
							var boolCheck = arrmixFilterValue.some( function ( mixValue ) {  // If filter is a Multi-Select or Combo-Box then checks if at least one value is in the showIfValues array
								return -1 !== $.inArray( mixValue, arrstrParameters );
							} );
							if( boolCheck ) {
								arrboolFilterValue.push( 1 );
							} else {
								arrboolFilterValue.push( 0 );
							}
						} else if( true === Array.isArray( arrstrParameters ) && 0 === arrstrParameters.length && 0 === arrmixFilterValue.length ) {
							arrboolFilterValue.push( 1 );
						} else {
							if( -1 === $.inArray( $( '#' + strFilterKey + '_filter' ).find( 'select' ).val(), arrstrParameters ) ) {
								arrboolFilterValue.push( 0 );
							} else {
								arrboolFilterValue.push( 1 );
								if( mixFilterValue.reloadFilter ) {
									ReportsModule.reloadFilter( event );
								}
							}
						}
					}
					break;
			}

			var objFilter = $( '#' + strFilter );
			$( '#' + strFilter + '_filter' ).show();
			$( '#' + strFilter + '_filter' ).removeClass('hide');
			objFilter.attr( "disabled", false );
			objFilter.find( 'input:hidden' ).attr( 'disabled', false );
			if( -1 === $.inArray( 1, arrboolFilterValue ) ) {
				$( '#' + strFilter + '_filter' ).hide();
				$( '#' + strFilter + '_filter' ).addClass('hide');
				if( objFilter.hasClass( 'onoff' ) ) {
					if( 0 != objFilter.length && objFilter.find( 'input:hidden' ).attr( 'value' ) != objFilter.find( 'input:hidden' ).attr('default_value') ){
						objFilter.click();
					}
					objFilter.find( 'input:hidden' ).attr( 'disabled', true );
				} else {
					objFilter.attr( "disabled", true );
				}
			}

		}, 200 );
	} );
}

ReportsModule.showIf = function( event ) {
	checkFilterIntegrity( event );
};

ReportsModule.showIfNot = function( event ) {
	checkFilterIntegrity( event );
};

ReportsModule.showIfValues = function( event ) {
	checkFilterIntegrity( event );
};

var intReportModuleId = 1249;
objEntrataNotification.registerCallbackFunction( intReportModuleId, function( objMessage ) {
	if( ReportsModule.tokens.hasOwnProperty( objMessage.report_details.correlation_id ) ) {
		return false;
	}

	return true;
});

$(document).off( 'click', '.js-positive-feedback-button' ).on( 'click', '.js-positive-feedback-button', createEntrataResponse );
$(document).off( 'click', '.js-negative-feedback-button' ).on( 'click', '.js-negative-feedback-button', createEntrataResponse );

function createEntrataResponse() {
	psi.patterns.loadDialog( {
		strContentId:'report_feedback',
		width: 850,
		height: 500,
		strUrl: '?module=entrata_report_responsesxxx&action=create_entrata_response',
		title: __( 'Report Feedback' ),
		data: {
			report_id: $(this).data('report-id'),
			default_report_id: $(this).data('default-report-id'),
			report_version_id: $(this).data('report-version-id'),
			correlation_id: $(this).data('correlation-id'),
			report_instance_id: $(this).data('report-instance-id'),
			feedback_type : $(this).data('feedback-type')
		},
	} );
}

ReportsModule.setEqualMinHeights = function ( options ) {

	if(arguments.length) {

		var heights = [];
		$(options.elementSelector).each(function () {

			var $this = $(this);
			$this.css("min-height", "auto");
			heights.push($this.height());

		});

		$( options.elementSelector ).css( 'height', 'auto' );
		$( options.elementSelector ).css( "min-height", Math.max.apply( Math,  heights ) );

	}

};

ReportsModule.adjustDivHeights = function () {

	let leftTabsDivHeight = $('div.view-data-left-col.equal-heights > .view-data-side-tabs').outerHeight();
	let relativeDivHeight = $('div.view-data-content.equal-heights > div.relative').outerHeight();
	if( leftTabsDivHeight > relativeDivHeight ) {
		$( 'div.view-data-container' ).css( "min-height", leftTabsDivHeight );
		$( 'div.view-data-left-col.equal-heights' ).css( "min-height", leftTabsDivHeight );
		$( 'div.view-data-content.equal-heights' ).css( "min-height", leftTabsDivHeight );
	} else {
		ReportsModule.setEqualMinHeights( { elementSelector: '.view-data-container .equal-heights' } );
		ReportsModule.setEqualMinHeights( { elementSelector: '.view-data-container' } );
	}

};

$( 'body' ).off( 'click', '.load-recipients-packet' ).on( 'click', '.load-recipients-packet', function() {
	var strLocaleCode = $( this ).data( 'locale-code' );
	if( $( this ).is( ':checked' ) ) {
		$( '.packet-recipients-' + strLocaleCode ).removeClass( 'hide' );
		$( '.packet-recipients-' + strLocaleCode ).find( 'input' ).prop( "disabled", false );
	} else {
		$( '.packet-recipients-' + strLocaleCode ).addClass( 'hide' );
		$( '.packet-recipients-' + strLocaleCode ).find( 'input' ).prop( "disabled", true );
	}
} );

var strApPayeeId;
ReportsModule.loadOwnerDetails = function( owner_id, ap_payee_id, title ) {
	psi.patterns.addDialogContent( { strUrl: '/?module=ownerxxx&action=view_owner&is_from_ap_payee=0&owner[id]=' + owner_id , strContentId: 'view_owner', title: 'View Owner: ' + title } );
	strApPayeeId = ap_payee_id;
	setTimeout( function(){
			psi.objViewOwner.init();
			$( document ).find( '#view_vendor_dialog' ).unbind( 'click' );
	}, 4000 );
	return;
};

$( document ).on( 'click', '#view_vendor_dialog', function(e) {
	psi.patterns.addDialogContent( { strUrl: '/?module=ap_payee_systemxxx&ap_payee[id]=' + strApPayeeId + '&is_from_owner=1', title: 'Vendor' } );
} );

// DEV-150496: No matter what page in the Reports (Legacy) module you navigate to, Reports (Legacy) should remain selected.
$( document ).ready( function() {
	$( 'div.entrata-header-container div#sub-navigation ul.sub-nav li[data-module-name="report_systemxxx"]' ).addClass( 'selected' );
} );

//# sourceURL=Entrata/js/module/reports.js
