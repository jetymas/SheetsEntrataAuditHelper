psi.objLedger = ( function( $ ) {
	var intPageNumber = {};
	var intPagingSize = 10;

	var initPagination = function( tableId, strLedgerContainer ) {

		var strSerializeFilter  = $( '#ar_transactions_filter_frm' ).serialize(),
			strElementSelector = $( "#" + tableId ),
			strTabUrl = strElementSelector.attr( "custom_load_url" ) + '&' + strSerializeFilter;

		if( strElementSelector.find(".tbl-body").length > 0 ) {
			strElementSelector = strElementSelector.find(".tbl-body");
		}

		if( 'undefined' == typeof strTabUrl || '' == strTabUrl ) {
			return;
		}

		// removing lazy load event, as its being binded on 'document' and initiating unwanted request on other tabs with previous tab url, when new tab having less count.
		$( document ).off( 'scroll.lazyLoad' );
		if( psi.objLedger.intPagingSize <= $( '#' + tableId + ' > tbody > tr:not(.hide)' ).length || psi.objLedger.intPagingSize <= $( '#' + tableId + ' > .tbl-body > .tbl-row:not(.hide)' ).length ) {

			strElementSelector.data( "next_page_no", 1 );
			psi.patterns.lazyLoad({
				strElementSelector: strElementSelector,
				strOnScrollElementSelector: ".modal-body-container",
				url: strTabUrl,
				scrollEndValue: 80,
				data: strElementSelector.data(),
				customBeforeSend: function() {
					strElementSelector.data( "next_page_no", strElementSelector.data( "next_page_no" ) + 1 );
				},
				success: function( res ) {
					// checking data to prevent further ajax requests
					if( $( res ).filter( 'tr' ).length >= psi.objLedger.intPagingSize || $( res ).filter( '.tbl-row' ).length >= psi.objLedger.intPagingSize ) {
						strElementSelector.find( ".js-loading-data" ).remove();
						strElementSelector.append( res );
						strElementSelector.data( "ajax-in-process", false );
					} else {
						strElementSelector.find( ".js-loading-data" ).remove();
						strElementSelector.append( res );
						strElementSelector.data( "ajax-in-process", true );
					}
					psi.patterns.bindEssentials();

					if( !$( '#resident_view' ).is(':checked') ) {
						ledger.selectClickedColumn();
					}

				}
			});
		}
	};

	var initSorting = function( strTableId, strLedgerContainer ) {

		var strElementSelector = $( "#" + strTableId ),
			tableHeader;

		if( strElementSelector.find(".tbl-body").length > 0 ) {
			strElementSelector = strElementSelector.find(".tbl-body");
			tableHeader = ".tbl-head li";
		} else {
			tableHeader = "th";
		}

		var strSerializeFilter  = $( '#ar_transactions_filter_frm' ).serialize(),
			strSortDirection = $( '#' + strLedgerContainer ).find( '#ar_transactions_filter_frm' ).find( '#sort_order' ).val(),
			strTabUrl = $( '#' + strTableId ).attr( 'custom_load_url' ) + '&' + strSerializeFilter;

		if( 'undefined' == typeof strTabUrl || '' == strTabUrl ) {
			return;
		}

		if( 2 > $( '#' + strTableId + ' > tbody > tr:not(.hide)' ).length && 2 > $( '#' + strTableId + ' > .tbl-body > .tbl-row:not(.hide)' ).length ) {
			return;
		}

		$('#' + strTableId).find( tableHeader + '.sortable' ).on('click', function () {

			var strSortBy = $(this).attr('sort_by');

			if( 'undefined' == typeof strSortBy || '' == strSortBy ) {
				return;
			}

			var obj = $(this);

			psi.patterns.ajaxRequest( { strElementSelector: '#' + strTableId, url: strTabUrl + '&next_page_no=0',
				success: function( strResponse ) {
					if( strElementSelector.find(".tbl-body").length > 0 ) {
						strElementSelector.html( strResponse );
					} else {
						strElementSelector.find('tbody').html( strResponse );
					}

					if( 0 < obj.find('i').length ) {
						obj.find('i').removeClass().addClass( strSortDirection.toLowerCase() );
					} else {

						obj.siblings().each( function() {
							$(this).removeClass('selected');
							$(this).find('i').remove();
						});
						obj.addClass('selected');
						obj.append( "<i class='asc'></i>" );
					}

					$('#' + strTableId ).data( "ajax-in-process", false );

					psi.objLedger.initPagination( strTableId, strLedgerContainer );
					psi.patterns.removeLoadingImage( { strElementSelector: '#' + strTableId } );
					psi.patterns.bindEssentials();
				}
			});
	  	});
	};

	return {
			intPageNumber: intPageNumber,
			intPagingSize: intPagingSize,
			initPagination: initPagination,
			initSorting: initSorting
	};

})( jQuery );