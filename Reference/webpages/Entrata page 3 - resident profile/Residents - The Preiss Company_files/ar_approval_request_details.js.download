var strApprovalRequestContainerId = 'view_ar_approval_request_detail';
var strApprovalRequestDialogId    = 'view_ar_approval_request_detail_dialog';

$('a.show-approval-request-progress-details > i').on('click', function(){
	$('#nextStep').trigger('click');
});

$('a.reject-ar-approval-request').on('click', function(){

	$("#form_notes").addClass( ' request-rejected-note ' );
	$("#form_notes").removeClass( 'request-approved-note' );
	if( true == boolIsRequireNotesOnRejection ) {
		$( "#form_notes" ).find( 'label > i' ).removeClass( 'hide' );
	} else {
		$( "#form_notes" ).find( 'label > i' ).addClass('hide');
	}
	psi.patterns.loadDialog({ width:400, height:250, strUrl: strAddArApprovalRequestNoteUrl, strContentId:'form_notes_content', title:__('Reject Request') });

});

$('a.approve-ar-approval-request').on('click', function(){

	if( false == boolIsAllowNotesOnApproval ) {

		psi.patterns.ajaxRequest({
			type: 'POST',
			url: strApproveRequestUrl,
			data: { 'approve_or_reject_approval_request_note' : '', 'approve_ar_approval_request' : 1 },
			strElementSelector: "#view_ar_approval_request_detail"
		});
	} else {
		$("#form_notes").addClass( 'request-approved-note ' );
		$("#form_notes").removeClass( 'request-rejected-note' );
		$( "#form_notes" ).find( 'label > i' ).addClass('hide');
		psi.patterns.loadDialog({ width:400, height:250, strUrl:strAddArApprovalRequestNoteUrl + '&is_approve=true', strContentId:'form_notes_content', title:__('Approval Request') });
		return false;
	}
});

$('input.cancel-ar-approval-request').on('click', function(){
	psi.patterns.loadDialog({ width:500, height:300,
							strUrl: strAddCancelApproveRequestNoteUrl,
							strContentId:'form_notes_content',
							title:__('Cancel Request') });
});

$('a.form-submit').on('click', function( event ){
	event.preventDefault();
	var strNote							= $("#form_notes").find("textarea").val().trim();
	var strRequestUrl					= strApproveRequestUrl;
	var boolIsRejectRequest 			= true;
	var boolIsApproveRequest			= false;
	var intSelectedRuleStopResultId 	= $("#selected_previous_rule_stop_result_id").val().trim();
	if( $( "#form_notes" ).hasClass( 'request-approved-note' ) ) {
		boolIsApproveRequest	= true;
		boolIsRejectRequest		= false;
	}

	if( $("#form_notes").hasClass( 'return-specific-stop' ) ) {
		strRequestUrl	= strRequestUrlStop;
	}

	if( true == boolIsRejectRequest && true == boolIsRequireNotesOnRejection && '' == strNote ) {
		$( '.reject-notes-error' ).removeClass( 'hide' );
		return;
	} else {
		psi.patterns.ajaxRequest({
			type: 'POST',
			url: strRequestUrl,
			data: { 'approve_or_reject_approval_request_note' : strNote, 'approve_ar_approval_request' : boolIsApproveRequest, 'selected_rule_stop_result_id' : intSelectedRuleStopResultId },
			strElementSelector: "#form_notes",
			complete: function(){
				psi.patterns.closeLargeDialog();
				$('.ui-dialog-titlebar-close').trigger( "click" );
			}
		});
	}

	return true;
});

$('a.return-prev-stop-ar-approval-request').on('click', function(){
	psi.patterns.loadDialog({ width:700, height:250, strUrl: strReturnToPreviousStopUrl, strContentId:'previous_user_list', title:__('Select Return Routing Stop') });
	//$(this).closest(".ui-widget").find('.ui-dialog-titlebar-close').trigger('click');
});

$(".request-tabs-request-progress").click(function() {
	$(this).addClass('selected');
	$(this).siblings().removeClass('selected');
	$('#approval_request_progress').fadeIn();
	$('#approval_request_details').hide();
});

$(".request-tabs-request-details").click(function() {
	$(this).addClass('selected');
	$(this).siblings().removeClass('selected');
	$('#approval_request_details').fadeIn();
	$('#approval_request_progress').hide();
});

$( '#dismiss_edits' ).on( 'click', function(){
	psi.patterns.loadDialog({
		width: 400,
		height: 250,
		strUrl: strConfirmDismissalUrl,
		strContentId: 'form_dismissal',
		title:__('Confirm Request Dismissal')
	});
	event.preventDefault();
} );

$( '#start_new_request' ).on( 'click', function(){

	var strApprovalRequestFor   = $('#approval_request_for').val().trim();
	var fltApprovalRequestTransactionAmount   = $('#approval_request_transaction_amount').val().trim();

	var url = '/?module=customers_systemxxx';
	var win = window.open( url );

	win.addEventListener('load', function(){
		win.psi.patterns.loadLargeDialog({
			strUrl: '/?module=customerxxx&lease[id]=' + intLeaseId + '&customer[id]=' + intCustomerId,
			complete: function() {
				var objmixLoadDialogContent = makeDialogParameters( strApprovalRequestFor, fltApprovalRequestTransactionAmount );
				openDialog( win, objmixLoadDialogContent );
			},
			onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( 'dashboard-table-data' ) }
		})
	}, true);
	return;

});

function makeDialogParameters( strApprovalRequestFor, fltApprovalRequestTransactionAmount ) {
	var objmixLoadDialogContent = {};
	if( 'add_charge' === strApprovalRequestFor ) {
			objmixLoadDialogContent.strUrl       = strAddChargeUrl;
			objmixLoadDialogContent.strContentId = 'ar_transaction';
			objmixLoadDialogContent.title        = 'Add Charge';
			objmixLoadDialogContent.width        = 600;
			objmixLoadDialogContent.height       = 600;
	} else if( 'add_credit' === strApprovalRequestFor ) {
		objmixLoadDialogContent.strUrl       = strAddCreditUrl;
		objmixLoadDialogContent.strContentId = 'ar_transaction';
		objmixLoadDialogContent.title        = 'Add Credit';
		objmixLoadDialogContent.width         = 1400;
		objmixLoadDialogContent.height       = 'auto';
	} else if( 'edit_transaction' === strApprovalRequestFor || 'reverse_transaction' === strApprovalRequestFor ) {
		objmixLoadDialogContent.strUrl       = 0 > parseFloat( fltApprovalRequestTransactionAmount ) ? strViewCreditArTransactionUrl : strViewChargeArTransactionUrl;
		objmixLoadDialogContent.strContentId = 'ar_transaction';
		objmixLoadDialogContent.title        = 'Charge';
		objmixLoadDialogContent.width        = 980;
		objmixLoadDialogContent.height       = 600;
	}
	return objmixLoadDialogContent;
}

function openDialog( windowObject, arrmixLoadDialogueContent ) {
	windowObject.psi.patterns.loadDialog( {
		width: arrmixLoadDialogueContent.width,
		height: arrmixLoadDialogueContent.height,
		strUrl: arrmixLoadDialogueContent.strUrl,
		strContentId: arrmixLoadDialogueContent.strContentId,
		title: arrmixLoadDialogueContent.title
	} );
	return false;
};

function closeDialog( objElement ){
	$( objElement ).closest('.ui-dialog .ui-widget-content ').dialog('close');
	return false;
}

function viewLease() {
	var url = '/?module=customers_systemxxx&lease[id]=' + intLeaseId + '&customer[id]=' + intCustomerId;
	window.open( url );
}

function viewNotes( intRequestId ) {
	psi.patterns.loadDialog({
		width: 600,
		height: 200,
		strUrl: "/?module=ar_transaction_approval_requestxxx&action=view_routing_detail_notes&ar_approval_request_id=" + intRequestId,
		strContentId: 'approval_routing_details',
		title:__('View Notes')
	});
}
//finds the td, tr, and th of the td being hovered
//as well as the matching cell in the opposing table
//adds the class 'hovering' to them all on hover
//removes 'hovering' when no longer hovering over td
  $('td').hover(
    function(){
      if( $(this).closest('table').hasClass('proposed-charges-table') ) {
        $(this)
          .addClass('hovering')
          .closest('tr')
          .addClass('hovering')
          .closest('table')
          .find('tr[data-row=0]')
          .find( "th[data-column='" + $(this).data( 'column' ) + "']" )
          .addClass('hovering');

        $('.current-charges-table')
          .find('tr[data-row=0]')
          .find( "th[data-column='" + $(this).data( 'column' ) + "']" )
          .addClass('hovering')
          .closest('table')
          .find( "tr[data-row='" + $(this).closest('tr').data( 'row' ) + "']" )
          .addClass('hovering')
          .find( "td[data-column='" + $(this).data( 'column' ) + "']" )
          .addClass('hovering');
        } else {

          $(this)
            .addClass('hovering')
            .closest('tr')
            .addClass('hovering')
            .closest('table')
            .find('tr[data-row=0]')
            .find( "th[data-column='" + $(this).data( 'column' ) + "']" )
            .addClass('hovering');

          $('.proposed-charges-table')
            .find('tr[data-row=0]')
            .find( "th[data-column='" + $(this).data( 'column' ) + "']" )
            .addClass('hovering')
            .closest('table')
            .find( "tr[data-row='" + $(this).closest('tr').data( 'row' ) + "']" )
            .addClass('hovering')
            .find( "td[data-column='" + $(this).data( 'column' ) + "']" )
            .addClass('hovering');
        }
    },
    function(){
        $(this)
          .removeClass('hovering')
          .closest('tr')
          .removeClass('hovering')
          .closest('table')
          .find('tr[data-row=0]')
          .find( "th[data-column='" + $(this).data( 'column' ) + "']" )
          .removeClass('hovering');

        $('.current-charges-table')
          .find('tr[data-row=0]')
          .find( "th[data-column='" + $(this).data( 'column' ) + "']" )
          .removeClass('hovering')
          .closest('table')
          .find( "tr[data-row='" + $(this).closest('tr').data( 'row' ) + "']" )
          .removeClass('hovering')
          .find( "td[data-column='" + $(this).data( 'column' ) + "']" )
          .removeClass('hovering');

        $('.proposed-charges-table')
          .find('tr[data-row=0]')
          .find( "th[data-column='" + $(this).data( 'column' ) + "']" )
          .removeClass('hovering')
          .closest('table')
          .find( "tr[data-row='" + $(this).closest('tr').data( 'row' ) + "']" )
          .removeClass('hovering')
          .find( "td[data-column='" + $(this).data( 'column' ) + "']" )
          .removeClass('hovering');
    }
  );

//the following functions find rows with changes and hide rows without changes on toggle

//targets all rows with a td that has '.adjusted' class & adds the class 'has-adjusted-td'
  $('.adjusted').closest('tr').addClass('has-adjusted-td');

//adds the class 'js-toggle-row-recurring' to rows that haven't changed in tables in the recurring tab
  $('.approval-body.recurring tr').not('tr:first-child').not('.has-adjusted-td').not('.new').not('.delete').addClass('js-toggle-row-recurring');

//toggles the rows with the matching classes
  $('.js-show-adjusted-recurring').click(function(){
    $('.js-toggle-row-recurring').toggle();
  });

  $('.js-show-adjusted-1x').click(function(){
    $('.js-toggle-row-1x').toggle();
  });

function loadApprovalRequestDetails( strApprovalRequestUrl, intArApprovalRequestId, onCloseCallback, openInDialog ) {

	if( openInDialog ) {
		checkAndCloseOpenDialog( strApprovalRequestDialogId );
	}

	var dialog       = openInDialog ? 'loadDialog' : 'addDialogContent';
	var strContentId = openInDialog ? strApprovalRequestDialogId : strApprovalRequestContainerId;

	psi.patterns[dialog] ({
		strContentId: strContentId,
		strUrl: strApprovalRequestUrl + "&ar_approval_request_id=" + intArApprovalRequestId,
		title: __( 'Approval Request Details' ),
		onCloseCallback : onCloseCallback
	});
}

function checkAndCloseOpenDialog( strElementId ) {
	if( window.jQuery( '#' + strElementId ).hasClass( 'ui-dialog-content' ) ) {
		window.jQuery( '#' + strElementId ).dialog( 'close' );
		window.jQuery( '#' + strElementId ).remove();
	}
}

function checkDialogIsOpen( strElementId ) {
	return $( "body" ).find( 'div#' + strElementId + ':visible' ).length;
}

function refreshRequestSource( strSource ) {

	checkAndCloseOpenDialog('form_notes_content');
	checkAndCloseOpenDialog( 'form_dismissal' );
	if( 'transaction_approval_history_tab' === strSource ) {
		refreshArTransactionDialog();
		checkAndCloseOpenDialog( strApprovalRequestDialogId );
		return;
	}
	psi.patterns.closeLargeDialog();
}

