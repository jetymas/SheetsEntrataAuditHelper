var entrataReports = (function(window, $) {

	var
		boolLoadPeriodFilterValue	= true,
		modules = {
			groups:			'report_groups_newxxx',
			inbox:			'report_inbox_newxxx',
			instances:		'report_instances_newxxx',
			documentation:	'report_documentation_newxxx',
			packets:		'report_packets_newxxx',
			reportLibrary:	'report_library_newxxx',
			schedules:		'report_schedules_newxxx',
			sap:			'sap_reports_newxxx',
			company:		'company_reports_newxxx',
			myReports:		'my_reports_newxxx',
			migration:		'report_migration_newxxx',
			history:		'report_history_newxxx',
			responses:		'entrata_report_responsesxxx',
			archive:		'report_archive_newxxx'
		},

		reportTypes = {
			system:		1,
			sap:		2,
			controller:	3,
			custom:		4
		},

		reportGroupTypes = {
			company:		1,
			my_reports:		2,
			packet:			3,
			quick_link:		4
		},

		reportScheduleTypes = {
			manual:			1,
			scheduled:		2,
			period_close:	3,
			period_advance:	4
		},

		columnSortOptions,
		cacheId = [],
		strReportGroupPositions,
		reactAbortController;
	// region Initialization

	function init() {
		$(document).on( 'keypress', 'input[data-name=Every]:visible', function (e) {
			//if the key pressed is not digit then display error and don't type anything
			if( e.which !== 8 && e.which !== 0 && (e.which < 48 || e.which > 57) ) {
				return false;
			}
		});

		if( sessionStorage.getItem("manage-group-clicked") !== null ) {
			psi.patterns.showLoadingImage( { strElementSelector: '#report_groups_list' } );
			sessionStorage.removeItem("manage-group-clicked");
			manageReportGroup();
		}

		// Actiontip for update available hover, event: manual to keep actiontip visible if cursor move on content of actiontip.
		$( '#report_groups_list .js-update-available, .tooltip-invalid-packet-schedule-info, .tooltip-last-sent-info, .tooltip-recipients-info' ).actiontip( {event: 'manual'} )
		.on( 'mouseenter', function() {
			mouseEnterActiontip( this );
		}).on( 'mouseleave', function(){
			mouseLeaveActiontip( this );
		});


		bindEventHandlers();
		updateSecondaryColumnsToDropdown();

		// DEV-150496: No matter what page in the Reporting module you navigate to, Reporting should remain selected.
		$( 'div.entrata-header-container div#sub-navigation ul.sub-nav li[data-module-name="report_system_newxxx"]' ).addClass( 'selected' );
	}

	function bindEventHandlers() {
		var $body = $('body');
		$body.off( 'click', '.js-form-dialog-cancel' ).on( 'click', '.js-form-dialog-cancel', closeDialog );
		$body.off( 'click', '.js-form-curtain-cancel' ).on( 'click', '.js-form-curtain-cancel', closeCurtain );
		bindReportNavigationEventHandlers();
		bindReportGroupEventHandlers();
		bindReportInstanceEventHandlers();
		bindReportGenerationEventHandlers();
		bindReportMigrationEventHandlers();
		bindReportDocumentationEventHandlers();
		bindReportPacketEventHandlers();
		bindReportScheduleEventHandlers();
		bindReportInboxEventHandlers();
		bindEntrataInsightsEventHandlers();
		bindEntrataReportResponsesEventHandlers();
		bindQuickMigrationEventHandlers();
	}


	// endregion

	// region Generic UI Functions

	function closeDialog( element ) {
		// If no element was passed in, assume that $(this) has the element
		if( 'undefined' === typeof element ) {
			element = $(this);
		}

		// If we are responding to an event, grab the target element
		if( element.hasOwnProperty( 'target' ) ) {
			element = $(element.target);
		}

		// Find the dialog widget containing the element
		if( false === $(element).hasClass('.ui-dialog-content') ) {
			element = $(element).parents('.ui-dialog-content');
		}

		// If we have a valid dialog widget, call the close method on it
		if( 0 < $(element).length ) {
			$( element ).dialog( 'close' );
		}
	}

	function closeCurtain() {
		$('div .close-button').trigger('click');
		return false;
	}

	function mouseEnterActiontip( _this ) {
		$( _this ).actiontip( 'show' );
		$( '.actiontip' ).on( 'mouseleave', function(){
			$( _this ).actiontip( 'hide' );
		});
		$( '.actiontip' ).on( 'click', function(){
			setTimeout( function(){
				$( _this ).actiontip( 'hide' );
			},300 );
		});
	}

	function mouseLeaveActiontip( _this ) {
		setTimeout( function(){
			if( !$( '.actiontip:hover' ).length ){
				$( _this ).actiontip( 'hide' );
			}
		}, 300 );
	}

	// endregion

	// region Report Navigation

	function bindReportNavigationEventHandlers() {
		var $body = $('body');
		$body.off('click', '.js-report-link').on('click', '.js-report-link', viewReportInstance );
		$body.off('click', '.js-report-action-tips').on('click', '.js-report-action-tips', closeOtherReportOptions );
		$body.off('beforeShow.actiontip', '.js-report-action-tips').on('beforeShow.actiontip', '.js-report-action-tips', updateAvailableReportOptions );
		$body.off( 'click', '.js-view-add-to-my-reports' ).on( 'click', '.js-view-add-to-my-reports', viewAddToMyReports );
		$body.off( 'click', '.js-add-to-my-reports' ).on( 'click', '.js-add-to-my-reports', addToMyReports );
		$body.off( 'click', '.js-move-to-group' ).on( 'click', '.js-move-to-group', viewMoveToAnotherGroup );
		$body.off( 'click', '.js-move-to-another-group' ).on( 'click', '.js-move-to-another-group', moveToAnotherGroup );
		$body.off('click', '.js-view-documentation').on('click', '.js-view-documentation', viewDocumentation);
		$body.off('click', '.js-view-instances').on('click', '.js-view-instances', viewInstances);
		$body.off('change', '.js-view-version-details').on('change', '.js-view-version-details', viewVersionDetails);
		$body.off('click', '.js-filter-report-list').on('click', '.js-filter-report-list', filterReportList);
		$body.off('click', '.js-failed-private-filter-action-tips').on('click', '.js-failed-private-filter-action-tips', closeOtherFailedPrivateFilterOptions );
		$body.off('click', '.js-close-sunset-colorbox').on('click', '.js-close-sunset-colorbox', closeSunsetColorbox );
	}

	function viewReportInstance() {
		let element = $("#report-details-page"),
			isLargeModalOpen = true,
			errorMessage = "<div id='optimisation-error-message' class='align-center pad20'><span>Something went wrong in displaying this page, please refresh your browser to resolve the issue</span></div>";

		var $instance				= $(this).parent(),
			title					= $instance.data('report-title'),
			instanceId				= $instance.data('report-instance-id'),
			reportId				= $instance.data('report-id'),
			reportName				= $instance.data('report-name'),
			reportType				= $instance.data('report-type'),
			reportVersionId			= $instance.data('report-version-id'),
			reportUrl				= $instance.data('report-url'),
			overrideLockedFilters	= $instance.data('override-locked-filters'),
			moduleId = $instance.data( 'module-id' ),
			url,
			arrstrOptions;

		if( reportTypes.sap === reportType ) {
			if( 'undefined' != typeof reportUrl ) {
				url = reportUrl.replace( 'sap_reportsxxx', modules.sap );
			} else {
				url = '?module=' + modules.sap + '&action=view_report&name=' + reportName + '&type=' + reportType;
			}
		} else {
			url = '?module=' + modules.instances + '&action=view_instance&name=' + reportName + '&report_instance[id]=' + instanceId + '&report_instance[report_version_id]=' + reportVersionId + '&report_instance[report_id]=' + reportId + '&report_instance[module_id]=' + moduleId + '&override_locked_filters=' + overrideLockedFilters;
		}

		arrstrOptions = {
			strUrl:url,
			title:title,
			complete: function() {
				if(isLargeModalOpen) {
					element.detach();
					let bodyDiv = $("#body");
					bodyDiv.append(errorMessage);
				}
				// If something needs to be clicked when the dialog loads, click it and remove the class so it isn't auto-clicked again
				$( '.js-click-on-load' ).removeClass( '.js-click-on-load' ).click();
				// Remove click event from all locked filters.
				$( 'i.lock' ).click( false );
				// load FusionCharts.js
				if( typeof FusionCharts === "undefined" ) {
					var fusionChartScriptFile = document.createElement( "script" );
					fusionChartScriptFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts_3.14/fusioncharts.js";
					jQuery("head").append( fusionChartScriptFile );
					$( window ).on( "load", function() {
						var fusionChartThemeFile = document.createElement( "script" );
						fusionChartThemeFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts.theme.entrata.js";
						jQuery("head").append( fusionChartThemeFile );
					});
				}
			},
			onCloseCallback: function() {
				let isReactWorkflowEnabled = $( '[name="report_instance[is_react_workflow_enabled]"]' ).val();
				isReactWorkflowEnabled && reactAbortController?.controller?.abort();

				isLargeModalOpen = false;
				$dataGroupMap = {};
                		unsetColumnSortOptions();
				if(element) {
					let errorMessage = $("#optimisation-error-message");
					errorMessage.detach();

					let bodyDiv = $("#body");
					bodyDiv.append(element);

					let listItemElement = reportId ? document.querySelector(`li[data-report-id="${reportId}"]`) : null;

					//on click of close icon - scroll the selected list/report item into view
					if(listItemElement){
						setTimeout(function(){
							listItemElement.scrollIntoView({ block: 'center', behavior: 'smooth' });
						},500);
					}
				}
			}
		};

		if( 'undefined' == typeof $( '.modal-body-container' ).html() ) {
			psi.patterns.loadLargeDialog(arrstrOptions);
		} else {
			psi.patterns.addDialogContent(arrstrOptions);
		}
	}

	function closeSunsetColorbox() {
		$( '.reports-sunset-colorbox' ).fadeOut('slow');
	}

	function closeOtherReportOptions() {
		$( '.js-report-action-tips' ).not( this ).actiontip( 'hide' );
	}

	function closeOtherFailedPrivateFilterOptions() {
		$( '.js-failed-private-filter-action-tips' ).not( this ).actiontip( 'hide' );
	}

	function updateAvailableReportOptions(e) {
		var $instance		= $(e.target).parents('.js-report-instance'),
			reportTypeId	= $instance.data('report-type'),
			instanceId		= $instance.data('report-instance-id'),
			boolUpdateAvailable		= $instance.data('update-available'),
			isQuickLink		= JSON.parse( $instance.attr('data-is-quick-link') ),
			isPrivateInstance		= $instance.data('is-private-instance'),
			isReportCategoryReadOnly = $instance.data('report-category-read-only');

		$( '.actiontip-options, .actiontip-content' ).find( '.option-list a' ).each( function() {
			var reportTypesAllowed = $( this ).data( 'report-types' );
			if( 'undefined' === typeof reportTypesAllowed || -1 !== $.inArray( reportTypeId, reportTypesAllowed ) ) {
				$( this ).show();
			} else {
				$( this ).hide();
			}

			if( reportGroupTypes.my_reports == $instance.data( 'report-group-type-id' ) ) {
				if( $( this ).hasClass( 'js-edit-instance' ) ) {
					if( 1 === isPrivateInstance ) {
						$( this ).show();
					} else {
						$( this ).hide();
					}
				}
			}

			if( isReportCategoryReadOnly ) {
				$( '.js-add-instance' ).hide();
			} else {
				$( '.js-add-instance' ).show();
			}

		} );
		// Hide report documentation link from SAP report.
		if( !boolUpdateAvailable ) {
			$( '.option-list .js-update-instance-to-latest-version' ).hide();
		}
		if( 2 === reportTypeId ) {
			$( '.js-view-documentation' ).hide();
		}

		setTimeout( function(){
			if( isQuickLink ) {
				$('.report_instance_' + instanceId + ' .js-view-quick-link').html( __( 'Remove from Quick Links' ) );
			}
		}, 50);

	}

	function addToMyReports( e ) {
		e.preventDefault();
		var boolCreateNewGroup = 0;
		if( $( '#new_report_group' ).is( ':visible' ) ) {
			boolCreateNewGroup = 1;
		} else if( '' == $( '#myreportGroupList option:selected' ).val() ) {
			$( '<p class="alert error slim">' + __( 'Please select report group' ) + '</p>' ).appendTo( $( '.js-myreport-group-form  .js-status-message-container' ) ).delay( 5000 ).fadeOut( 3000 );
			return false;
		}
		var reportGroupInstanceId = $( '#my_report_report_group_instance_id' ).val(),
			reportInstanceId = $( '#my_report_report_instance_id' ).val(),
			reportGroupId = boolCreateNewGroup ? undefined : $( '#myreportGroupList option:selected' ).val(),
			reportGroupName = $( '#new_report_group' ).val(),
			reportGroupTypeId = reportGroupTypes.my_reports,
			data = {'report_group' : { 'id' : reportGroupId, 'name' : reportGroupName, 'report_group_type_id' : reportGroupTypeId }, 'add_report_group' : boolCreateNewGroup, 'report_instance' : { 'id': reportInstanceId }, 'report_group_instance' : { 'id': reportGroupInstanceId } };

		psi.patterns.ajaxRequest( {
			url: '?module=' + modules.instances + '&action=add_to_my_reports',
			data: data,
			dataType: 'json',
			strElementSelector: '.js-myreport-group-form',
			beforeSend: function() {
				psi.patterns.showLoadingImage( { strElementSelector: '.js-myreport-group-form' } );
			},
			complete: function() {
				psi.patterns.removeLoadingImage( { strElementSelector: '.js-myreport-group-form' } );
			},
			success: function( data, status, xhr ) {
				if( data.success ) {
					$('button.ui-button').trigger('click');
					$( document ).scrollTop( 0 );
					var message = data.hasOwnProperty( 'message' ) ? __( '{%s, 0}', [data.message] ) : __( 'Report Instance added to My Reports successfully' );
					$( '<p class="alert success slim">' + message + '</p>' ).appendTo( $( '.js-status-message-container' ) ).delay( 5000 ).fadeOut( 3000 );
				} else {
					$.each( data.error, function( idx, msg ) {
						var message = ( 'string' === typeof( msg ) ) ? msg : msg.message;
						$( '<p class="alert error slim">' + message + '</p>' ).appendTo( $( '.js-myreport-group-form  .js-status-message-container' ) ).delay( 5000 ).fadeOut( 3000 );
					} );
				}
			},
			error: function( xhr, status, error ) {
				$( '<p class="alert error slim">' + error + '</p>' ).appendTo( $( '.js-myreport-group-form  .js-status-message-container' ) );
			}
		});
	}

	function viewAddToMyReports( e ) {
		e.preventDefault();
		var $instance		= $( this ).parents( '.js-report-instance' ),
			instanceId		= 0 < $instance.length ? $instance.data( 'report-instance-id' ) : $( this ).data( 'report-instance-id' ),
			groupInstanceId	= 0 < $instance.length ? $instance.data( 'report-group-instance-id' ) : $( this ).data( 'report-group-instance-id' );

		psi.patterns.loadDialog( {
			width:	590,
			height:	250,
			strUrl:	'/?module=' + modules.myReports + '&action=view_add_to_my_reports',
			title:	__( 'Add to My Reports' ),
			data:{ 'report_instance_id': instanceId, 'report_group_instance_id': groupInstanceId }
		} );
		$( '.actiontip' ).remove();
	}

	function moveToAnotherGroup ( e ) {
		e.preventDefault();
		if( '' == $( '#myreportGroupList option:selected' ).val() ) {
			$( '<p class="alert error slim">' + __( 'Please select report group' ) + '</p>' ).appendTo( $( '.js-move-to-another-group-form  .js-status-message-container' ) ).delay( 5000 ).fadeOut( 3000 );
			return false;
		}

		var reportGroupInstanceId = $( '#my_report_report_group_instance_id' ).val(),
			reportGroupId = $( '#myreportGroupList option:selected' ).val(),
			data = { 'report_group_id': reportGroupId , 'report_group_instance_id': reportGroupInstanceId };

		psi.patterns.ajaxRequest( {
			url: '?module=' + modules.instances + '&action=move_to_another_group',
			data: data,
			dataType: 'json',
			strElementSelector: '.js-move-to-another-group-form',
			beforeSend: function() {
				psi.patterns.showLoadingImage( { strElementSelector: '.js-move-to-another-group-form' } );
			},
			complete: function() {
				psi.patterns.removeLoadingImage( { strElementSelector: '.js-move-to-another-group-form' } );
			},
			success: function( data, status, xhr ) {
				if( data.error ) {
					$.each( data.error, function( idx, msg ) {
						var message = ( 'string' === typeof( msg ) ) ? msg : msg.message;
						$( '<p class="alert error slim">' + message + '</p>' ).appendTo( $( '.js-move-to-another-group-form  .js-status-message-container' ) ).delay( 5000 ).fadeOut( 3000 );
					} );
				} else {
					location.reload();
				}
			},
			error: function( xhr, status, error ) {
				$( '<p class="alert error slim">' + error + '</p>' ).appendTo( $( '.js-move-to-another-group-form  .js-status-message-container' ) );
			}
		});
	}

	function viewMoveToAnotherGroup( e ) {
		e.preventDefault();
		var $instance		= $( this ).parents( '.js-report-instance' ),
			groupId			= $instance.data( 'report-group-id' ),
			groupInstanceId	= $instance.data( 'report-group-instance-id' ),
			companyUserId	= $('select#user.form-select').val();

		psi.patterns.loadDialog( {
			width:	590,
			height:	220,
			strUrl:	'/?module=' + modules.myReports + '&action=view_move_to_another_group',
			title:	__( 'Move to Another Group ' ),
			data:{ 'report_group_instance_id': groupInstanceId, 'report_group_id': groupId, 'move_to_another_group': 1, 'company_user_id': companyUserId }
		} );
		$( '.actiontip' ).remove();
	}

	function viewDocumentation(e) {
		e.preventDefault();

		var $instance		= $(this).closest('.js-report-instance'),
			showInstances	= $(this).data('show-instances'),
			//replacing URL special characters with ASCII code.
			reportName		= encodeURIComponent( $instance.data( 'report-name' ) ),
			reportType		= $instance.data( 'report-type' ),
			reportInstanceId = $instance.data( 'report-instance-id' ),
			reportVersion	= $instance.data( 'report-version' ),
			isFromLibrary	= $(this).data( 'is-from-library' ),
			source			= $(this).data( 'source' ),
			queryString		= '&report_new_instance_id=' + reportInstanceId + '&name=' + reportName + '&version=' + reportVersion + '&type=' + reportType + '&show_instances=' + ( 'undefined' === typeof showInstances ? 1 : showInstances ) + '&is_from_library=' + isFromLibrary + '&source=' + source,
			arrstrOptions = {
				title: __( 'Report Details' ),
				strContentId: 'view_report_details',
				strUrl: '?module=' + modules.documentation + queryString,
				complete: function() {
					bindJumpToColumnOrFilter();
				}
			};

		// Open detail page in new window if we click on info button after generating report.
		if( true === $(this).children('i').hasClass( 'info' ) ) {
			psi.patterns.addDialogContent( arrstrOptions );
		} else {
			psi.patterns.loadLargeDialog( arrstrOptions );
		}

		$('.actiontip').remove();
	}

	function viewActivityLogs( instanceId ) {
		var tryCount = 0;
		var timerId = setInterval( function() {
			if( undefined === $( '.js-activity-tab-content' ).html() ) {
				if( tryCount >= 10 ) {
					clearInterval( timerId );
				}
				tryCount = tryCount + 1;
			} else {
				$( '.js-activity-logs-tab' ).trigger( 'click' );
				clearInterval( timerId );
			}
		}, 2000 );
	}

	function viewActivityLog() {
		strDialogTitle = __( 'View Log' );
		var logId = $( this ).data( 'activity-log-id' );
		var logKey = $( this ).data( 'activity-log-key' );
		psi.patterns.loadDialog( {
			width: 850,
			height: 605,
			title: strDialogTitle,
			strUrl: '?module=' + modules.instances + '&activity_log_id=' + logId + '&activity_log_key=' + logKey + '&action=view_activity_log',
			strContentId: 'view_log',
		} );
	}

	function viewInstances(e) {
		e.preventDefault();

		var $instance		= $( this ).closest( '.js-report-instance' ),
			showInstances	= $( this ).data( 'show-instances' ),
			reportName		= $instance.data( 'report-name' ),
			reportType		= $instance.data( 'report-type' ),
			reportInstanceId = $instance.data( 'report-instance-id' ),
			reportVersion	= $instance.data( 'report-version' ),
			queryString			= '&action=view_instances&name=' + reportName,
			arrstrOptions = {
				title: __( 'Report Instances' ),
				strContentId: 'view_report_instances',
				strUrl: '?module=' + modules.documentation + queryString,
				complete: function() {
					bindJumpToColumnOrFilter();
				}
			};

		// Open detail page in new window if we click on info button after generating report.
		if( true === $( this ).children( 'i' ).hasClass( 'info' ) ) {
			psi.patterns.addDialogContent( arrstrOptions );
		} else {
			psi.patterns.loadLargeDialog( arrstrOptions );
		}

		$('.actiontip').remove();
	}

	function viewVersionDetails(e) {
		e.preventDefault();
		let selectedValue = $( this ).val();
		$( 'select.js-view-version-details' ).find( 'option' ).removeAttr( 'selected' );
		$( 'select.js-view-version-details' ).val( selectedValue ).find( 'option[value=' + selectedValue + ']' ).attr( 'selected', true );

		psi.patterns.ajaxRequest( {
			strElementSelector : '#view_report_version_details',
			url : '?module=' + modules.documentation + '&report_new_instance_id=' + $( this ).data( 'report-new-instance-id' ) + '&name=' + $( this ).data( 'report-name' ) + '&action=view_version_details' + '&default_report_version_id=' + $( this ).val(),
			complete: function() {
				bindJumpToColumnOrFilter();
			}
		} );
	}

	function bindJumpToColumnOrFilter() {
		$( ".js-filter-search" ).selectCombobox({
			onSelect: function( event, selectedElement ) {
				var strElement = $( selectedElement ).attr('value'),
					strElementSelector = $( '#' + strElement ),
					fullHeight = strElementSelector[0].offsetTop;
				$('#mainWindow').scrollTop( fullHeight + 100 );
			}
		});
	}

	function filterReportList(e) {
		e.preventDefault();

		if( $(e.currentTarget).hasClass('js-bulk-update') ) {
			if( $(e.currentTarget).hasClass('js-is-reset') ) {
				$('.js-bulk-update-quick-search').val('');
				$('.js-bulk-update-filter-form input:checkbox').prop('checked', false);
			}
			psi.patterns.ajaxRequest( {
				url: '?module=' + modules.instances + '&action=edit_bulk_instances',
				beforeSend: function() {
					psi.patterns.showLoadingImage({ strElementSelector: '#bulk_update' });
				},
				data: $('.js-bulk-update-filter-form').serialize(),
				success: function( strResponse ) {
					$('#bulk_update').html(strResponse);
					psi.patterns.removeLoadingImage({ strElementSelector: '#bulk_update' });
				},
				error: function( strUrl, strResponse ) {

				}
			} );

			return true;
		} else {
			if( e.currentTarget.baseURI.includes( modules.packets ) ) {
				$( '.js-filter-report-form' ).attr( 'action', '?module=' + modules.packets );
			} else if( e.currentTarget.baseURI.includes( modules.company ) ) {
				$( '.js-filter-report-form' ).attr( 'action', '?module=' + modules.company );
			} else {
				$( '.js-filter-report-form' ).attr( 'action', '?module=' + modules.reportLibrary );
			}
			$( '.js-filter-report-form' ).submit();
		}
	}

	function clickHandlerReportLink( obj, container ) {
		let element = $("#report-details-page"),
			isLargeModalOpen = true,
			errorMessage = "<div id='optimisation-error-message' class='align-center pad20'><span>Something went wrong in displaying this page, please refresh your browser to resolve the issue</span></div>";

		psi.patterns.loadLargeDialog({
			strUrl:obj.report_url,
			title:obj.report_title,
			complete: function() {
				if(isLargeModalOpen) {
					element.detach();
					let bodyDiv = $("#body");
					bodyDiv.append(errorMessage);
				}

				// If something needs to be clicked when the dialog loads, click it and remove the class so it isn't auto-clicked again
				$( '.js-click-on-load' ).removeClass( '.js-click-on-load' ).click();
				// Remove click event from all locked filters.
				$( 'i.lock' ).click( false );
				// load FusionCharts.js
				if( typeof FusionCharts === "undefined" ) {
					var fusionChartScriptFile = document.createElement( "script" );
					fusionChartScriptFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts_3.14/fusioncharts.js";
					jQuery("head").append( fusionChartScriptFile );
					setTimeout(function () {
						var fusionChartThemeFile = document.createElement( "script" );
						fusionChartThemeFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts.theme.entrata.js";
						jQuery("head").append( fusionChartThemeFile );
					}, 600 );
				}
			},
			onCloseCallback: function() {
				isLargeModalOpen = false;
				$dataGroupMap = {};
				if(element) {
					let errorMessage = $("#optimisation-error-message");
					errorMessage.detach();

					let bodyDiv = $("#body");
					bodyDiv.append(element);
				}
			}
		});
	}

	// endregion

	// region Report Groups
	function bindReportGroupEventHandlers() {
		var $body = $('body');
		$body.off( 'click', '.js-add-group' ).on( 'click', '.js-add-group', addReportGroup );
		$body.off( 'click', '.js-edit-group' ).on( 'click', '.js-edit-group', editReportGroup );
		$body.off( 'click', '.js-submit-group' ).on( 'click', '.js-submit-group', submitReportGroup );
		$body.off( 'submit', '.js-report-group-form' ).on( 'submit', '.js-report-group-form', submitReportGroup );
		$body.off( 'click', '.js-delete-group .actions-btn' ).on( 'click', '.js-delete-group .actions-btn', deleteReportGroup );
		$body.off( 'click', '#manage-groups' ).on( 'click', '#manage-groups', manageReportGroup );
		$body.off( 'click', '#update-report-groups' ).on( 'click', '#update-report-groups', updateManageReportGroup );
		$body.off( 'click', '.js-form-cancel-delete-group' ).on( 'click', '.js-form-cancel-delete-group', confirmCancelDeleteGroup );
	}

	function addReportGroup() {
		var reportGroupType = $(this).data('report-group-type') || reportGroupTypes.company;
		let strUserIdParam = '';
		if( $('select[name="report_filter[user]"]').val() ) {
			strUserIdParam = '&company_user_id=' + $('select[name="report_filter[user]"]').val();
		}
		if( 'my_reports' == $( '.js-add-to' ).find( ':selected' ).val() ) {
			reportGroupType = reportGroupTypes.my_reports;
		}
		psi.patterns.loadDialog({
			width:	530,
			height:	250,
			strUrl:	'/?module=' + modules.groups + '&action=create_or_edit&report_group[report_group_type_id]=' + reportGroupType + strUserIdParam,
			title:	__( 'Add Report Group' )
		});

		return false;
	}

	function editReportGroup() {
		psi.patterns.loadDialog({
			width:	530,
			height:	250,
			strUrl:	'/?module=' + modules.groups + '&action=create_or_edit&report_group[id]=' + $(this).parents('.js-report-group').data('report-group-id'),
			title:	__( 'Edit Report Group Name' )
		});

		return false;
	}

	function manageReportGroup() {
		//if user has searched anything reload the company report with default listing else normal js script for sortable ui
		if($( '.js-company-search-result' )[0] ) {
			sessionStorage.setItem( "manage-group-clicked" , "1" );
			location.href = '/?module=' + modules.company;
		} else {
			$( '.js-company-page-action , .js-company-search-bar ' ).addClass( 'hide' );
			$( '.js-report-group' ).addClass( 'report-group-move' );
			$( '.js-manage-group-save' ).removeClass( 'hide' );
			$( '.report-list' ).hide();
			$( '#report_groups_list br' ).remove();
			$( '.edit-groups-manage' ).addClass( 'js-bucket border' ).attr( 'style', 'margin-top:10px !important; min-height:25px;' );
			$( '.js-bucket' ).sortable( {
				connectWith: '.js-bucket'
			} );
			psi.patterns.removeLoadingImage( { strElementSelector: '#report_groups_list' } );
		}
	}

	function updateManageReportGroup(){
		submitManageReportGroup();
		psi.patterns.ajaxRequest( {
			url: '/?module=' + modules.groups + '&action=insert_or_update',
			strElementSelector: '#report_groups_list',
			data: strReportGroupPositions + 'edit_report_groups=1',
			success: function( response ) {
				location.reload();
			}
		} );
	}

	function submitManageReportGroup () {
		var reportGroupPosition = '',
			currentPosition = 1,
			sideDisplay = 'left';

			$( '.edit-groups-manage .group-container h5.js-report-group' ).each( function() {
				if( $( this ).attr( 'data-report-group-id' ) !== '' ) {
						sideDisplay = 'left';
						if( $( this ).parents( '.column-right' ).length ) {
							sideDisplay = 'right';
						}
					if( parseInt( $( this ).attr( 'value' ) ) !== currentPosition || parseInt( $( this ).attr( 'value' ).split( '-' )[0] ) !== currentPosition || $( this ).attr( 'value' ) != currentPosition + '-' + sideDisplay ) {
						reportGroupPosition += 'report_group_id[' + $( this ).attr( 'data-report-group-id' ) + ']=' + currentPosition + '-' + sideDisplay + '&';
					}
					currentPosition = currentPosition + 1;
			}
		} );
		strReportGroupPositions = reportGroupPosition;
	}

	function submitReportGroup( e ) {
		e.preventDefault();

		$( '.js-create-edit-group-error' ).html('');

		// TODO: client-side validation? length (50), characters ([0-9a-zA-Z_ ]{1,50}), check groups on same page

		var $this = $(this);
		var reportGroupTypeId = $('.js-report-group-form').find( 'input[name="report_group[report_group_type_id]"]' ).val();

		psi.patterns.ajaxRequest({
			type: 'post',
			url: '/?module=' + modules.groups + '&action=insert_or_update',
			strElementSelector: '.js-report-group-form',
			data: $('.js-report-group-form').serialize(),
			dataType: 'json',
			complete: function() {
				psi.patterns.removeLoadingImage({
					strElementSelector: '.js-report-group-form'
				});
			},
			success: function( response ) {
				if( false === response.hasOwnProperty( 'error' ) ) {
					// If successful, close the dialog, refresh the screen
					closeDialog( $this );
					if( $( '.js-create-edit-instance-form' ).length > 0 ) {
						if( reportGroupTypes.my_reports == reportGroupTypeId ) {
							$( '.js-create-edit-instance-form' ).find( '#my_reports_groups' ).append( $( "<option></option>" ).attr( "value", response.data.id ).text( response.data.group_name ).prop( "selected", "selected" ) );
						} else {
							$( '.js-create-edit-instance-form' ).find( '#company_reports_groups' ).append( $( "<option></option>" ).attr( "value", response.data.id ).text( response.data.group_name ).prop( "selected", "selected" ) );
						}
					} else {
						psi.patterns.showLoadingImage( { strElementSelector: '.view-data-content' } );
						window.location.reload();
					}
				} else {
					// If errors occurred, display the error in the dialog
					for( var key in response.error ) {
						if( !response.error.hasOwnProperty( key ) ) continue;
						$( '.js-create-edit-group-error' ).append( '<p class="alert error slim">' + __( response.error[key].message ) + '</p>' );
					}
				}
			},
			error: function( xhr ) {
				console.log( xhr.responseText );
			}
		});
	}

	function confirmDeleteGroup(e,reportGroupId) {
		closeDialog( e );
		psi.patterns.loadDialog({
			width:	530,
			height:	250,
			strUrl:	'/?module=' + modules.groups + '&action=create_or_edit&my_reports_delete_empty_group=1&report_group[id]=' + reportGroupId,
			title:	__( 'Confirm Delete Report Group' ),
			close:	function( e, ui ) {
				location.reload();
			}
		});

		return false;

	}

	function confirmCancelDeleteGroup(e){
		var reportGroupId = $('.js-form-cancel-delete-group').data('report-group-id');
		$('li[data-report-group-id = ' + reportGroupId + ']').empty().html('No instances in this group');
		closeDialog( e );
	}

	function deleteReportGroup() {
		var $this			= $(this),
			$tip			= $this.parents('.tip'),
			$deleteButton	= $this.parents('.add-tip');

		// Hide the tooltip - this logic is the same as the cancel button onclick
		$tip.parent().css('opacity','');
		$tip.remove();

		// Send the delete request
		psi.patterns.ajaxRequest({
			type: 'post',
			url: '/?module=' + modules.groups + '&action=delete',
			strElementSelector: '.js-report-group-form',
			data: $('.js-report-group-form').serialize(),
			dataType: 'json',
			complete: function() {
				psi.patterns.removeLoadingImage({
					strElementSelector: '.js-report-group-form'
				});
			},
			success: function( response ) {
				if( false === response.hasOwnProperty( 'error' ) ) {
					// If successful, close the dialog, refresh the screen
					closeDialog( $deleteButton );
					window.location.reload();
				} else {
					// If errors occurred, display the error in the dialog
					$( '.js-create-edit-group-error' ).html('');
					$( '.js-create-edit-group-error' ).append( '<p class="alert error slim">' + response.message + '</p>' );
					$( '.js-create-edit-group-error' ).fadeIn( 3000 );
				}
			},
			error: function( strResponse ) {
				// TODO: Show a generic error message in the js-create-edit-group-error area, saying Entrata has been notified or something
				$('.ui-icon-closethick').trigger('click');
				var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );
				$( '.js-status-message-container' ).html( '' );
				if( null != parsedJson.error ) {
					$( window ).scrollTop( 0 );
					for( i = 0; i < parsedJson.error.length; i++ ) {
						var error = parsedJson.error[i];
						$( window ).scrollTop( 0 );
						$( '.js-status-message-container' ).append( '<p class="alert error slim"><i></i>' + __( 'Something went wrong and Entrata has been notified.' ) + '</p>' );
					}
					$( '.js-status-message-container' ).fadeIn().fadeOut( 3000 );
				}
			}
		});
	}
	// endregion

	// region Report Instances

	function bindReportInstanceEventHandlers() {
		var $body = $('body');

		$body.off('click', '.js-add-instance').on('click', '.js-add-instance', addReportInstance);
		$body.off('click', '.js-edit-instance').on('click', '.js-edit-instance', editReportInstance);
		$body.off('click', '.js-update-versions').on('click', '.js-update-versions', bulkEditReportInstance);
		$body.off('click', '.js-update-instance-to-latest-version').on('click', '.js-update-instance-to-latest-version', updateInstanceToLatestVersion);
		$body.off('click', '.js-bulk-update-instances').on('click', '.js-bulk-update-instances', bulkUpdateReportInstance);
		$body.off('click', '.js-confirm-delete-instance').on('click', '.js-confirm-delete-instance', confirmDeleteInstance);
		$body.off('click', '.js-confirm-delete-migration-filter').on('click', '.js-confirm-delete-migration-filter', confirmDeleteMigrationFilter);
		$body.off('click', '.js-delete-instance .actions-btn').on('click', '.js-delete-instance .actions-btn', deleteReportInstance);
		$body.off( 'click', '.js-version-data-view-more' ).on( 'click', '.js-version-data-view-more', showVersionDataViewMore );
		$body.off( 'click', '.js-update-to-latest-version' ).on( 'click', '.js-update-to-latest-version', showUpdateToLatestVersion );

		$body.off('click', '.js-insert-update-instance').on('click', '.js-insert-update-instance', submitReportInstanceNew);

		$body.off( 'change', '.js-version-selector' ).on( 'change', '.js-version-selector', getExpirationDetails );
		$body.off( 'click', '#is-auto-update-report-version', isAutoUpdate ).on( 'click', '#is-auto-update-report-version', isAutoUpdate );
		$body.off( 'click', '.js-lock').on( 'click', '.js-lock', toggleFilterLock );
		$body.off( 'click', '.js-show-config-filter' ).on( 'click', '.js-show-config-filter', showConfigFilterLock );

		$body.off('click', '.js-dataset-tabs li').on('click', '.js-dataset-tabs li', displayOptionsTabClick);
		$body.off('click', '.js-active-col').on('click', '.js-active-col', displayOptionsCheckBoxToggle);
		$body.off('click', '.js-sort-order-container li').on('click', '.js-sort-order-container li', displayOptionsSortOrderClick);
		$body.off('change', '.js-sort-column').on('change', '.js-sort-column', displayOptionsGlobalOptionChanged('.js-sort-column'));
		$body.off('change', '.js-subtitle-option').on('change', '.js-subtitle-option', displayOptionsGlobalOptionChanged('.js-subtitle-option'));
		$body.off( 'change', '.js-round-currency-to' ).on( 'change', '.js-round-currency-to', displayOptionsGlobalOptionChanged( '.js-round-currency-to' ) );

		$body.off('click', '.js-column-name').on('click change paste keyup input', '.js-column-name', setRenameFlag);
		$body.off('click', '.js-add-formula, .js-edit-formula').on('click', '.js-add-formula, .js-edit-formula', addEditFormula);
		$body.off('click', '.js-insert-update-formula').on('click', '.js-insert-update-formula', insertUpdateFormula);
		$body.off('click', '.js-condensed-description').on('click', '.js-condensed-description', showOrHideDescription);
		$body.off('click', '.graph').on('click', '.graph', showHideGraph);
		$body.off('click', '.js-view-quick-link').on('click', '.js-view-quick-link', viewQuickLink);

		//View Instance Filter tab event handlers
		$body.off('click', '.tab-filters').on('click', '.tab-filters', tabReportFilters);
		$body.off('click', '.tab-display').on('click', '.tab-display', tabDisplayOptions);

		$body.off('click', '.js-view-as-user-or-group').on('click', '.js-view-as-user-or-group', viewAsCompanyUserOrGroup);
		$body.off('click', '.js-update-company-reports-view').on('click', '.js-update-company-reports-view', updateCompanyReportsView);
		$body.off('click', '.js-return-my-view').on('click', '.js-return-my-view', returnToMyView);
		$body.off( 'click', '#addbutton' ).on( 'click', '#addbutton', updatefiltertabwidth );

		//New Instance Filter tab event handlers
		$body.off('click', '.details-tab').on('click', '.details-tab', viewDetailsTab);
		$body.off('click', '.filters-tab').on('click', '.filters-tab', viewFiltersTab);
		$body.off('click', '.display-tab').on('click', '.display-tab', viewDisplayTab);
		$body.off( 'click', '.js-activity-logs-tab' ).on( 'click', '.js-activity-logs-tab', viewActivityLogsTab );
		$body.off( 'click', '.js-view-activity-log' ).on( 'click', '.js-view-activity-log', viewActivityLog );
		$body.off('click', '.preview-report').on('click', '.preview-report', previewReport);
		$body.off('change', '.js-subtitle-option').on('change', '.js-sort-column', updateSecondaryColumnsToDropdown);

		// Add instance to Company Reports/Packets
		$body.off( 'change', '.js-add-to' ).on( 'change', '.js-add-to', addInstanceTo );

		$body.off( 'change', '.js-company-group-user' ).on( 'change', '.js-company-group-user', checkUncheckCompanyUsers );

		$body.off( 'mouseup', '.#report_filterproperty_group_ids div.form-multiselectbox > ul li' ).on('mouseup','#report_filterproperty_group_ids div.form-multiselectbox > ul li', showReportPacketValidationForInstance);
		// Check/Uncheck all in Company Reports bulk update / update to latest version.
		$body.off( 'click', '.js-update-check-all, .js-update-check' ).on( 'click', '.js-update-check-all, .js-update-check', checkUncheckBulkUpdateInstance );

	}

	function updateSecondaryColumnsToDropdown() {
		var strSelectedPrimarySort      = $("#primary_sort option:selected").val();
		var strSelectedSecondarySort    = $("#secondary_sort option:selected").val();

		$( '#secondary_sort' ).html('').append( $( '<option>', {
			value: '0',
			text: __( 'None' )
		} ) );
		$( '.js-secondary-sort-data option' ).each( function() {
			var strKey = $( this ).val();
			var strColumn = $( this ).text();

			if( strKey != strSelectedPrimarySort ) {
				var boolSelected = false;
				if( strKey == strSelectedSecondarySort ) {
					boolSelected = true;
				}
				$( '#secondary_sort' ).append( $( '<option>', {
					value: strKey,
					text: strColumn,
					selected: boolSelected
				} ) );
			}
		} );
	}

	function checkUncheckCompanyUsers(e) {
		if( 'company_group' == $( this ).data( 'type' ) ) {
			var groupId = $( this ).data( 'group-id' ).toString();
			var checkedGroup = $( this ).find( 'label' ).hasClass( 'selected' );
			$( 'ul.js-company-user > li' ).each( function() {
				let current = $( this );
				let strGroupIds = current.data( 'user-group-ids' ).toString();
				let arrGroupIds = strGroupIds.split( ',' );
				arrGroupIds = arrGroupIds.filter( Boolean );
				if( -1 !== $.inArray( groupId, arrGroupIds ) ) {
					if( checkedGroup ) {
						current.find( 'input[type=checkbox]' ).prop( 'checked', true );
					} else {
						let otherGroupSelected = updateCheckUncheckCompanyUsers( arrGroupIds );
						if( !otherGroupSelected ) {
							current.find( 'input[type=checkbox]' ).prop( 'checked', false );
						}
					}
				}
			});
		}
	}

	function updateCheckUncheckCompanyUsers( arrGroupIds ) {
		let otherGroupSelected = false;
		for( let intIndex = 0; intIndex < arrGroupIds.length; ++intIndex ) {
			let grpItem = $( "ul.js-company-group li[data-group-id='" + arrGroupIds[intIndex] + "']" );
			otherGroupSelected = grpItem.find( 'label' ).hasClass( 'selected' );
			if ( otherGroupSelected ) {
				break;
			}
		}
		return otherGroupSelected;
	}

	function addInstanceTo() {
		var value = $(this).val();

		$( 'select#company_reports_groups' ).attr( 'name', 'report_group_instance[report_new_group_id]' );
		$( 'select#company_reports_groups' ).attr( 'disabled', false );
		$( 'select#company_reports_groups' ).removeClass( 'hide' );
		$( 'select#my_reports_groups' ).addClass( 'hide' );
		$( 'select#my_reports_groups' ).attr( 'disabled', true );
		$( 'select#my_reports_groups' ).attr( 'name', 'my_report_group_instance[report_new_group_id]' );
		$( '.user-type' ).parent().css( 'visibility', 'visible' );
		$( '.my-company-group-label' ).html( __( 'Company' ) );
		$( '.info-add-instance-to-my-reports' ).addClass( 'hide' );
		if( 'both' === value ) {
			$( '.js-packets').removeClass( 'hide' );
			$( '.js-company').removeClass( 'hide' );
			$('select.report_instance_group option').attr("disabled", false);
			$( '.js-packet-options :input[type=checkbox]' ).attr("disabled", false);
		} else if( 'my_reports' === value ) {
			$( '.js-company' ).removeClass( 'hide' );
			$( '.js-packets').addClass( 'hide' );
			$( 'select.report_instance_group option').attr( 'disabled', false );
			$( '.js-packet-options :input[type=checkbox]' ).attr( 'disabled', true );
			$( 'select#company_reports_groups' ).addClass( 'hide' );
			$( 'select#company_reports_groups' ).attr( 'disabled', true );
			$( 'select#company_reports_groups' ).attr( 'name', 'company_report_group_instance[report_new_group_id]' );
			$( 'select#my_reports_groups' ).attr( 'name', 'report_group_instance[report_new_group_id]' );
			$( 'select#my_reports_groups' ).attr( 'disabled', false );
			$( 'select#my_reports_groups' ).removeClass( 'hide' );
			$( '.user-type' ).parent().css( 'visibility', 'hidden' );
			$( '.my-company-group-label' ).html( __( 'My' ) );

			if( 0 === $( 'div.js-company .js-add-group' ).length ) {
				$( '#my_reports_groups' ).after( '<a class="margin5-top left js-add-group">' + __( 'Add Group' ) + '</a>' );
			}

			if( '' == $( '.js-report-instance-id' ).val() ) {
				$( '.info-add-instance-to-my-reports' ).removeClass( 'hide' );
			}
		} else {
			$( '.js-company' ).removeClass( 'hide' );
			$( '.js-packets').addClass( 'hide' );
			$('select.report_instance_group option').attr("disabled", false);
			$( '.js-packet-options :input[type=checkbox]' ).attr("disabled", true);

		}
	}

	function previewReport() {
		validateInstance( 'generate', true);
	}

	function viewDetailsTab() {
		var $this = $( '.details-tab' ),
			$parent = $this.parent();
		$this.addClass( 'selected' ).siblings().removeClass( 'selected' );
		$parent.next( 'div' ).children( '.details' ).fadeIn();
		$parent.next( 'div' ).children( '.filters, .display, .js-activity-tab-content' ).hide();
		$parent.next( 'div' ).next( '.filters, .display, .js-activity-tab-content' ).hide();
	}

	function viewFiltersTab( boolIsFromGenerate ) {
		if( 'undefined' === typeof boolIsFromGenerate ) {
			boolIsFromGenerate = false;
		}

		var $this = $('.filters-tab'),
			$parent = $this.parent();
		if( true !== boolIsFromGenerate ) {
			if( false === validateInstance() ) return false;
		}
		$this.addClass( 'selected' ).siblings().removeClass( 'selected' );
		$parent.next( 'div' ).children( '.filters' ).fadeIn();
		$parent.next( 'div' ).next( '.filters' ).fadeIn();
		$parent.next( 'div' ).children( '.display, .details, .js-activity-tab-content' ).hide();
	}

	function viewDisplayTab( e ) {
		var $this = $( '.display-tab' ),
			$parent = $this.parent();
		if( false === validateInstance() ) return false;
		$this.addClass( 'selected' ).siblings().removeClass( 'selected' );
		$( '.js-tab-display' ).fadeIn();
		$( '.js-tab-filters, .details, .js-activity-tab-content' ).hide();
		reloadDisplayOptions( e, true );
	}

	function viewActivityLogsTab() {
		var $this = $( '.js-activity-logs-tab' );
		var instanceId			= $( '.js-report-instance-id' ).val();
			$this.addClass( 'selected' ).siblings().removeClass( 'selected' );
		$( '.js-activity-tab-content' ).fadeIn();
		$( '.details, .js-tab-filters, .js-tab-display' ).hide();
		if( 0 === $( '.js-activity-tab-content table' ).length ) {
			loadActivityLogs( instanceId );
		}

	}

	function submitReportInstanceNew() {
		validateInstance('save');
	}

	function viewAsCompanyUserOrGroup(e) {
		psi.patterns.bindEssentials();
		psi.patterns.loadDialog({
			title: __( 'View as User or User Group' ),
			strContentId: 'view_as_user_or_group',
			strUrl: '?module=' + modules.company + '&action=view_as_user_or_group',
			width: 530,
			height: 400
		});
	}

	function updateCompanyReportsView(e) {
		e.preventDefault();
		var userGroupContainer	= $('#js-update-company-reports-view-form'),
			data = userGroupContainer.serialize(),
			userGroupInput = userGroupContainer.find('#js-user-or-group-input'),
			name = userGroupInput.data('user_or_group_name');

		if( '' === userGroupInput.val() ) {
			userGroupContainer.find('.alert.error').removeClass('hide');
			userGroupContainer.find('.alert.error').text( __( 'Please select User or User Group' ) );
			return false;
		}

		psi.patterns.ajaxRequest( {
			url: '/?module=' + modules.company + '&is_user_view=1&user_or_group_name=' + name,
			dataType: 'text',
			data: data,
			method: 'post',
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '#view_as_user_or_group' });
			},
			success: function( response ) {
				psi.patterns.removeLoadingImage( {
					strElementSelector: '#view_as_user_or_group'
				} );
				var userOrGroupView = document.open("text/html", "replace");
				userOrGroupView.write(response);
				userOrGroupView.close();
			}
		} );
	}

	function returnToMyView() {
		window.location.href = '/?module=' + modules.company;
	}

	function tabReportFilters() {
		$( this ).addClass( 'selected' ).siblings().removeClass( 'selected' );
		$( '.js-tab-filters' ).fadeIn();
		$( '.js-tab-display, .js-activity-tab-content' ).hide();
		$( '.js-report-version-selector-container' ).show();
	}

	function tabDisplayOptions( e ) {
		e.is_new_instance_view = false;
		$( this).addClass( 'selected' ).siblings().removeClass( 'selected' );
		$( '.js-tab-display' ).fadeIn();
		$( '.js-tab-filters, .js-activity-tab-content, .js-report-version-selector-container' ).hide();
		reloadDisplayOptions( e, true );
		updateSecondaryColumnsToDropdown();
	}

	function viewQuickLink() {
		var $menu = $(this).closest('.js-report-instance'),
			isQuickLink = $menu.attr('data-is-quick-link'),
			intReportNewInstanceId = $menu.data('report-instance-id'),
			$messageHolder = $( '.js-status-message-container' ),
			intCompanyUserId = $('select#user.form-select').val();
		$( '.js-report-action-tips' ).actiontip( 'hide' );
		psi.patterns.showLoadingImage( {
			strElementSelector: $menu
		} );

		$.ajax( {
			url: '/?module=' + modules.myReports + '&action=manage_quick_link&report_new_instance_id=' + intReportNewInstanceId + '&is_quick_link=' + isQuickLink + '&company_user_id=' + intCompanyUserId,
			dataType: 'json',
			method: 'post',
			success: function( response ) {
				psi.patterns.removeLoadingImage( {
					strElementSelector: $menu
				} );

				if( response.hasOwnProperty( 'isQuickLink' ) ) {
					$menu.attr( 'data-is-quick-link', response.isQuickLink );
				}
				if( response.hasOwnProperty( 'message' ) ) {
					$messageHolder.html( '<p class="alert success slim" id="error_msg"><span class="success text-green font15 "><i></i>' + response.message + '</span></p>' );
				}

				$messageHolder.find('p').delay( 2500 ).fadeOut( 1000, function() {
					$( this ).remove();
				} );
			},
			error: function( xhr, status, error ) {
				// This happens if the server has an error, or the response is not json
				$messageHolder.html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 "><i></i>' + error + '</span></p>' );

				$messageHolder.find('p').delay( 2500 ).fadeOut( 1000, function() {
					$( this ).remove();
				} );
			}
		} );
	}

	function showOrHideDescription() {

		// Time out is needed to get the toggled value of 'Instance Description' toggle filter.
		setTimeout( function() {
			var strModule								= window.location.href.split('module=')[1],
				boolCondensedMyReportsDescription		= $( 'input[name="condensed_my_reports_description[]"]:checked' ).length > 0 ? 1 : 0,
				boolCondensedLibraryReportsDescription	= $( 'input[name="condensed_library_description[]"]:checked' ).length > 0 ? 1 : 0,
				boolCondensedCompanyReportsDescription	= $( 'input[name="condensed_company_reports_description[]"]:checked' ).length > 0 ? 1 : 0;

			psi.patterns.ajaxRequest( {
				url: '?module=' + strModule + '&action=condensed_description_view',
				data: {
					'condensed_company_reports_instance_description' : boolCondensedCompanyReportsDescription,
					'condensed_my_reports_instance_description' : boolCondensedMyReportsDescription,
					'condensed_report_library_description' : boolCondensedLibraryReportsDescription
				},
				beforeSend: function() {
					psi.patterns.showLoadingImage( { strElementSelector: '.view-data-content' } );
				},
				success: function(e) {
					if( boolCondensedCompanyReportsDescription || boolCondensedMyReportsDescription || boolCondensedLibraryReportsDescription ) {
						$( '.js-report-description' ).show();
					} else {
						$( '.js-report-description' ).hide();
					}
				},
				complete: function() {
					psi.patterns.removeLoadingImage( { strElementSelector: '.view-data-content' } );
				},
				error: function( strResponse ) {
					$('.ui-icon-closethick').trigger( 'click' );
					var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );
					$( '.js-status-message-container' ).html( '' );
					if( null != parsedJson.error ) {
						$( window ).scrollTop( 0 );
						for( i = 0; i < parsedJson.error.length; i++ ) {
							var error = parsedJson.error[i];
							$( window ).scrollTop( 0 );
							$( '.js-status-message-container' ).append( '<p class="alert error slim"><i></i>' + __( 'Something went wrong and Entrata has been notified.' ) + '</p>' );
						}
						$( '.js-status-message-container' ).fadeIn().fadeOut( 3000 );
					}
				}
			} );
		}, 300 );

	}

	function showHideGraph(  ) {
		var parent = $(this).parents('.view-data-container');
		parent.find('.dark-graph').toggle();
		parent.find('.dark-table').toggle();
		parent.find('.graph-view').toggle();
		parent.find('.view-data-table-header table').toggle();
		psi.patterns.setEqualHeights( { elementSelector: '.view-data-container .equal-heights' } );

		if( $(".view-data-container").height() > ( $( window ).height() - 50 ) ) {
			$(".view-data-container").scroll();
		}
		setTimeout( function() {
			$( ".js-maintain-scrollbar-wrapper" ).css( { top: ( $( ".timestamp" ).position().top + 40 ) + 'px' } );
		}, 500 );
	}

	function showConfigFilterLock() {
		var configFilterContainer = $('.js-filters-config'),
			boolIsShowConfigFilter = $('#boolIsShowConfigFilter').val();
		if( 0 == boolIsShowConfigFilter ) {
			configFilterContainer.find('.js-lock').removeClass('hide');
			$('.js-filters-config').find('.js-lock + input').removeAttr( 'disabled' );
		} else {
			configFilterContainer.find('.js-lock').addClass('hide');
			$('.js-filters-config').find('.js-lock + input').attr( 'disabled', 'disabled' );
		}
	}

	function addReportInstance(e) {
		e.preventDefault();

		var is_from_view_report = $(this).data('is-from-view-report'),
			report_form = $( 'form#report_form'),
			data = {},
			form_data = {},
			reportTitle,
			reportTypeId,
			title = __( 'Create Report Instance' );

		if( 'undefined' !== typeof is_from_view_report && 'undefined' !== typeof report_form ) {
			reportTitle = report_form.find( 'input[name="report_title"]' ).val();
			reportTypeId = report_form.find( 'input[name="report_type_id"]' ).val();

			/*
			 Copy all the filter and display options to instance setup screen
			 Using serialize() instead of serializeObject() to avoid conversion of duplicate input fields to array
			 */
			form_data = report_form.serialize() + '&';

			data.is_new_instance_view = 1;
			data.add_new_instance = true;
			data.show_notification_message = 1;
			data.is_reports_library = 0;
			data.override_locked_filters = 0;

			$(".filter-overlay").remove();
			$(".view-data-filters").hide();
		} else {
			var $instance = $( this ).parents( '.js-report-instance' ),
				reportId = $instance.data( 'report-id' ),
				moduleId = $instance.data( 'module-id' ),
				instanceId = $instance.data( 'report-instance-id' ),
				groupInstanceId = $instance.data( 'report-group-instance-id' ),
				reportGroupTypeId = $( this ).data( 'report-group-type-id' );

			reportTypeId = $instance.data( 'report-type' );
			reportTitle = $instance.data( 'report-title' );

			if( reportGroupTypeId === reportGroupTypes.my_reports ) {
				title = __( 'Add to My Reports' );
			}

			data = {
				is_new_instance_view: 1,
				report_instance: {
					report_id: reportId,
					module_id: moduleId
				},
				add_new_instance: true,
				report_group_type_id: reportGroupTypeId,
				report_filter_id: instanceId
			};

			if( 'undefined' !== typeof instanceId ) {
				data.report_instance.id = instanceId;
			}

			if( 'undefined' !== typeof groupInstanceId ) {
				data.report_group_instance = {
					id: groupInstanceId
				};
			}
		}
		if( $( '.modal-large' ).length ) {
			$( '.modal-large' ).remove();
		}

		psi.patterns.loadLargeDialog({
			title: title + ' > ' + reportTitle,
			strContentId: 'add_report_instance',
			strUrl: '?module=' + modules.instances + '&report_type_id=' + reportTypeId,
			data: form_data + $.param( data ),
			complete: function() {
				$( '.js-add-to' ).trigger( 'change' );
			}
		});

		$('.actiontip').remove();
	}

	function editReportInstance( e ) {
		// If this function is called from dialog then 'e' is a created object and values are available directly in 'e'.
		var $this,
			$instance,
			reportGroupTypeId,
			reportTypeId,
			reportTitle,
			instanceId,
			moduleId,
			groupInstanceId,
			isDuplicate,
			module,
			arrstrOptions,
			isUserView,
			selectedCompanyGroup = $( this ).data( 'view-company-group' ),
			selectedCompanyUser = $('select#user.form-select').val() ?? $( this ).data( 'view-company-user' ) ?? false;

		if( e.reportGroupTypeId ) {
			$this 				= e,
			reportGroupTypeId 	= $this.reportGroupTypeId,
			reportTypeId 		= $this.reportTypeId ,
			reportTitle 		= $this.reportTitle,
			instanceId 			= $this.instanceId,
			moduleId 			= $this.moduleId,
			groupInstanceId 	= $this.groupInstanceId,
			isDuplicate 		= $this.isDuplicate;
		} else {
			e.preventDefault();

			$instance			= $( this ).parents( '.js-report-instance' ),
			reportGroupTypeId	= $( this ).data( 'report-group-type-id' ),
			reportTypeId		= $instance.data( 'report-type' ),
			reportTitle			= $instance.data( 'report-title' ),
			instanceId			= $instance.data( 'report-instance-id' ),
			moduleId			= $instance.data( 'module-id' ),
			groupInstanceId		= $instance.data( 'report-group-instance-id' ),
			isDuplicate			= $( this ).data( 'is-duplicate' );
		}

		if( '' != selectedCompanyGroup ) {
			selectedCompanyGroup = '&company_group=' + selectedCompanyGroup;
		}

		if( '' != selectedCompanyUser ) {
			selectedCompanyUser = '&company_user=' + selectedCompanyUser;
		}

		module				= modules.instances,
		isUserView			= $( this ).data( 'is-user-view' ),
		arrstrOptions = {
			title: __( 'Edit Report Instance' ) + ' > ' + reportTitle,
			strContentId: 'add_report_instance',
			strUrl: '?module=' + module + '&report_type_id=' + reportTypeId + '&is_user_view=' + isUserView + selectedCompanyGroup + selectedCompanyUser,
			data: {
				is_new_instance_view: 1,
				report_instance: {
					id: instanceId,
					module_id: moduleId
				},
				report_group_instance: {
					id: groupInstanceId
				},
				report_group_type_id: reportGroupTypeId,
				is_duplicate: isDuplicate
			},
			complete: function() {
				checkGroupHeader();
				//Added this to fix mouse handler events in case of multiple windows/overlay 2220669
				$( '#add_report_instance' ).parents( '.modal-body-container' ).find( '.filter-overlay' ).css( 'z-index', '1' );
				$( '.js-add-to' ).trigger( 'change' );
			},
			onCloseCallback: function() {
				$dataGroupMap = {};
			}
		};

		if( 'undefined' == typeof $( '.modal-body-container' ).html() ) {
			psi.patterns.loadLargeDialog( arrstrOptions );
		} else {
			psi.patterns.addDialogContent( arrstrOptions );
		}
		if( $( this ).data( 'is-activity' ) ) {
			viewActivityLogs( instanceId );
		}
		$( '.actiontip' ).remove();

	}

	function bulkEditReportInstance(e) {
		e.preventDefault();
		var $instance			= $(this).parents('.js-report-instance'),
			reportId	= $instance.data('report-id'),
			strReportId = '';
		if( null !== reportId ) {
			strReportId = '&report_id=' + reportId;
		}
		psi.patterns.loadDialog({
			width:'auto',
			height:600,
			title: __( 'Update Report Instance' ),
			strContentId: "bulk_update",
			strUrl: '/?module=' + modules.instances + '&action=edit_bulk_instances' + strReportId
		});
		$('.actiontip').remove();
	}

	function updateInstanceToLatestVersion() {
		var $instance = $(this).parents('.js-report-instance'),
			intInstanceId = $instance.data('report-instance-id'),
			intLatestVersionId = $instance.find('.latest-version-data').data('latest-report-version-id');
		psi.patterns.ajaxRequest({
			url: '?module=' + modules.instances + '&action=update_bulk_instances' + '&report_instance_id[]=' + intInstanceId + '&latest_version_id=' + intLatestVersionId,
			beforeSend: function() {
				$instance.find('.actiontip').css('display', 'none');
				psi.patterns.showLoadingImage({ strElementSelector: '.report_instance_' + intInstanceId });
			},
			complete: function( response ) {
				var arrResponse = JSON.parse(response.responseText);

				if( arrResponse.success ) {
					returnToMyView();
				} else {
					psi.patterns.removeLoadingImage({ strElementSelector: '.report_instance_' + intInstanceId });
				}
			}
		});
	}

	function bulkUpdateReportInstance() {
		var reportInstanceIds = $( '#js-bulk-update-instances-form' ).serializeArray(),
			intLatestVersionId = $( '#js-bulk-update-instances-form' ).data('latest-version-id'),
			strLatestVersionId = '';

		if( 'undefined' !== typeof intLatestVersionId ) {
			strLatestVersionId = '&latest_version_id=' + intLatestVersionId;
		}
		if( 0 === reportInstanceIds.length ) {
			$('.js-bulk-update-instances-error').slideDown(300).delay(2000).slideUp(500);
			return false;
		} else {
			psi.patterns.ajaxRequest({
				url: '?module=' + modules.instances + '&action=update_bulk_instances' + strLatestVersionId,
				data: $( '#js-bulk-update-instances-form' ).serialize(),
				beforeSend: function() {
					psi.patterns.showLoadingImage({ strElementSelector: '#js-bulk-update-instances-form' });
					$('.js-bulk-update-instances').attr( 'disabled', 'disabled' );
				},
				complete: function( response ) {
					psi.patterns.removeLoadingImage({ strElementSelector: '#js-bulk-update-instances-form' });
					var arrResponse = JSON.parse(response.responseText);

					if( arrResponse.success ) {
						$('#bulk_update').dialog('close');
						returnToMyView();
					} else {
						$( '.js-bulk-update-instances-error' ).html( '<i></i>' + arrResponse.error );
						$('.js-bulk-update-instances-error').slideDown(300).delay(2000);
						$('.js-bulk-update-instances').prop( 'disabled', false );
					}
				},
				error: function() {
					// TODO: Populate all error messages on inputs, back up to earliest step with an error
				}
			});
		}
		return false;
	}

	function checkUncheckBulkUpdateInstance(){
		// If checkall is checked/unchecked
		if( $( this ).hasClass( 'js-update-check-all' ) ) {
			if( $(this ).is( ':checked' ) ) {
				$( '.js-update-check' ).prop( 'checked', true );
			} else {
				$( '.js-update-check' ).prop( 'checked', false );
			}
		} else if( $( this ).hasClass( 'level1' ) ) {
			var level2Checkboxes = $(this).parent().siblings().find( '.js-update-check.level2' );
			if( $(this ).is( ':checked' ) ) {
				level2Checkboxes.prop( 'checked', true );
			} else {
				level2Checkboxes.prop( 'checked', false );
			}
		} else {
			// If any of child checkboxes are checked or unchecked
			var level1Checkboxes = $(this).closest('td.body').siblings().find( '.js-update-check.level1' );
			if( $(this).closest('td.body').find( '.js-update-check.level2:checked' ).length === $(this).closest('td.body').find( '.js-update-check.level2' ).length ) {
				level1Checkboxes.prop( 'checked', true );
			} else {
				level1Checkboxes.prop( 'checked', false );
			}
		}

		if( $( '.js-update-check:checked' ).length === $( '.js-update-check' ).length ) {
			$( '.js-update-check-all' ).prop( 'checked', true );
		} else {
			$( '.js-update-check-all' ).prop( 'checked', false );
		}
	}

	function checkGroupHeader() {
		if( $(document).find('input[name="report_company_group_ids[]"]:checked').length === $(".js-company-group li").length ) {
			$('#js-company-group-header').prop('checked',true);
		}
		if( $(document).find('input[name="report_company_user_ids[]"]:checked').length === $(".js-company-user li").length ) {
			$('#js-company-user-header').prop('checked',true);
		}
	}

	function confirmDeleteInstance(e) {

		e.preventDefault();

		var $instance		= $(this).parents('.js-report-instance'),
			groupInstanceId = 0 < $instance.length ? $instance.data('report-group-instance-id') : $(this).data('report-group-instance-id'),
			instanceId		= 0 < $instance.length ? $instance.data('report-instance-id') : $(this).data('report-instance-id'),
			instanceName	= 0 < $instance.length ? $instance.data('report-title') : $(this).data('report-title'),
			reportGroupId	= 0 < $instance.length ? $instance.data('report-group-id') : $(this).data('report-group-id'),
			isPrivateInstance	= 0 < $instance.length ? $instance.data('is-private-instance') : $(this).data('is-private-instance'),
			intCompanyUserId = $('select#user.form-select').val();

		$( '.js-report-action-tips' ).actiontip( 'hide' );
		psi.patterns.loadDialog( {
			width: 730,
			strContentId: 'confirmDeleteDialog',
			height: 350,
			strUrl: '/?module=' + modules.instances + '&action=confirm_delete_instance&group_instance_id=' + groupInstanceId + '&instance_id=' + instanceId + '&report_group_id=' + reportGroupId + '&is_private_instance=' + isPrivateInstance + '&company_user_id=' + intCompanyUserId,
			title: __( 'Remove Instance: {%s, 0}', [ instanceName ] )
		} );
		return false;

	}

	function confirmDeleteMigrationFilter(e) {
		e.preventDefault();

		var $instance	= $( this ).parents( '.js-failed-private-filter' ),
			filterId	= $instance.data( 'report-filter-id' ),
			filterName	= $instance.data( 'report-filter-name' );

		$( '.js-failed-private-filter-action-tips' ).actiontip( 'hide' );
		psi.patterns.loadDialog( {
			width: 650,
			strContentId: 'confirmDeleteDialog',
			height: 200,
			strUrl: '/?module=' + modules.migration + '&action=confirm_delete_migration_filter&filter_id=' + filterId,
			title: __( 'Delete Instance: {%s, 0}', [ filterName ] )
		} );
		return false;

	}

	function deleteReportInstance(e) {

		e.preventDefault();

		var instanceId,
			groupInstanceId,
			$instance,
			data,
			elementSelectorClass,
			isFromEditInstance = $(this).parents().parents('.js-delete-instance').data('is-from-edit-instance'),
			reportGroupType,
			reportGroupId,
			isPrivateInstance = false,
			companyUserId;

		if( isFromEditInstance ) {
			$instance				= $(this).parents().parents('.js-delete-instance');
			instanceId				= 0 < $instance.length ? $instance.data('report-instance-id') : $(this).data('report-instance-id');
			groupInstanceId			= 0 < $instance.length ? $instance.data('report-group-instance-id') : $(this).data('report-group-instance-id');
			reportTypeId            = 0 < $instance.length ? $instance.data('report-type-id') : $(this).data('report-type-id');
			elementSelectorClass	= '.js-create-edit-instance-form';
			reportGroupType			= reportGroupTypes.company;
			reportGroupId			= $(this).data('report-group-id');
		} else {
			instanceId				= $(this).data('instance-id');
			groupInstanceId			= $(this).data('group-instance-id');
			reportTypeId            = $(this).data('report-type-id');
			elementSelectorClass	= '.js-confirm-report-instance-delete';
			reportGroupType			= reportGroupTypes.my_reports;
			reportGroupId			= $(this).data('report-group-id'),
			isPrivateInstance		= $(this).data('is-private-instance'),
			companyUserId			= $(this).data('company-user-id');
		}

		data = { 'report_instance' : { 'id': instanceId }, 'report_group_instance' : { 'id': groupInstanceId }, 'report_group_type' : reportGroupType, 'report_type' : { 'id': reportTypeId }, 'is_private_instance' : isPrivateInstance, 'company_user_id' : {'id':companyUserId} };

		psi.patterns.ajaxRequest( {
			url: '?module=' + modules.instances + '&action=delete_instance',
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: elementSelectorClass });
			},
			data: data,
			success: function( strResponse ) {
				psi.patterns.removeLoadingImage({ strElementSelector: elementSelectorClass });
				$('.actiontip').remove();
				var instanceCount	= $('li[data-report-group-id = ' + reportGroupId + ']').length - 1,
					objResponse		= $.parseJSON( strResponse );
				if( true === objResponse['success'] ) {
					if( instanceCount === 0 && reportGroupType === reportGroupTypes.my_reports ) {
						confirmDeleteGroup(e,reportGroupId);
					} else {
						location.reload();
					}
				} else {
					// Close the curtain
					closeCurtain();
					if( isFromEditInstance ) {
						closeLargeDialog( $( elementSelectorClass ) );
						$( document ).scrollTop( 0 );
					} else {
						closeDialog( $( elementSelectorClass ) );
						$( document ).scrollTop( 0 );
					}
					$( '.js-status-message-container' ).html( '' );
					$( '.js-status-message-container' ).append( '<p class="alert error slim"><i></i>' + objResponse['message'] + '</p>' );
					$( '.js-status-message-container' ).fadeIn( 3000 );
				}
			},
			error: function( strUrl, strResponse ) {
				$('.ui-icon-closethick').trigger('click');
				var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );
				$( '.js-status-message-container' ).html( '' );
				if( null != parsedJson.error ) {
					$( window ).scrollTop( 0 );
					for( i = 0; i < parsedJson.error.length; i++ ) {
						var error = parsedJson.error[i];
						$( window ).scrollTop( 0 );
						$( '.js-status-message-container' ).append( '<p class="alert error slim"><i></i>' + error + '</p>' );
					}
					$( '.js-status-message-container' ).fadeIn().fadeOut( 3000 );
				}
			}
		} );
	}

	function showVersionDataViewMore() {
		var uniqueInstanceId 	= $( this ).attr( 'ref' ),
			dialogtitle 		= $( '#versiondata_dialog_title_' + uniqueInstanceId ).html(),
			$dlOptsContainer 	= $( '.report_instance_' + uniqueInstanceId ),
			$dlContentBody		= $( '#versiondata_dialog_body_' + uniqueInstanceId ).html(),
			$dlStaticText		= "<br><br><strong>" + __( 'Other report versions may also be available. Please see Documentation.' ) + "</strong>";

		// To display html entities as how actual html tags will display. OR html entity decode
		$( '#versiondata_dialog_body_' + uniqueInstanceId + ' .js-versiondata-body' ).html( $( '#versiondata_dialog_body_' + uniqueInstanceId + ' .js-versiondata-body' ).text() + $dlStaticText );

		psi.patterns.bindEssentials();
		psi.patterns.loadDialog( {
			title: dialogtitle,
			height: 500,
			width: 850,
			strContentId: 'versiondata_dialog_body_' + uniqueInstanceId,
			beforeClose:	function( e, ui ) {
				// Find the dialog
				var $dialog = $( e.target ),
					$dlOpts = $( '<div id="' + $dialog.attr( 'id' ) + '" class="hide" ></div>' );
				// Copy the dialog's html back into the report listing li container
				$dlOpts.html( $dlContentBody );
				$dlOptsContainer.append( $dlOpts );
			},
			open: function( event, ui ) {
				psi.patterns.bindEssentials();
				$( this ).parents( ".ui-dialog:first" ).find( ".ui-dialog-content" ).addClass( 'release-note-reset' );
			}
		} );

		var source					= $( '#actiontip-content-versiondata_' + uniqueInstanceId ).data( 'source' ),
			reportName				= $( '#actiontip-content-versiondata_' + uniqueInstanceId ).data( 'report-name' ),
			reportTypeId			= $( '#actiontip-content-versiondata_' + uniqueInstanceId ).data( 'report-type' ),
			latestReportVersionId	= $( '#actiontip-content-versiondata_' + uniqueInstanceId ).data( 'latest-report-version-id' );

		psi.patterns.ajaxRequest({
			type: 'post',
			url: '/?module=' + modules.documentation + '&action=version_details_new_relic_transaction' + '&source=' + source + '&reportName=' + reportName + '&reportTypeId=' + reportTypeId + '&latestReportVersionId=' + latestReportVersionId,
		});
	}

	function showUpdateToLatestVersion(){
		var intInstanceId		= $( this ).attr( 'ref' ),
			intLatestVersionId	= $( this ).data('latest-report-version-id');
		psi.patterns.ajaxRequest({
			url: '?module=' + modules.instances + '&action=update_bulk_instances' + '&report_instance_id[]=' + intInstanceId + '&latest_version_id=' + intLatestVersionId,
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: $( '#versiondata_dialog_body_' + intInstanceId ) });
			},
			complete: function( response ) {
				var arrResponse = JSON.parse(response.responseText);

				if( arrResponse.success ) {
					returnToMyView();
					$( '#versiondata_dialog_body_' + intInstanceId ).dialog( 'close' );
				} else {
					psi.patterns.showLoadingImage({ strElementSelector: $( '#versiondata_dialog_body_' + intInstanceId ) });
				}
			}
		});
	}

	function submitReportInstance( historyId, isDuplicate ) {
		//e.preventDefault();

		var $reportType				= $( '.js-report-type' ),
			reportTypeId			= $reportType.length ? parseInt( $reportType.val() ) : reportTypes.system,
			module					= reportTypes.sap === reportTypeId ? modules.sap : modules.instances,
			datasetCount			= $('.show_dataset').find('input[type=checkbox]:checked').length,
			datasetHideCount		= 0,
			isModuleCacheReload		= false,
			instanceId				= $( '.js-report-instance-id' ).val(),
			reportModule;

		// TODO: Do client side validation
		// TODO: If it fails, populate all error messages on inputs, back up to earliest step with an error

		// TODO: If there is a new group, have the groups controller create it and get the ID back, then update the form

		if( 0 < $('.js-display-options-container .js-dataset-body').length && 0 === $( '.js-display-options-container .js-column:not(.hide) .js-active-col:checked').length ) {
			$('.js-display-options-container .error-msg').html( __( 'Please select at least one column.' ) ).show();
			return false;
		}

		if( datasetHideCount === datasetCount && 1 < $( '.js-dataset-count' ).val() ) {
			$( '.details, .js-tab-filters' ).hide();
			$( '.display-tab' ).addClass( 'selected' ).siblings().removeClass( 'selected' );
			$( '.js-tab-display' ).show();
			$( '.js-tab-display .alert_display_options_error_div' ).html( '<p class="alert error slim"><i></i>' + __( 'Please select at least one dataset.' ) + '</p>' ).fadeIn(500);
			$( '.view-data-filters' ).show(300);
			psi.patterns.removeLoadingImage( { strElementSelector: '.view-report-instance' } );
			return false;
		} else {
			$('#alert_display_options_error_div').fadeOut(100).html('');
			$('#alert_error_div').fadeOut(100).html('');

			// Throw up a loading div
			psi.patterns.showLoadingImage({
				strElementSelector: '.js-slider.last'
			});

			// Submit the form
			psi.patterns.ajaxRequest( {
				url: '?module=' + module + '&action=insert_update_instance',
				data: $( '#add_report_instance .js-create-edit-instance-form' ).serialize(),
				dataType: 'json',
				beforeSend: function() {
					psi.patterns.showLoadingImage( {
						strElementSelector: '.view-report-instance'
					} );
				},
				complete: function() {
					// Remove loading div
					psi.patterns.removeLoadingImage( {
						strElementSelector: '.js-slider.last'
					} );
					psi.patterns.removeLoadingImage( {
						strElementSelector: '.view-report-instance'
					} );

					// Reload module cache to get current instance on UI.
					if( '' === instanceId && ( reportTypes.system === reportTypeId || reportTypes.custom === reportTypeId ) ) {
						isModuleCacheReload = true;
						reportModule = modules.reportLibrary;
					}
					if( ( '' === instanceId && reportTypes.sap === reportTypeId ) || isDuplicate ) {
						isModuleCacheReload = true;
						reportModule = modules.company;
					}
					if( '' !== historyId ) {
						isModuleCacheReload = true;
						reportModule = modules.history;
					}

					if( isModuleCacheReload ) {
						window.location.href = '/?module=helpxxx&action=reload_modules_cache&hide_message=1&return_url=/?module=' + reportModule;
					}
				},
				success: function( response ) {
					if( true === response.hasOwnProperty( 'error' ) ) {
                        $( '#alert_error_div' ).empty().append( `<p class="alert error slim"><i></i>${__( '{%s, 0}', [response.message || 'Something went wrong and Entrata has been notified.'] )}</p>` ).fadeIn(500);
                        viewDetailsTab();
                        $( '.view-data-filters' ).show(300);
					} else {
						// Close the curtain
						closeCurtain();
						closeLargeDialog( $( '#add_report_instance' ) );
						window.location.reload();
					}
				},
				error: function() {
					// TODO: Populate all error messages on inputs, back up to earliest step with an error
				}
			} );
		}
	}

	function validateInstance( action, isPreviewReport ) {
		if( 'undefined' === typeof action ) {
			action = '';
		}
		if( 'undefined' === typeof isPreviewReport ) {
			isPreviewReport = false;
		}
		var isValidated				= true,
			checkedPacketItems		= [],
			reportPacketGroupIds	= [],
			historyId				= undefined !== $( 'input[type=hidden][name="report_history_id"]' ).val() ? $( 'input[type=hidden][name="report_history_id"]' ).val() : '',
			isDuplicate				= $( '[name="is_duplicate"]' ).val(),
			reportCompanyGroupId;

		if( '' !== historyId ) {
			historyId = ', history_id : ' + historyId;
		}

		$( '#alert_error_div' ).html( '' );
		// TODO: These errors need i18n, and should do so using a helper function that adds a message with the correct HTML, instead of repeating it multiple times
		if( 0 < $('[name="report_instance[name]"]').length && '' === $('[name="report_instance[name]"]').val().trim() ) {
			$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i> ' + __( 'Report Instance name required.' ) + '</p>' );
			isValidated = false;
			viewDetailsTab();
			$( '.view-data-filters' ).show(300);
		}

		if( 0 < $('[name="report_instance[name]"]').length && '' !== $('[name="report_instance[name]"]').val().trim() && null == $('[name="report_instance[name]"]').val().trim() ) {
			$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i> ' + __( 'Report Instance name is invalid.' ) + '</p>' );
			isValidated = false;
			viewDetailsTab();
			$( '.view-data-filters' ).show(300);
		}

		if( null === $('[name="report_instance[report_version_id]"]').val() ) {
			$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i>' + __( ' Report version required.' ) + '</p>' );
			isValidated = false;
			viewDetailsTab();
			$( '.view-data-filters' ).show(300);
		}

		if( 0 < $('[name="report_instance[description]"]').length && '' === $('[name="report_instance[description]"]').val().trim() ) {
			$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i>' + __( 'Report Instance description required.' ) + '</p>' );
			isValidated = false;
			viewDetailsTab();
			$( '.view-data-filters' ).show(300);
		}

		if( ( false === $('.js-company' ).hasClass('hide') && ( null === $('[name="report_group_instance[report_new_group_id]"]').val() || '' === $('[name="report_group_instance[report_new_group_id]"]').val()) ) ) {
			isValidated = false;
			$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i>' + __( 'Please select one report group.' ) + '</p>' );
			viewDetailsTab();
			$( '.view-data-filters' ).show(300);
		}

		if( ( false === $('.js-packets' ).hasClass('hide') && false === $( '.js-packet-options input[type=checkbox]' ).is(':checked') ) ) {
			isValidated = false;
			$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i>' + __( 'Please select at least one packet.' ) + '</p>' );
			viewDetailsTab();
			$( '.view-data-filters' ).show(300);
		}

		if( $( '#report_filterproperty_group_ids div.form-multiselectbox > ul' ).is(':empty') && !$('.js-packets' ).hasClass('hide') && $( '.js-packet-options input[type=checkbox]' ).is(':checked') ) {
			isValidated = false;
			$( '#alert_error_div' ).empty();
			$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i>' + __( 'This report instance is associated with at least one schedule report or packet and must have at least one property saved in the property groups filter.' ) + '</p>' );
			viewFiltersTab( true );
			$( '.view-data-filters' ).show(300);
		}
		// Add instance to filter
		if( false === $('.js-company' ).hasClass('hide') ) {
			reportCompanyGroupId = $('[name="report_group_instance[report_new_group_id]"]').val();
		}

		if( false === $('.js-packets' ).hasClass('hide') ) {
			$('input[name="report_group_instance[report_packet_group_id][]"]:checked').each(function() {
				checkedPacketItems.push($(this).val());
			});

			reportPacketGroupIds = checkedPacketItems;
		}

		if( validateReportFilter() && true === isValidated ) {
			let intReportGroupType = ( 'my_reports' == $( '[name="report_add_instance_to"]' ).val() ) ? reportGroupTypes.my_reports : ( null != $('[name="report_instance[report_group_type_id]"]').val() ) ? $('[name="report_instance[report_group_type_id]"]').val() : reportGroupTypes.company;
			let isPrivateInstance = ( 'my_reports' == $( '[name="report_add_instance_to"]' ).val() ) ? 1 : 0;
			let intCompanyUserId = ( 'my_reports' == $( '[name="report_add_instance_to"]' ).val() && $('select[name="report_filter[user]"]').val() ) ? $('select[name="report_filter[user]"]').val() : '';
			psi.patterns.ajaxRequest({
				type: 'post',
				url: '/?module=' + modules.instances + '&action=validate_instance',
				strElementSelector: '.details',
				data: {report_instance_id : $('[name="report_instance[id]"]:last').val(), instance_name : $('[name="report_instance[name]"]').val(), report_company_group_id : reportCompanyGroupId, report_packet_group_ids : reportPacketGroupIds, report_group_type_id : intReportGroupType, is_duplicate : isDuplicate + historyId, is_private_instance : isPrivateInstance, company_user_id: intCompanyUserId},
				dataType: 'text',
				beforeSend: function() {
					if( 'generate' == action ) {
						$( '.view-data-filters' ).show();
						psi.patterns.showLoadingImage( {
							strElementSelector: '.view-data-filters'
						} );
					}

					if( 'save' == action ) {
						$( '.view-data-filters' ).hide();
						psi.patterns.showLoadingImage( {
							strElementSelector: '.view-report-instance'
						} );
					}
				},
				complete: function() {
					// load FusionCharts.js
					if( typeof FusionCharts === "undefined" ) {
						var fusionChartScriptFile = document.createElement( "script" );
						fusionChartScriptFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts_3.14/fusioncharts.js";
						jQuery("head").append( fusionChartScriptFile );
						setTimeout(function () {
							var fusionChartThemeFile = document.createElement( "script" );
							fusionChartThemeFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts.theme.entrata.js";
							jQuery("head").append( fusionChartThemeFile );
						}, 600 );
					}
				},
				error: function( xhr, status, error ) {
					console.log(error);
				},
				success: function( strResponse ) {
					if( 'generate' == action ) {
						psi.patterns.removeLoadingImage( {
							strElementSelector: '.view-data-filters'
						} );
					}
					if( 0 == strResponse[0] ) {
						$( '#alert_error_div' ).html('');
						isValidated = true;

						if( 'generate' == action ) {
							$('#view-data-filters').hide();
							generateReport(undefined, isPreviewReport);
						}

						if( 'save' == action ) {
							if( reportGroupTypes.my_reports == intReportGroupType ) {
								validatePrivateInstance( historyId, isDuplicate );
							} else {
								submitReportInstance( historyId, isDuplicate );
							}
						}

						return true;
					} else {
						if( 'save' == action ) {
							psi.patterns.removeLoadingImage( {
								strElementSelector: '.view-report-instance'
							} );
						}

						$( '#alert_error_div' ).html('');
						isValidated = false;
						if( 0 < $('.view-report-instance').find('.tabs-small.js-add-edit-instance-tabs').length ) {
							viewDetailsTab();
							$( '.view-data-filters' ).show(300);
						}

						$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i>' + __( 'Report Instance name already exists.' ) + '</p>' );

						return false;
					}
				}
			});
		} else {
			return false;
		}
	}

	function validatePrivateInstance( historyId, isDuplicate ) {
		let intCompanyUserId = ( $('select[name="report_filter[user]"]').val() ) ? $('select[name="report_filter[user]"]').val() : '';
		psi.patterns.ajaxRequest({
			type: 'post',
			url: '/?module=' + modules.instances + '&action=validate_private_instance',
			strElementSelector: '.details',
			data: {report_instance_id : $('[name="report_instance[id]"]:last').val(), is_duplicate : isDuplicate + historyId, company_user_id: intCompanyUserId},
			dataType: 'text',
			beforeSend: function() {

				$( '.view-data-filters' ).hide();
				psi.patterns.showLoadingImage( {
					strElementSelector: '.view-report-instance'
				} );
			},
			complete: function() {
				// load FusionCharts.js
				if( typeof FusionCharts === "undefined" ) {
					var fusionChartScriptFile = document.createElement( "script" );
					fusionChartScriptFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts_3.14/fusioncharts.js";
					jQuery("head").append( fusionChartScriptFile );
					setTimeout(function () {
						var fusionChartThemeFile = document.createElement( "script" );
						fusionChartThemeFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts.theme.entrata.js";
						jQuery("head").append( fusionChartThemeFile );
					}, 600 );
				}
			},
			error: function( xhr, status, error ) {
				console.log(error);
			},
			success: function( strResponse ) {
				var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );
				if( true == parsedJson.data.is_valid ) {
					$( '#alert_error_div' ).html('');
					isValidated = true;

					submitReportInstance( historyId, isDuplicate );
					return true;
				} else {
					psi.patterns.removeLoadingImage( {
						strElementSelector: '.view-report-instance'
					} );

					$( '#alert_error_div' ).html('');
					isValidated = false;
					if( 0 < $('.view-report-instance').find('.tabs-small.js-add-edit-instance-tabs').length ) {
						viewDetailsTab();
						$( '.view-data-filters' ).show(300);
					}

					$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i>' + __( 'Users are limited to 20 Private Instances. Please remove Private Instances from My Reports before attempting to create additional Private Instances.' ) + '</p>' );

					return false;
				}
			}
		});
	}

	function reloadFilters(e) {
		$('#report_version').val( $('.js-version-selector option:selected').data('selected-version') );
		// Empty Display Options container in case it was already populated and then reload was hit.
		$('.js-dataset-body').html( '' );

		// Submit entire form to an action to reload the filters
		psi.patterns.ajaxRequest({
			url: '?module=' + modules.instances + '&action=load_filters',
			strElementSelector: '.js-filters-container',
			data: $('.js-create-edit-instance-form').serialize(),
			beforeSend: function() {
				if( 0 < $('.tabs-small.js-add-edit-instance-tabs').length ) {
					psi.patterns.showLoadingImage({
						strElementSelector: '.data-filters'
					});
				} else if( $('input:hidden[name=is_reports_library]').val() ) {
					psi.patterns.showLoadingImage({
						strElementSelector: '.js-tab-filters'
					});
				} else {
					psi.patterns.showLoadingImage({
						strElementSelector: '.details'
					});
				}
			},
			complete: function(response) {
				if( 0 < $('.tabs-small.js-add-edit-instance-tabs').length ) {
					psi.patterns.removeLoadingImage({
						strElementSelector: '.data-filters'
					});
				} else if( $('input:hidden[name=is_reports_library]').val() ) {
					psi.patterns.removeLoadingImage({
						strElementSelector: '.js-tab-filters'
					});
				} else {
					psi.patterns.removeLoadingImage({
						strElementSelector: '.details'
					});
				}

				if( null != response.responseText ) {
					$('.js-tab-filters').html(response.responseText);
				}

				if( 0 == $('#boolIsShowConfigFilter').val() ) {
					$('.js-filters-config').find('.js-lock').addClass('hide');
					$('.js-filters-config').find('.js-lock + input').attr( 'disabled', 'disabled' );
				}
				psi.patterns.bindEssentials();
			}
		});
	}

	function reloadDisplayOptions( e, boolShowDisplayOption ) {
		// Submit the entire form to an action to reload the display options
		$(".generate-button").css("pointer-events" , "none").addClass("disable-links");
		psi.patterns.ajaxRequest( {
			url: '?module=' + modules.instances + '&action=load_display_options' + ( true == boolShowDisplayOption ? '&show_display_option=' + boolShowDisplayOption : '' ) +
				( 'undefined' != typeof e && 'undefined' == typeof e.is_new_instance_view ? '&is_new_instance_view=1' : '' ),
			strElementSelector: boolShowDisplayOption ? '.js-tab-display' : '.js-display-options-container',
			data: $( '.js-create-edit-instance-form' ).serialize(),
			beforeSend: function() {
				$('.js-tab-display').html( '' );
				psi.patterns.showLoadingImage( {
					strElementSelector: '.js-tab-display'
				} );
			},
			complete: function() {
				$(".generate-button").css("pointer-events" , "auto").removeClass("disable-links");
				$( '.sortable' ).sortable( {
					update: displayOptionsColumnReordered,
					items: "> li:not(.disable-sort)"
				} );
				$('.js-grouped-column').each(function(){
					if( $(this).find('.sortable-group li').length === $(this).find('.sortable-group li.hide').length ) {
						$(this).addClass('hide');
					}
				});
				psi.patterns.removeLoadingImage( {
					strElementSelector: '.js-tab-display'
				} );
				unsetColumnSortOptions();
			}
		} );
	}

	function loadActivityLogs( instanceId ) {
		var activityClassElementSelector = '.js-activity-tab-content';
		psi.patterns.ajaxRequest( {
			url: '?module=' + modules.instances + '&instance_id=' + instanceId + '&action=view_activity_logs',
			strElementSelector: activityClassElementSelector,
			beforeSend: function() {
				$( activityClassElementSelector ).html( '' );
				psi.patterns.showLoadingImage( {
					strElementSelector: activityClassElementSelector
				} );
			},
			complete: function() {
				psi.patterns.removeLoadingImage( {
					strElementSelector: activityClassElementSelector
				} );
			}
		} );
	}

	function validateLocksToDependentFilters() {
		psi.patterns.bindEssentials();
		if( $( 'input[type=hidden]' ).hasClass( 'js-dependent-filter-key' ) ) {
			$( '.js-dependent-filter-key' ).each( function() {
				var boolIsShowLock = true;
				$( '.dependency_on_' + $(this).val() ).each( function() {
					if( $('i#' + $(this).val() + '_lock_filter' ).hasClass( 'unlock' ) ) {
						boolIsShowLock = false;
					}
				});
				if( true == boolIsShowLock ) {
					$('i#' + $(this).val() + '_lock_filter' ).show();
					$('i#' +  $(this).val() + '_lock_filter' ).removeAttr( 'style');
					if( $('i#' + $(this).val() + '_lock_filter' ).hasClass( 'unlock' ) ) {
						$( 'input[type=hidden][name="filter_locks[' + $( this ).val() + ']"]' ).val( 'false' );
					}
				} else {
					$('i#' + $(this).val() + '_lock_filter' ).hide();
				}

			} );
		}

	}

	function toggleFilterLock() {
		$(this).toggleClass('lock');
		$(this).toggleClass('unlock');

		if( true === $(this).hasClass( 'lock' ) ) {
			$(this).siblings( 'input' ).val( 'true' );
		} else {
			$(this).siblings( 'input' ).val( 'false' );
		}

		validateLocksToDependentFilters();
	}

	function displayOptionsTabClick() {
		var dataset			= $(this).data('dataset'),
			$tabBodies		= $('.js-dataset-body'),
			$currentTabBody	= $('.' + dataset);
		$(this).addClass('selected').siblings().removeClass('selected');
		$tabBodies.fadeOut(100);
		$tabBodies.find('.js-global-option').prop('disabled', true);
		$currentTabBody.delay(100).fadeIn(100);
		$currentTabBody.find('.js-global-option').prop('disabled', false);
	}

	function displayOptionsGlobalOptionChanged( selector ) {
		return function() {
			$( selector ).val( $( this ).val() );
		};
	}

	function displayOptionsSortOrderClick() {
		$('.js-sort-order-container li')
			.removeClass('selected')
			.filter('[val="' + $(this).attr('val') + '"]').addClass('selected')
			.siblings('input').val($(this).attr('val'));
	}

	function displayOptionsCheckBoxToggle() {
		var enabled = $(this).is(':checked'),
			columnKey = $(this).parent().parent().parent().data('column-key'),
			isDynamicGroupColumn = $(this).data('column-dynamic-group') ? $(this).data('column-dynamic-group') : false;
		$(this).siblings('.js-is-disabled').val(enabled ? 0 : 1);
		if(enabled) {
			if( isDynamicGroupColumn ) {
				$(this).next().attr( 'readonly', 'readonly' );
			} else {
				$(this).next().removeAttr( 'readonly' );
			}
			$(this).parent().parent().removeClass('disabled');
			$('.js-dataset-body .js-sort-column option[value="'+ columnKey +'"]').removeClass('hide');
		} else {
			$(this).parent().parent().addClass('disabled');
			$(this).next().attr( 'readonly', 'readonly' );
			if( columnKey == $( '.js-sort-column' ).val() ) {
				$('.js-dataset-body .js-sort-column').val($('.js-dataset-body .js-sort-column option:eq(1)').val());
			}
			$('.js-dataset-body .js-sort-column option[value="'+ columnKey +'"]').addClass('hide');
		}

		// delete formula column if unchecked.
		if( false == enabled && true == $( this ).siblings( '.js-column-name' ).hasClass( 'highlight-green' ) ) {
			$(this).parent().parent().parent().remove();
		}

		// To select/remove grouped check box according to its elelement selection.
		if( true === $(this).closest( 'ul' ).hasClass( 'sortable-group' ) ) {
			if( $(this).closest( 'ul' ).find( 'li .js-active-col' ).length !== $(this).closest('ul').find('li .js-active-col:checked' ).length ) {
				$(this).closest( 'ul' ).prev().find( '.js-grouped-column-checkbox' ).removeAttr( 'checked' );
			} else {
				$(this).closest( 'ul' ).prev().find( '.js-grouped-column-checkbox' ).prop('checked', true);
			}
		}

		if( $(this).hasClass( 'js-grouped-column-checkbox' ) ) {
			var boolGroupCheckBoxValue = $(this).is(':checked');
			$(this).parent().parent().next().find( '.js-is-disabled' ).each(function() {
				$(this).val(boolGroupCheckBoxValue ? 0 : 1);
			});
			$(this).parent().parent().next().find( '.js-active-col' ).each(function() {
				if( boolGroupCheckBoxValue ) {
					if( isDynamicGroupColumn ) {
						$(this).next().attr( 'readonly', 'readonly' );
					} else {
						$(this).next().removeAttr( 'readonly' );
					}
					$(this).parent().parent().removeClass('disabled');
					$(this).prop('checked', true);
				} else {
					$(this).removeAttr( 'checked' );
					$(this).parent().parent().addClass('disabled');
					$(this).next().attr( 'readonly', 'readonly' );
				}
			});
		}
	}

	function displayOptionsColumnReordered(event, ui) {
		$('.sortable').find('li.js-column').each(function(index, element) {
			$(this).find('.js-column-index').val(index);
			$(this).find('input[name]').each(function() {
				$(this).attr('name', $(this).attr('name').replace(/\[\d+]/, '[' + index + ']'));
			})
		});
	}

	function setRenameFlag() {
		if( $(this).val() !== $(this).attr('placeholder') ) {
			$(this).parent().find('.js-rename-column').val(true);
		}
	}

	function addEditFormula() {
		var boolIsUpdate = $(this).data('is-update'),
			strDialogTitle = ( boolIsUpdate) ? __( 'Edit Formula' ) : __( 'Add Formula' );

		if( boolIsUpdate ) {
			psi.patterns.loadDialog({
				width: 850,
				height: 605,
				title: strDialogTitle,
				data: {
					dataset_id: $(this).parents('.js-report-columns').find('.js-add-formula').data('dataset-id'),
					display_options: $(this).parents('.js-report-columns').find('.js-add-formula').data('display-options'),
					formula_name: $(this).siblings('input.js-column-name').val(),
					formula: $(this).siblings('input.js-formula').val(),
					format: $(this).siblings('input.js-format').val(),
					existing_formula_name: $(this).siblings('input.js-column-key').val(),
					index:$(this).siblings('input.js-column-index').val(),
					is_update: boolIsUpdate
				},
				strUrl: '?module=' + modules.instances + '&action=add_edit_formula',
				strContentId: 'edit_formula_container',
				focus: function( event, ui ) {
					setTimeout(function() {
						bindFormulaEvents();
					}, 2000);
				}
			});
		} else {
			psi.patterns.loadDialog({
				width: 850,
				height: 605,
				title: strDialogTitle,
				data: {
					dataset_id: $(this).data('dataset-id'),
					display_options: $(this).data('display-options'),
					is_update: boolIsUpdate
				},
				strUrl: '?module=' + modules.instances + '&action=add_edit_formula',
				strContentId: 'add_formula_container',
				focus: function( event, ui ) {
					setTimeout(function() {
						bindFormulaEvents();
					}, 2000);
				}
			});
		}

		function bindFormulaEvents() {
			var selectionStart,
				selectionEnd;

			$('#add_formula_container, #edit_formula_container').on( 'blur', 'input', function( e ) {
				if( $(e.target).hasClass( 'js-formula-input' ) ) {
					selectionStart = e.target.selectionStart;
					selectionEnd = e.target.selectionEnd;
				} else {
					selectionStart = selectionEnd = $('.js-formula-input').val().length;
				}
			} );

			$('#add_formula_container, #edit_formula_container').on( 'click', '.system-text, .op', function( e ) {
				var currentVal	= $('.js-formula-input').val(),
					replacement	= currentVal.slice( 0, selectionStart ) + $(this).attr('title') + currentVal.slice( selectionEnd );
				$('.js-formula-input').val( replacement );
				selectionStart = selectionEnd = selectionStart + $(this).attr('title').length;
				if( $('.js-formula-input')[0].setSelectionRange ) {
					$('.js-formula-input')[0].setSelectionRange( selectionStart, selectionEnd );
				}
			} );

			$('#add_formula_container, #edit_formula_container').on( 'click', '.paren', function( e ) {
				var currentVal	= $('.js-formula-input').val(),
					selected	= currentVal.slice( selectionStart, selectionEnd ),
					replacement	= currentVal.slice( 0, selectionStart ) + '(' + selected + ')' + currentVal.slice( selectionEnd );
				$('.js-formula-input').val( replacement );
				selectionStart = selectionEnd = selectionStart + selected.length + ( selected.length > 0 ? 2 : 1 );
				if( $('.js-formula-input')[0].setSelectionRange ) {
					$('.js-formula-input')[0].setSelectionRange( selectionStart, selectionEnd );
				}
			} );
		}
	}

	function insertUpdateFormula(e) {
		e.preventDefault();
		var intDatasetId = $('#dataset_id').val(),
			strFormulaName = $('#formula_name').val(),
			strFormula = $('.js-formula-input').val(),
			strFormat = $('.js-column-format').val(),
			index = $('#column_index').val(),
			strDataKeyName = $( '#existing_formula_name' ).val().trim(),
			strColumnKey = strFormulaName.toLowerCase().replace(/ /g, '_'),
			intIsUpdate = $( '#is_update' ).val(),
			boolIsValid = true;

		if( '' == $('#formula_name').val() || '' == $('.js-formula-input').val() ) {
			$('.js-add-update-formula-form .formula-error-msg').html(__( 'Please input proper values' )).show();
			boolIsValid = false;
			return false;
		}

		if( false == intIsUpdate ) {
			$( '.' + intDatasetId + ' ul li.js-column' ).each( function() {
				if( strColumnKey == $( this ).find( '.js-column-key' ).val() ) {
					$( '.js-add-update-formula-form .formula-error-msg' ).html( __( 'Column name already exists.' ) ).show();
					boolIsValid = false;
					return false;
				}
			} );
		}

		if( true == boolIsValid ) {
			var intIndex = (true == index ? index : $('.js-dataset-body ul:first li.js-column').length),
				strFormulaHtml = '<li data-column-key="'+ strColumnKey +'" class="margin5-top js-column">' +
					'<div class="colorbox highlight-green nopad noborder">' +
					'<div class="clearfix">' +
					'<input class="form-checkbox margin5-left margin10-top js-active-col left" type="checkbox" checked="checked">' +
					'<input name="display_options[datasets][' + intDatasetId + '][columns]['+ intIndex +'][name]" class="form-field left js-column-name highlight-green" readonly="readonly" value="'+ strFormulaName +'" placeholder="">\n' +
					'<input name="display_options[datasets][' + intDatasetId + '][columns]['+ intIndex +'][format]" class="js-format" type="hidden" value="'+ strFormat +'">\n' +
					'<input name="display_options[datasets][' + intDatasetId + '][columns]['+ intIndex +'][index]" type="hidden" class="js-column-index" value="'+ intIndex +'">\n' +
					'<input name="display_options[datasets][' + intDatasetId + '][columns]['+ intIndex +'][key]" class="js-column-key" type="hidden" value="'+ strColumnKey +'">\n' +
					'<input name="display_options[datasets][' + intDatasetId + '][columns]['+ intIndex +'][formula]" class="js-formula" type="hidden" value="'+ strFormula +'">\n' +
					'<input name="display_options[datasets][' + intDatasetId + '][columns]['+ intIndex +'][is_renamed]" class="js-rename-column" type="hidden" value="">\n' +
					'<input name="display_options[datasets][' + intDatasetId + '][columns]['+ intIndex +'][column_library]" type="hidden" value="formula_column">\n' +
					'<input name="display_options[datasets][' + intDatasetId + '][derivedColumns]['+ strFormulaName.replace(/\s+/g, "_").toLowerCase() +']" type="hidden" value="'+ $('.js-formula-input').val() +'">\n' +
					'<i class="sum right js-edit-formula margin5-top" data-is-update="1"></i>' +
					'</div>' +
					'</div>' +
					'</li>';

			psi.patterns.ajaxRequest( {
				url: '?module=' + modules.instances + '&action=add_edit_formula',
				data: $( '.js-add-update-formula-form' ).serialize() + '&' + $.param( { display_options: $('.js-add-formula').data( 'display-options' ) } ),
				dataType: 'json',
				strElementSelector: '.js-add-update-formula-form',
				beforeSend: function() {
					psi.patterns.showLoadingImage({
						strElementSelector: '.js-add-update-formula-form'
					});
				},
				success: function( data, status, request ) {
					psi.patterns.removeLoadingImage({
						strElementSelector: '.js-add-update-formula-form'
					});
					if( 'success' == data.status ) {
						if( 0 == intIsUpdate ) {
							$('.js-dataset-body:visible ul div.clear').after( strFormulaHtml );
						} else {
							$('.js-dataset-body:visible ul li[data-column-key="' + strDataKeyName + '"]').replaceWith( strFormulaHtml );
						}
						$( '.js-form-dialog-cancel' ).trigger( 'click' );
					} else {
						$( '#add_formula_container, #edit_formula_container' ).scrollTop( 0 );
						$('#add_formula_container, #edit_formula_container').find( '.alert.error.slim' ).remove();
						$('#add_formula_container, #edit_formula_container').find( '.alert.info.slim' ).after( '<p class="alert error slim"><i></i> ' + __( '{%s, 0}', [ data.message ] ) + '</p>' );
					}
				},
				complete:function() {
					displayOptionsColumnReordered();
				}
			} );
		}
	}

	function isAutoUpdate() {
		let intAutoUpdate = $( this ).find( '#is-auto-update-input' ).val(),
			intDefaultVersion = $( '.js-auto-update-report-version' ).find( '#is_default_report_version_input' ).val();

		0 == intAutoUpdate ? function() {
				$( '.js-version-selector' ).addClass( 'disabled' ).prop( 'disabled', true );
				$( '.js-version-selector' ).find( 'option[value=' + intDefaultVersion + ']' ).attr( 'selected','selected' );

				$( '<input>' ).attr({
					type:	'hidden',
					id:		'report_instance_default_report_version_id',
					name:	'report_instance[report_version_id]',
					value:	intDefaultVersion
				}).appendTo( 'div.js-report-version-selector-container' );
			} ()
			: function() {
				$( '.js-version-selector' ).removeClass( 'disabled' ).prop( 'disabled', false );
				$( '#report_instance_default_report_version_id' ).remove();
			} ();

	}

	function getExpirationDetails() {
		var selector = '.js-version-selector-text';
		let selectedVersion = $(this).find( ':selected' ).data( 'selected-version' );

		$.ajax( {
			url: '/?module=' + modules.instances + '&action=get_expiration_details&report_version_id=' + $(this).val(),
			method: 'post',
			complete: function() {
				psi.patterns.removeLoadingImage( {
					strElementSelector: '.js-report-version-selector-container'
				} );
			},
			beforeSend: function() {
				$('.js-report-version-on-load-text').remove();
				psi.patterns.showLoadingImage( {
					strElementSelector: '.js-report-version-selector-container'
				} );
			},
			success: function( response ) {
				if( '' !== response ) {
					var data = JSON.parse( response ),
						hoverText = '';

					$( selector ).css( 'display', 'inline-block' );

					if( 0 != data.length ) {
						hoverText = __( 'Version' ) + ' ' + data.major + '.' + data.minor + ' ' + __( 'will expire on {%t, 0, DATE_NUMERIC_STANDARD}', [ data.expiration ] ) + '. ' + __( '{%s, 0}',[ data.titleAddendum ] );
						$( selector ).attr( 'title', hoverText );
						$( selector + ' i' ).addClass( 'alert-red nomargin' );
						$( selector + ' strong' ).html( __( 'Expires' ) + ' ' + __( '{%t, 0, DATE_NUMERIC_STANDARD}', [ data.expiration ] ) );
					}
				} else {
					$( selector ).css( 'display', 'none' );
				}

				if( selectedVersion.length != 0 && $( 'input:hidden[name=is_reports_library]' ).val() ) {
					$( 'input:hidden[name=version]' ).val( selectedVersion );
				}
				reloadFilters();
				reloadDisplayOptions();
			}
		} );
	}

	function showReportPacketValidationForInstance(){
		setTimeout( function() {
			var message = 'This report instance is associated with at least one schedule report or packet and must have at least one property saved in the property groups filter.';
			if( $( '#report_filterproperty_group_ids div.form-multiselectbox > ul' ).is(':empty') && !$('.js-packets' ).hasClass('hide') && $( '.js-packet-options input[type=checkbox]' ).is(':checked') ) {
				$( '#alert_error_div' ).empty();
				$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i>' + __( message ) + '</p>' );
				viewFiltersTab( true );
			}
		},50);
	}

	function updatefiltertabwidth(){
		if($('.view-data-tools').width() <= 350){
			$('.view-data-tools').width(500);
		}
	}

	// endregion

	// region Report Generation

	function bindReportGenerationEventHandlers() {
		var $body = $('body');

		$body.off( 'click', '.js-show-options' ).on( 'click', '.js-show-options', showDownloadOptions );
		$body.off( 'click', '.js-download-report' ).on( 'click', '.js-download-report', generateReport );
		$body.off( 'click', '.js-filter-values' ).on( 'click', '.js-filter-values', showFilterValues );
		$body.off( 'change', '.property-finder' ).on( 'change', '.property-finder', updateJumplist );
		$body.off( 'click', '.js-reset-report' ).on( 'click', '.js-reset-report', resetReportFilters );
		$body.off( 'click', '.js-reset-add-report' ).on( 'click', '.js-reset-add-report', resetAddReportFilters );
		$body.off( 'change', 'input.js-active-col' ).on( 'change', 'input.js-active-col', updateSortingOption );
	}

	function setColumnSortOptions( sortOptions) {
		columnSortOptions = sortOptions;
	}

	function updateSortingOption() {
		var arrmixSortOptions = getColumnSortOptions();
		if( !this.checked && 'undefined' !== typeof arrmixSortOptions ) {
			let strCurrentSortColumn = $(this).data( 'columnkey' );
			$.each( arrmixSortOptions, function ( index, strSortOption ) {
				let arrmixSortOptionDetails = JSON.parse( JSON.stringify( strSortOption ) );
				if( 'sort_by' === arrmixSortOptionDetails['name'] && strCurrentSortColumn === arrmixSortOptionDetails['value'] ) {
					unsetColumnSortOptions();
					return false;
				}
			});
		}
	}

	function getColumnSortOptions() {
		return columnSortOptions;
	}

	function unsetColumnSortOptions() {
		columnSortOptions = undefined;
		return columnSortOptions;
	}

	function showDownloadOptions() {
		psi.patterns.bindEssentials();
		// Show the appropriate modal dialog for the selected report format
		var format						= $(this).data('format'),
			$parent						= $(this).parents('.view-report-instance'),
			$dlOptsContainer			= $parent.find('.js-download-option-container'),
			uniqueId					= $parent.attr('data-unique-id'),
			contentDivId				= 'download_options_' + format + '_' + uniqueId,
			$contentDiv					= $('#' + contentDivId),
			isGenerateOnlyOption        = $(this).parents('.generate-only').length ? 1 : 0,
			downloadFormatContentDiv = '';

		if( $(this).data('print') ) {
			$contentDiv.find('.js-print-only').removeClass('hide').prop('disabled', false);
			$contentDiv.find('.js-non-print').addClass('hide').prop('disabled', true);
			$contentDiv.find('.js-print-only.js-print-input').prop('disabled', false);
		} else {
			$contentDiv.find('.js-print-only').addClass('hide').prop('disabled', true);
			$contentDiv.find('.js-non-print').removeClass('hide').prop('disabled', false);
			$contentDiv.find('.js-print-only.js-print-input').prop('disabled', true);

			if(isGenerateOnlyOption) {
				$contentDiv.addClass('generate-only');
				$contentDiv.find('.form-submit.js-non-print').prop('value', 'Generate');
			} else {
				$contentDiv.removeClass('generate-only');
				$contentDiv.find('.form-submit.js-non-print').prop('value', 'Download');
			}
		}

		// start region: task#2106798

		// Added this code to let the report get downloaded in the locale(s) selected,
		// even though it is different from user's default locale.
		$( '.js-download-options' ).find( ' .language-options :input[type=checkbox]' ).click( function() {
			if( !$( this ).prop( 'checked') ) {
				$( this ).removeAttr( 'checked' );
			}
		} );

		// This code will ensure particular items belonging to format pdf/xls are active selectively one at a time
		// to avoid the conflicting behaviour amongst the selected output locales.
		if( 'pdf' === format ) {
			$('#download_options_pdf_' + uniqueId + ' :input[type=checkbox]' ).attr("disabled", false);
			$('#download_options_xls_' + uniqueId + ' :input[type=checkbox]' ).attr("disabled", true);
			downloadFormatContentDiv = 'download_options_pdf_' + uniqueId;
		} else if( 'xls' === format ) {
			$('#download_options_pdf_' + uniqueId + ' :input[type=checkbox]' ).attr("disabled", true);
			$('#download_options_xls_' + uniqueId + ' :input[type=checkbox]' ).attr("disabled", false);
			downloadFormatContentDiv = 'download_options_xls_' + uniqueId;
		}

		// end region: task#2106798
		// loadDialog will move the content div, not clone it, so we need to copy it back before the dialog is closed
		psi.patterns.loadDialog({
			title:			__( 'Download Options' ),
			strContentId:	contentDivId,
			width:			500,
			height:			500,
			beforeClose:	function( e, ui ) {
				// Find the dialog
				var $dialog = $(e.target),
					$dlOpts = $('<div id="' + $dialog.attr('id') + '" class="hide js-download-options ' + format + '" data-unique-id="' + uniqueId + '"></div>');

				// Push current input values into HTML attributes
				$dialog.find('input').each( function() {
					$(this).attr('value', $(this).val() );
				} );
				$dialog.find('select').each( function() {
					var value = $(this).val();
					$(this).find('option').removeAttr('selected');
					$(this).find('option[value="'+value+'"]').attr('selected', 'selected');
				} );

				// Copy the dialog's html back into the download option container
				$dlOpts.html($dialog.html());
				$dlOptsContainer.append($dlOpts);
			},
			close: function( e, ui ) {
				$('.js-download-options').find( '#alert_error_div_' + uniqueId ).html('');
				if( 'pdf' === format || 'xls' === format ) {
					$( '#' + downloadFormatContentDiv + ' :input[type=checkbox]' ).parent().removeClass('selected');
					if( $( '#' + downloadFormatContentDiv + ' :input[type=checkbox]' ).is(':checked') ) {
						$( '#' + downloadFormatContentDiv + ' :input[type=checkbox]:checked' ).parent().addClass('selected');
					}
				}
			}
		});
	}

	function generateReport(e, isPreviewReport) {
		$dataGroupMap = 'undefined' === typeof $dataGroupMap ? {} : $dataGroupMap;

		if( 'undefined' === typeof isPreviewReport ) {
			isPreviewReport = false;
		}
		clearAllErrors();
        	unsetColumnSortOptions();
		$(".filter-overlay").remove();
		var isCacheDatasetData = 0;
		if( 0 < $('.js-download-report').length && !isPreviewReport) {
			var $this = $(this);
			isCacheDatasetData = $this.parents('.generate-only').length ? 1 : 0;
		} else {
			var $this = $('.gen-report');
		}
		var inDownloadOptionsModal		= 0 !== $this.parents('.js-download-options').length,
			uniqueId					= inDownloadOptionsModal ? $this.parents('.js-download-options').data('unique-id') : $this.parents('.view-report-instance').data('unique-id'),
			$parent						= inDownloadOptionsModal ? $('.view-report-instance[data-unique-id="'+uniqueId+'"]') : $this.parents('.view-report-instance'),
			parentUniqueId              = $parent.data('unique-id'),
			$dlOptsContainer			= $parent.find('.js-download-option-container'),
			format						= $this.data('format'),
			strMessage					= '',
			isFile						= 'html' !== format && 'api' !== format,
			downloadFormatContentDiv	= '',
			generateCallback			= function() {
				var $dlOpts			= $dlOptsContainer.find('.js-download-options.'+format),
					$otherDlOpts	= 0 < $dlOpts.length ? $dlOpts.siblings() : $dlOptsContainer.children();

				// Disable all downloads options, enable download options for selected type
				// $otherDlOpts.find(':input').prop('disabled', true);
				$dlOpts.find(':input[type!="hidden"]').prop('disabled', false);
				$parent.find('#cache_dataset_data').val(isCacheDatasetData);
				if(isCacheDatasetData) {
					cacheId[parentUniqueId] = null;
				}

				if( false === isFile ) {
					// Hide Filters
					$parent.find( '.view-data-tools' ).hide( 300 );

					// Show loader div
					let isReactWorkflowEnabled = $( '[name="report_instance[is_react_workflow_enabled]"]' ).val();
					if( !isReactWorkflowEnabled ) {
						$parent.find( '.reports-loader' ).show( 1, function() {
							$( this ).css( 'width', '90%' );
							$parent.find( '.load-report' ).fadeIn( 300 );
						} );
						$parent.find( '.generated-report' ).hide( 1 );
					}

					// Show graph icon
					$parent.find( '.dark-graph' ).hide();
					$parent.find( '.dark-table' ).show();
				}

				if( 'html' === format || 'api' === format ) {
					let data = $parent.find( '.js-report-input' ).serializeArray();
					// store report form data in a hidden input field
					if( $( 'input#report-filter-data' ).length ) {
						$( "input#report-filter-data" ).replaceWith( '<input id="report-filter-data" type="hidden" name="report-filter-data" value="" data-json=' + encodeURIComponent( JSON.stringify( data ) ) + '>' );
					} else {
						$( '.js-report-input' ).append( '<input id="report-filter-data" type="hidden" name="report-filter-data" value="" data-json=' + encodeURIComponent( JSON.stringify( data ) ) + '>' );
					}
				}

				// Send asyncRequest with form data
				generateReportAsync( $parent, format, isFile, isPreviewReport );
			};

		// This code will ensure particular items belonging to format pdf/xls are active selectively one at a time
		// to avoid the conflicting behaviour amongst the selected output locales.
		if( 'pdf' === format ) {
			downloadFormatContentDiv = '#download_options_pdf_' + uniqueId;
		} else if( 'xls' === format ) {
			downloadFormatContentDiv = '#download_options_xls_' + uniqueId;
		}

		if( 0 == $(downloadFormatContentDiv + ' .language-options.selected').length && 0 < $('.js-download-options').find('.language-options:visible').length ) {
			strMessage = __( 'Please select at least one language.' );
		}

		if( '' != strMessage ) {
			var objError = $('.js-download-options').find( '#alert_error_div_' + uniqueId );
			objError.html('');
			objError.html( '<p class="alert error slim"><i></i>' + strMessage + '</p>' );
			return false;
		}

		$( 'a.js-report-history-link' ).attr( 'href', '/?module=' + modules.history );

		if( validateReportFilter() && validateDisplayOptions() ) {
			if( inDownloadOptionsModal ) {
				var $dialog = $(this).parents('.js-download-options');
				// Set generateCallback as a close event handler
				$dialog.on( 'dialogclose', generateCallback );
				// Close the dialog
				$dialog.dialog('close');
				showDownloadFileMessage( format, true );
			} else {
				generateCallback();
				showDownloadFileMessage( format, true );
			}
		} else {
			$( '#report_form' ).scrollTop(0);
		}

		// Report sorting generation callbacks.
		$(document).off( 'click', 'thead .sortable' ).on( 'click', 'thead .sortable', function( e ) {
			e.preventDefault();

			var viewDataContainer = $(this).parents('.view-data-container'),
				sortBy = $(this).attr('data-sort'),
				sortOrderMarker = [],
				sortOptions = '';

			if( 'TH' == $(this).prop('tagName') ) {
				sortOrderMarker = $(this).find('i');
			} else if( 'SPAN' == $(this).prop('tagName') ) {
				sortOrderMarker = $(this).siblings('i');
			}

			var sortOrder = sortOrderMarker.length == 0 || sortOrderMarker.hasClass('desc') || sortOrderMarker.hasClass('up-arrow') ? 'ASC' : 'DESC';

			viewDataContainer.find('.sortable').removeClass('selected');
			viewDataContainer.find('.sortable i').remove();
			viewDataContainer.find('.sortable').siblings('i').remove();
			$(this).addClass('selected');

			if( 'TH' == $(this).prop('tagName') ) {
				$(this).append( '<i class="' + sortOrder.toLowerCase() + '"></i>' );
			} else if( 'SPAN' == $(this).prop('tagName') ) {
				$(this).next().after( '<i class="' + ( sortOrder == 'ASC' ? 'down-arrow' : 'up-arrow' ) + '"></i>' );
			}

			$('#primary_sort').val(sortBy); // Set the primary sort column in the form select dropdown
			var sortOrderValue = sortOrder === 'ASC' ? 'ascending' : 'descending';
			$('.js-sort-order').val(sortOrderValue);
			const $sortOrderContainer = $('.js-sort-order-container li');
			$sortOrderContainer.removeClass('selected');
			$sortOrderContainer.filter(`[val="${sortOrderValue}"]`).addClass('selected');

			// this is to pass sort by and sort order parameters in the generate_report action's data request when we click on a sortable column header in a report.
			setColumnSortOptions( [{"name":"sort_by", "value": sortBy}, {"name":"sort_order", "value": sortOrder }, {"name":"is_click_to_sort_column", "value": 1 }] );
			generateReportAsync( viewDataContainer, 'html', false );
		} );
	}

	function convertDateInYmdFormat( strDate, strLocale ) {
		const arrstrLocales = [ 'en_US', 'zh_CN', 'es_US', 'fr_CA', 'en_CA' ];
		if( arrstrLocales.includes( strLocale ) ) {
			return strDate;
		}

		let arrDate;
		let strConvertedDate;

		switch( strLocale ) {
			case 'hi_IN':
			case 'es_CL':
				// DateFormat = d-m-Y
				arrDate = strDate.split( '-' );
				strConvertedDate = arrDate[2] + '-' + arrDate[1] + '-' + arrDate[0];
				break;
			default:
				// DateFormat = d/m/Y
				arrDate = strDate.split( '/' );
				strConvertedDate = arrDate[2] + '-' + arrDate[1] + '-' + arrDate[0];
		}

		return strConvertedDate;
	}

	function isDateInYmdFormat( strDate ) {
		const regex = /^\d{4}-\d{2}-\d{2}$/;

		if( null === strDate.match( regex ) ) {
			return false;
		}

		const date = new Date( strDate );
		const timestamp = date.getTime();

		if( typeof timestamp !== 'number' || Number.isNaN( timestamp ) ) {
			return false;
		}

		return date.toISOString().startsWith( strDate );
	}

	function setReactReportAbortController() {
		const controller = new AbortController()
		const { signal } = controller
		reactAbortController = { controller, signal };
	}
	function generateReportAsync( $parent, format, isFile, isPreviewReport = false ) {
		var data = $parent.find( '.js-report-input' ).serializeArray(),
			reportHistoryId = undefined !== $( 'input[type=hidden][name="history_id"]' ).val() ? $( 'input[type=hidden][name="history_id"]' ).val() : '',
			arrmixLocales = $parent.find('.js-report-input').find(".language-options.selected :input").not(":disabled").map(
				function() {
					return {"name": this.name, "value": this.value}
				} ), // Added this code to get selected language options
			sortOptions = getColumnSortOptions(),
			isFromLibrary = $( '.js-report-input' ).find( '.gen-report .js-download-report' ).data( 'is-from-library' ),
			isFromLibraryParam = 1 === isFromLibrary ? '&is_from_library=' + isFromLibrary : '',
			parentUniqueId     = $parent.data('unique-id'),
			cacheIdParam = 'undefined' != parentUniqueId && 'undefined' != cacheId[parentUniqueId] && cacheId[parentUniqueId] && ( 'undefined' === typeof sortOptions || isFile ) ? '&cache_id=' + cacheId[parentUniqueId] : '',
			isDrillDown = $( 'input[type=hidden][name="drilldown"]' ).val(),
			drillDownParam = 1 == isDrillDown ? '&drilldown=1' : '',
			isLargeReport = false;

		if( 1 == isDrillDown ) {

			// In case of dmY date format convert and pass in Ymd date format
			data.forEach( function( d, index ) {
				const strLocale = window.__LOCALE_DATA__.locale;
				const arrstrPeriodTypes = [
					'report_filter[period][date]',
					'report_filter[period][daterange-start]',
					'report_filter[period][daterange-end]',
					'report_filter[period][fyrtodate]',
					'report_filter[period][pmtodate]'
				];
				if( arrstrPeriodTypes.includes( d.name ) && d.value ) {
					this[index].value = ( isDateInYmdFormat( d.value ) ) ? d.value : convertDateInYmdFormat( d.value, strLocale );
				}
			}, data );
		}

		if( 'undefined' !== typeof sortOptions ) {
			data = $.merge( $.merge( data, arrmixLocales ), sortOptions );
			$parent.find( '.reports-loader' ).fadeIn( 100 );
			$parent.find( '.reports-loader' ).find( 'p.info').hide();
			$parent.find( '.generated-report' ).hide(1);
			cacheId[parentUniqueId] = null;
		} else {
			data = $.merge( data, arrmixLocales );
		}

		if( '' !== reportHistoryId ) {
			reportHistoryId = '&history_id=' + reportHistoryId;
		}

		if( $parent.find( '#property-finder option:selected' ).length ) {
			var propClass = $parent.find( '#property-finder option:selected' ).val();
		}

		let isReactWorkflowEnabled = $( '[name="report_instance[is_react_workflow_enabled]"]' ).val();

		if( !isPreviewReport && isReactWorkflowEnabled && ('html' === format || 'api' === format) ) {
			reactAbortController?.controller?.abort();
			setReactReportAbortController();

			// hide error component in react
			if( null != document.querySelector( '#react-framework-error-container' ) ) {
				document.getElementById( "generate-report" ).dispatchEvent( new CustomEvent( 'onHideErrorComponent' ) );
			}

			$( '#app-container' ).find( '#alert_react_error_div' ).hide();
			if( reportHistoryId ) {
				$parent.find( '.js-report-from-history' ).remove();
			}

			$parent.find( '.view-data-table-header' ).show();
			$parent.find( '.js-maintain-scrollbar' ).hide();

			if( !isDrillDown && 'undefined' === typeof sortOptions ) {
				$parent.find( '.reports-loader' ).find( 'p.info' ).show();
			}

			if( !isPreviewReport ) {
				$parent.find( '.view-data-table-header .table-header .table-controls' ).hide();
			} else {
				$parent.find( '.view-data-table-header' ).hide();
				// To override the margin of app container only in case of preview instance
				$( '.generated-report' ).css( { "margin-top": "0" } );
			}

			$parent.find( '.reports-loader' ).hide();
			$parent.find( '.generated-report' ).fadeIn( 100 );
			$parent.parents( '.modal-body-container' ).css( { 'overflow': 'hidden' } );

			const event = new CustomEvent( 'onGenerateReportClick', {
				detail: {
					reportFilterFormData: document.getElementById( 'report-filter-data' )?.getAttribute( 'data-json' ),
					format: format,
					parentElement: $parent,
					reactAbortController: reactAbortController
				}
			} );

			const isAutoGenerate = $( '[name="report_instance[is_auto_generate]"]' ).val();
			if( ( isAutoGenerate && null == document.querySelector( '#react-framework-container' ) ) || null != document.querySelector( '#react-framework-error-container' ) ) {
				waitForElementToLoad( '#react-framework-container', document.getElementById( "report-framework" ) ).then( () => {
					// adding timeout to wait for few milliseconds for event listener to register with the element.
					setTimeout( function() {
						document.getElementById( "generate-report" ).dispatchEvent( event );
					}, 100 );
				} ).catch( error => {
					$( '#app-container' ).find( '#alert_react_error_div' ).show();
				} )
			} else {
				document.getElementById( "generate-report" ).dispatchEvent( event );
			}
		} else {
			$.asyncRequest( {
				url: '/?module=' + modules.instances + '&action=generate_report&format=' + format + reportHistoryId + isFromLibraryParam + cacheIdParam + drillDownParam,
				method: 'post',
				data: data,
				isFile: isFile,
				update: function( strUrl, objResponse ) {
					try {
						var parsedJson = $.isPlainObject( objResponse ) ? objResponse : $.parseJSON( objResponse );
						if( parsedJson.isLargeReport ) {
							isFile = true;
							isLargeReport = true;
							if( 0 == $( '#js-large-report-message' ).length ) {
								$( "<p id='js-large-report-message' class='alert info slim'>" + __( 'Your report is too large to show on screen, so an XLS version of the report will automatically be downloaded to your computer when completed.' ) + "</p>" ).insertAfter( '.table-header .js-download-file-message' );
							}
							$( '#js-large-report-message' ).fadeIn( 100 );
							$parent.find( '.reports-loader' ).fadeOut( 100 );
						}
					} catch( e ) {
						// do nothing continue execution
					}
				},
				complete: function() {
					// Remove the loading div
					$parent.find( '.reports-loader' ).fadeOut( 100 );
				},
				success: function( url, data ) {
					if( isLargeReport ) {
						$( '#js-large-report-message' ).fadeOut( 100 );
					}
					showDownloadFileMessage( format, false );
					var completeUrl = new URL( document.location.origin + url ),
						correlationId = completeUrl.searchParams.get( "token" );
					if( true === isFile ) {
						// Open the same url again in a new tab if this is a print view
						var isPrint = -1 != data.indexOf( 'print=1' );
						$parent.find( '.generated-report' ).fadeIn( 100 );
						$parent.find( '.reports-loader' ).fadeOut( 100 );
						if( true === isPrint ) {
							// here we need to send the print parameter in the action otherwise it populates the token generated in the json from
							// CReportNewReportSystemController::handleRetrieveReport() functions 'STATUS_COMPLETED' case.
							$( '<form target="_blank" method="post" action="' + url + '&print=1" />' ).appendTo( 'body' ).hide().submit();
						} else {
							if( 'undefined' != parentUniqueId && ('undefined' == cacheId[parentUniqueId] || !cacheId[parentUniqueId]) ) cacheId[parentUniqueId] = correlationId;
							return;
						}
					} else {
						if( 'undefined' != parentUniqueId && ('undefined' == cacheId[parentUniqueId] || !cacheId[parentUniqueId]) ) cacheId[parentUniqueId] = correlationId;
						// Replace the current report content with the response
						$parent.find( '.view-data-content' ).html( data ).ready( function() {
							// TODO: If the report HTML comes back with graphs, turn on the icon; otherwise, turn it off
							if( 'undefined' != typeof propClass && propClass ) {
								$parent.find( '#property-finder' ).val( propClass ).prop( 'selected', true ).trigger( 'change' );
							} else {
								$parent.find( '#property-finder' ).val( 'page-1' ).prop( 'selected', true );
							}
							$parent.find( '.view-data-content .generated-report' ).hide( 1 ).delay( 200 ).fadeIn( 300, function() {
								psi.patterns.setEqualHeights( {
									elementSelector: '.view-report-instance .equal-heights'
								} );

								// Make sure the table header fits into the container
								$( '.table-header' ).each( function() {
									$( this ).width( $( this ).parent( '.view-data-table-header' ).width() );
								} );
							} );
							psi.patterns.bindEssentials();

						} );
					}
					$parent.find( '.js-print-only.js-print-input' ).prop( 'disabled', true );
					// show horizontal scroll bar when generate report using drill-down  ( task id: 1986524 )
					if( -1 != url.indexOf( "&drilldown=1" ) ) {
						setTimeout( function() {
							$( '.js-maintain-scrollbar-wrapper' ).css( {
								'display': 'block',
								'width': $( window ).width() - ($( window ).width() * 0.1),
								'bottom': 0,
								'position': 'fixed'
							} );
						}, 1500 );
					}

					//set attributes for report responses
					$( '.js-positive-feedback-button, .js-negative-feedback-button' ).attr( {
						'data-correlation-id': correlationId,
						'data-report-instance-id': $( '[name="report_instance[id]"]' ).val()
					} );
				},
				error: function( strUrl, strResponse ) {
					try {
						showDownloadFileMessage( format, false );
						var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );

						// There were validation errors
						$parent.find( '.reports-loader' ).fadeOut( 100 );
						// Handling large drill-downs
						if( parsedJson.isLargeReport && parsedJson.url ) {
							$parent.find( '.view-data-filters' ).hide( 300 );
							$parent.find( '.view-data-content' ).html( "<p id='js-large-report-message' class='alert info slim margin15-top'>" + __( 'Your report is too large to show on screen, so an XLS version of the report will automatically be downloaded to your computer when completed.' ) + "</p>" ).find( '.generated-report' ).fadeIn( 100 );
							window.location = parsedJson.url;
						} else {
							$parent.find( '.view-data-filters' ).show( 300 );
						}
						if( 0 < $parent.find( '.tabs-small.js-add-edit-instance-tabs' ).length ) {
							viewFiltersTab( true );
							$parent.find( '.view-data-filters' ).show( 300 );
						}
						if( null != parsedJson.error ) {
							$( '.js-status-message-container' ).fadeOut( 100 ).html( 'there is some error' );
							for( i = 0; i < parsedJson.error.length; i++ ) {
								var error = parsedJson.error[i];
								if( 'string' === typeof error ) {
									addError( __( 'There was an error running the report.' ) + ' <span onclick="$(this).parent().next(\'p\').toggle()">' + __( 'Click here to see the error.' ) + '</span><p class=" error text-red font12  align-left" style="display: none; max-height:400px; overflow-y: scroll;">' + error + '</p>' );
								} else if( null !== error && 'object' === typeof error && error.hasOwnProperty( 'filter_key' ) && error.hasOwnProperty( 'message' ) ) {
									addFilterError( error.filter_key + '_filter', error.message );
								}
							}
						}
					} catch( e ) {
						let isPreviewMode = $( '[name="is_preview_mode"]' ).val();
						let isHistoricalPropertiesAccess = $( '[name="is_historical_properties_access"]' ).val();

						// Something more serious happened or returned HTML instead of json
						$parent.find( '.view-data-content' ).html( strResponse ).find( '.generated-report' ).fadeIn( 100 );
						if( 0 < $parent.find( '.tabs-small.js-add-edit-instance-tabs' ).length ) {
							$parent.find( '.view-data-filters' ).show( 300, function() {
								if( isPreviewReport && (isPreviewMode || isHistoricalPropertiesAccess) ) {
									setTimeout( function() {
										$parent.find( '.view-data-table-header .table-header' ).css( { "top": "96px" } );
										isHistoricalPropertiesAccess && $parent.find( '.generated-report .dataset-sizer' ).css( { "margin-top": "0px" } );
									}, 50 );
								}
							} );
						}
                        psi.patterns.bindEssentials();
					}
				}
			} );
		}
	}

	// DEV-150949 - Used in react application
	function showFilterTabErrors(response, $parent) {
		try {
			var parsedJson = $.isPlainObject( response ) ? response : $.parseJSON( response );

			// There were validation errors
			$parent.find( '.reports-loader' ).fadeOut( 100 );
			$parent.find( '.view-data-filters' ).show( 300 );

			if( 0 < $parent.find( '.tabs-small.js-add-edit-instance-tabs' ).length ) {
				viewFiltersTab( true );
				$parent.find( '.view-data-filters' ).show( 300 );
			}
			if( null != parsedJson.error ) {
				$( '.js-status-message-container' ).fadeOut( 100 ).html( 'there is some error' );
				for( i = 0; i < parsedJson.error.length; i++ ) {
					var error = parsedJson.error[i];
					if( 'string' === typeof error ) {
						addError( __( 'There was an error running the report.' ) + ' <span onclick="$(this).parent().next(\'p\').toggle()">' + __( 'Click here to see the error.' ) + '</span><p class=" error text-red font12  align-left" style="display: none; max-height:400px; overflow-y: scroll;">' + error + '</p>' );
					} else if( null !== error && 'object' === typeof error && error.hasOwnProperty( 'filter_key' ) && error.hasOwnProperty( 'message' ) ) {
						addFilterError( error.filter_key + '_filter', error.message );
					}
				}
			}
		} catch( e ) {
			// Something more serious happened or returned HTML instead of json
		}

	}

	function addError( message ) {
		var tag = 'p';
		if( message.substr( 0, 5 ) === '<pre>' ) {
			tag = 'pre';
			message = message.replace( /<\/?pre>/ig, '')
		}

		$('.global-error').append( '<' + tag + ' class="alert slim error align-left margin0-bottom">' + message + '</' + tag + '>' ).fadeIn(100);
	}

	function validateReportFilter() {
		try {
			var boolValidated = true,
				boolFuncResponse = true,
				reportFormData;

			$( '#form_error_msg' ).html( '' );

			reportFormData = 0 < $('form#report_form').length ?  $('form#report_form') : $('#view-data-filters .filters');

			//Call validation functions on all input fields that are visible
			reportFormData.find(':input:not(:disabled):not(:button):not(:checkbox)').each(function(){
				// Get filter id for error message targeting
				var filterId = $(this).parents('div[id$="_filter"]').attr('id');
				if( $(this).attr('required') ) {
					switch( this.type ) {
						case 'password':
						case 'select-multiple':
						case 'select-one':
						case 'text':
							if( '' === $(this).val() ) {
								boolFuncResponse &= false;
								$( '#form_error_msg' ).append( '<span class="font14 lineheight">' + $(this).attr('required_msg') + '</span><br>' );
								if( 'undefined' !== typeof filterId ) {
									addFilterError( filterId, $(this).attr('required_msg') );
								}
							}
							break;
						case 'hidden':
							if( '' == $(this).val() && 'required' == $(this).attr('required') ) {
								boolFuncResponse &= false;
								$( '#form_error_msg' ).append( '<span class="font14 lineheight">' + $(this).attr('required_msg') + '</span><br>' );
								if( 'undefined' !== typeof filterId ) {
									addFilterError( filterId, $(this).attr('required_msg') );
								}
							}
							break;
						case 'textarea':
							break;
						case 'checkbox':
							break;
						case 'radio':
							break;
					}
				}

				// Remove this if we are not using validation_function_name property for any report.
				if( $(this).attr('validation_function_name') ) {
					var boolEvalResult = false;
					var validation_function_name = $(this).attr('validation_function_name');
					var validation_msg = $(this).attr('validation_msg');
					var params = $(this).attr('validation_function_params');
					boolFuncResponse &= boolEvalResult = eval(validation_function_name +"(" +   params + ");");
					if( 'undefined' !== typeof filterId && false == boolEvalResult ) {
						addFilterError( filterId, $(this).attr('validation_msg') );
					}
				}
				// Validate property group filter.
				if( 'undefined' != typeof( property_limit ) && 'undefined' != typeof( property_count ) ) {
					if( ( property_limit < property_count ) && ( 'property_ids_filter' == filterId ) ) {
						var propertyIdsFilter = 'property_ids' + '_filter';
						if( $( 'div#property_list0 ul.open' ).has( 'li' ).length == 0 ) {
							boolValidated = false;
							addFilterError( propertyIdsFilter, $( '#property_list0' ).attr( 'msg' ) );
						}
					}
				}
			});

			reportFormData.find(".js_min_required_validation:visible").each( function() {
				if( undefined !== $( this ).attr( 'min_required' ) ) {
					var strFilterId 			= $(this).attr('id');
					if( -1 == jQuery.inArray( strFilterId.substring(0, strFilterId.length - 7), entrataReports.arrstrExcludeFilterKeyValidation ) ) {
						var intRequiredCount 		= $( this ).attr( 'min_required' );
						var intSelectedListItems 	= 0;

						var boolIsAdvanceFilter = ( 'undefined' !== typeof PropertyGroupCombo && 'undefined' !== typeof( PropertyGroupCombo.type ) && 'Advanced-v2' === PropertyGroupCombo.type );
						if( false === boolIsAdvanceFilter ) {
							boolIsAdvanceFilter = ( 'undefined' !== typeof propertyGroupComboLite && 'undefined' !== typeof( propertyGroupComboLite.type ) && 'Advanced-lite' === propertyGroupComboLite.type );
						}

						if( 'property_group_ids_filter' == strFilterId && true === boolIsAdvanceFilter ) {
							intSelectedListItems = $( this ).find( 'input[type=hidden]' ).length;
						} else {
							intSelectedListItems = $( this ).find( 'input[type=checkbox]:checked' ).length;
						}
						if( 'report_filter[ps_product_ids]' == $( this ).find( 'input[type=hidden]' ).attr('name') ) {
							intSelectedListItems = intSelectedListItems - 1;
						}
						// Validation added for case when we select select all and there is no element present in multi select list.
						strComboBoxFilterkeyTest = strFilterId.replace( '_filter', '_list_select_all' );
						if( 1 == intSelectedListItems && true == $( '#' + strComboBoxFilterkeyTest ).is( ':checked' ) ) {
							intSelectedListItems = 0;
						}

						if( intSelectedListItems < intRequiredCount ) {

							if( undefined !== $( this ).attr( 'msg' ) ) {
								var strErrorMessage = $( this ).attr( 'msg' );
							} else {
								var strErrorMessage = __( 'Invalid input.' );
							}
							$( '.report-filters #form_error_msg' ).append( '<span class="font14 lineheight">' + strErrorMessage + '</span><br>' );
							if( 'undefined' !== strFilterId ) {
								addFilterError( strFilterId, strErrorMessage );
							}
							boolValidated = false;
						}
					}
				}
			});

			if( true == boolFuncResponse && true == boolValidated ) {
				return true;
			} else {
				$( '.update-filters' ).hide();
				$( '#form_error_msg' ).css({'line-height': '14px'});
				$( '#form_error' ).show( 'slow' );
				return false;
			}
		} catch( e ) {
			return false;
		}
		return true;
	}

	function validateDisplayOptions() {
		$( '.alert_display_options_error_div' ).html( '' );

		var visibleDatasets,
			strErrorMsgs = '';

		if( 'undefined' === typeof $( '.js-dataset-count' ).val() ) {
			return true;
		}

		if( 1 == $( '.js-dataset-count' ).val() ) {
			visibleDatasets = 1; // If display options is not yet clicked arrobjDisplayOptions.datasets will not be set hence setting visibleDatasets to 1
		} else {
			visibleDatasets = 0;
			$( '.js-display-options-dataset' ).each( function() {
				if( $( this ).prop( 'checked' ) ) {
					visibleDatasets = visibleDatasets + 1;
				}
			});
		}

		if( 0 === visibleDatasets ) {
			strErrorMsgs = __( 'Please select at least one dataset.' );
		}

		if( '' !== strErrorMsgs ) {
			$('.global-error').html( '<span class="alert slim error"><i></i>' + strErrorMsgs + '</span>').fadeIn(100);
			$( '.alert_display_options_error_div' ).html( '<p class="alert error slim"><i></i>' + strErrorMsgs + '</p>' ).show();
			return false;
		}

		return true;
	}

	function showFilterValues() {
		var $filter		= $(this).parent(),
			$values		= $(this).siblings('.js-filter-value-table'),
			valuesHtml	= $values[0].outerHTML,
			title		= $('#' + $filter.attr('id') ).find('label:first').text(),
			id			= $filter.attr('id') + '_display_values';

		$values.attr('id', id);

		psi.patterns.loadDialog( {
			width:			350,
			height:			'auto',
			strUrl:			'',
			strContentId:	id,
			title: title,
			beforeClose:	function( e, ui ) {
				$filter.append(valuesHtml);
			}
		} );
	}

	function updateJumplist(e) {
		var propClass = $(this).val(),
			$scrollingBody = $(this).parents( '.view-data-content' ),
			parent = $(this).parents('.view-data-container'),
			module = parent.find( '.generate-report' ).data( 'module' ),
			report_unique_id = parent.find( '.generated-report' ).data( 'report-unique-id' ),
			$modalHold = parent.parents('.modal-body-container'),
			$dataTables = parent.find( '.dataset table' ),
			$scrollTarget = parent.find( '.' + propClass ),
			$header = parent.find( '.table-header' );

		let $currentReportDataGroupMap = 'undefined' !== typeof $dataGroupMap && 'undefined' !== typeof $dataGroupMap[report_unique_id] ? $dataGroupMap[report_unique_id] : new Map();
		if( 0 < $currentReportDataGroupMap.size ) {
			$scrollTarget = $currentReportDataGroupMap.get( propClass );
		}

		if( $(this).hasClass( 'static-data' ) ) {
			// All sections are displayed at once; scroll to the selected one
			var headerBottom = -Math.abs($header.position().top + $header.outerHeight( true ) - $scrollTarget.children().first().outerHeight() - 1);
			$scrollingBody.scrollTo(parent.find( '.' + propClass ),500,{ offset: { top: headerBottom, left:0 } });
		} else {
			if( $(this).hasClass( 'pagination' ) ) {
				var pageUrl = $(this).find( "[value='" + propClass + "']" ).data( 'href' ),
					pageNo = pageUrl.match(/&page_no=(\d+)/)[1];

				if( null != pageNumber ) {
					this[module].pageOptions = 'page_no=' + pageNumber;
				} else {
					this[module].pageOptions = '';
				}
			}

			if( 0 == $scrollTarget.length ) {
				// Selected page has not previously been loaded, so load it
				// Send asyncRequest with form data
				generateReportAsync( parent, 'html', true );
			} else {
				const selectedPageDetails = $currentReportDataGroupMap.get( propClass );
				if( 'undefined' !== typeof selectedPageDetails && 0 < selectedPageDetails.length ) {
					$dataTables.find( "tbody[data-section]" ).each( function( index, ele ) {
						ele.replaceWith( selectedPageDetails[index] );
					} );
				}
				if( $(this).hasClass( 'js-paginate-by-dataset' ) ) {
					$( '.view-data-table-header' ).find( ".generic-reports-slant:not(.dataset)[data-dataset-id!='" + propClass + "']" ).hide();
					$( '#generated-report' ).find( ".dataset-sizer[data-dataset-id!='" + propClass + "']" ).hide();
					$( '.view-data-table-header' ).find( ".generic-reports-slant:not(.dataset)[data-dataset-id='" + propClass + "']" ).show();
					$( '#generated-report' ).find( ".dataset-sizer[data-dataset-id='" + propClass + "']" ).show();
				}
				parent.find( '.a-graph' ).css( 'display', 'none' );
				// This is to add multiple literal graphs instead of just one, adding the correct data and split value for each graph.
				// These graphs would then appear with the appropriate data page.
				var selectedPageValue = $( 'option:selected', this ).text();
				if( selectedPageValue ) {
					parent.find( '.a-graph[data-split-value="' + selectedPageValue + '"]' ).css( 'display', 'inline-block' );
					parent.find( '.a-graph[data-page="' + propClass + '"]' ).css( 'display', 'inline-block' );
				} else {
					parent.find( '.a-graph[data-page="' + propClass + '"], .a-graph:not([data-page])' ).css( 'display', 'inline-block' );
				}

				$scrollTarget.fadeIn( 700, function() {
					// to reset the horizontal scroll bar position
					psi.patterns.bindEssentials();
				}).delay( 701 ).queue( function() {
					psi.patterns.setEqualHeights( { elementSelector: '.view-data-container .equal-heights' } );
					$(this).dequeue();
				});
				$modalHold.animate( { scrollTop: 0 }, 700 );

				// To render Sparkline format for updated jumplist value
				FusionCharts.ready( function() {

					const sparklineHTMLCollection = document.getElementsByClassName( 'sparkline' ) || []
					for( let element of sparklineHTMLCollection ) {
						if( document.getElementById( element.id ) ) {
							let sparklineConfig = element.getAttribute( 'data-sparkline-config' );
							let fusioncharts = new FusionCharts( JSON.parse( sparklineConfig ) );
							fusioncharts.render();
						}
					}
				} );
			}
		}


	}

	function resetReportFilters() {
		var reportId				= $( this ).data( 'instance_id' ),
			instanceId				= $( this ).data( 'report_instance_id' ),
			reportVersionId			= $( this ).data( 'report_version_id' ),
			instanceName			= $( this ).data( 'report-name' ),
			filter_reset			= $( this ).data( 'filter_reset' ),
			override_locked_filters	= $( this ).data( 'override-locked-filters' ),
			reportUrl			= '/?module=' + modules.instances + '&action=view_instance&is_new_instance_view=1';

		psi.patterns.ajaxRequest({
			url: reportUrl + '&name=' + instanceName + '&report_instance[id]=' + reportId + '&report_instance[report_version_id]=' + reportVersionId + '&report_instance[report_id]=' + instanceId + '&filter_reset=' + filter_reset + '&override_locked_filters=' + override_locked_filters,
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '.view-data-tools' });
			},
			complete : function( response ) {
				psi.patterns.removeLoadingImage({ strElementSelector: '.view-data-tools' });
				setTimeout( function(){
					$('.view-data-filters i.lock').each( function(){
						$( this ).removeClass( 'js-lock' );
					});
				}, 100 );
				$('.view-data-tools.view-data-filters.js-view-data-filters.js-sticky').remove();
				$('.rewrite-report-filter').replaceWith( response.responseText );
				var intUniqueId = $('.rewrite-report-filter').data('unique-id');
				$('.view-report-instance').attr( 'data-unique-id', intUniqueId );

				$('.js-view-data-filters').css({ 'position' : 'fixed', 'top' : '100px', 'display' : 'block' });
				bindEssentials();
				const event = new CustomEvent( 'onResetReportFilter' );
				document.dispatchEvent( event );
			}
		});
	}

	function resetAddReportFilters() {
		var reportId = $( this ).data( "instance_id" ),
			instanceId = $( this ).data( "report_instance_id" ),
			reportVersionId = $( this ).data( "report_version_id" ),
			groupInstanceId = $(this).data("report-group-instance-id"),
			instanceName = $( this ).data( "report-name" ),
			filter_reset = $( this ).data( "filter_reset" ),
			module_id = $( this ).data( "module_id" ),
			add_new_instance = $( this ).data( "add_new_instance" ),
			reportUrl = '/?module=' + modules.instances;

		let strUserIdParam = '';
		if( $('select[name="report_filter[user]"]').val() ) {
			strUserIdParam = '&company_user=' + $('select[name="report_filter[user]"]').val();
		}

		psi.patterns.ajaxRequest( {
			url: reportUrl + '&name=' + instanceName + '&report_instance[id]=' + reportId + '&report_group_instance[id]=' + groupInstanceId + '&report_instance[report_version_id]=' + reportVersionId + '&report_instance[report_id]=' + instanceId + '&filter_reset=' + filter_reset + '&report_instance[module_id]=' + module_id + '&add_new_instance=' + add_new_instance + strUserIdParam,
			beforeSend: function() {
				psi.patterns.showLoadingImage( { strElementSelector: '.view-data-tools' } );
			},
			complete: function( response ) {
				psi.patterns.removeLoadingImage( { strElementSelector: '.view-data-tools' } );
				setTimeout( function() {
					$( '.js-launch-vertical-toolbar' ).trigger( 'click' );
					$( '.view-data-filters i.lock' ).each( function() {
						$( this ).removeClass( 'js-lock' );
					} );
				}, 100 );
				$( '.view-data-tools.view-data-filters.js-view-data-filters.js-sticky' ).remove();
				$( '.rewrite-report-filter' ).replaceWith( response.responseText );
				var intUniqueId = $( '.rewrite-report-filter' ).data( 'unique-id' );
				$( '.view-report-instance' ).attr( 'data-unique-id', intUniqueId );
				$( '.js-view-data-filters' ).css( { 'position': 'fixed', 'top': '100px', 'display': 'block' } );
				$( '.js-add-to' ).trigger( 'change' );
				bindEssentials();
			}
		} );
	}

	function showDownloadFileMessage( format, show  ) {
		var generatedReportDiv = $( '.generated-report' ),
			downloadFileMessageDiv = $( '.table-header' ).find( '.js-download-file-message' ),
			isReactWorkflowEnabled = $( '[name="report_instance[is_react_workflow_enabled]"]' ).val();

		if( 'pdf' === format || 'xls' === format || 'csv' === format ) {
			if( show  ) {
				downloadFileMessageDiv.removeClass( 'hide' );
				generatedReportDiv.css( { 'margin-top': '80px' } );
				downloadFileMessageDiv.addClass( 'show' );
			} else {
				downloadFileMessageDiv.fadeOut( "slow", function() {
					if( isReactWorkflowEnabled ) {
						generatedReportDiv.css( { 'margin-top': '10px' } );
					} else {
						generatedReportDiv.css( { 'margin-top': '45px' } );
					}
					downloadFileMessageDiv.removeClass( 'show' );
					downloadFileMessageDiv.addClass( 'hide' ).removeAttr( "style" );
				});
			}
		}
	}

	// endregion

	// region Report Migration

	function bindReportMigrationEventHandlers() {
		var $body = $('body');

		$body.off('click', '.js-migration-list').on('click', '.js-migration-list', migrationList );
		$body.off('click', '.js-migration-add').on('click', '.js-migration-add', migrationAdd );
		$body.off('click', '.js-fix-migration-filter').on('click', '.js-fix-migration-filter', migrationAdd );
		$body.off('click', '.js-migration-insights-add').on('click', '.js-migration-insights-add', migrationInsightsAdd );
		$body.off('click', '.js-migration-schedule-add').on('click', '.js-migration-schedule-add', migrationScheduleAdd );
		$body.off('click', '.js-migration-packet-add').on('click', '.js-migration-packet-add', migrationPacketAdd );
		$body.off('click', '.js-migration-delete .actions-btn').on('click', '.js-migration-delete .actions-btn', migrationDelete );
		$body.off('click', '.js-delete-migration-filter .actions-btn').on('click', '.js-delete-migration-filter .actions-btn', migrationPrivateDelete );
		$body.off('click', '.js-migration-insight-report-delete .actions-btn').on('click', '.js-migration-insight-report-delete .actions-btn', migrationInsightsDelete );
		$body.off('click', '.js-migration-add-instance').on('click', '.js-migration-add-instance', migrationAddInstance );
		$body.off('click', '.js-insert-migration-insights').on('click', '.js-insert-migration-insights', insertMigrationInsights );
		$body.off('click', '.js-insert-migration-schedule').on('click', '.js-insert-migration-schedule', insertMigrationSchedule );
		$body.off('click', '.js-insert-migration-packet').on('click', '.js-insert-migration-packet', insertMigrationPacket );
		$body.off('click', '.js-change-report-system').on('click', '.js-change-report-system .actions-btn', changeReportSystem );
		$body.off('click', '.js-select-all-schedules').on('click', '.js-select-all-schedules', selectAllSchedules );
	}

	function migrationList(e) {
		e.preventDefault();
		psi.patterns.loadLargeDialog({
			title: __( 'Manage Company Reports' ),
			strContentId: 'manage_company_reports',
			strUrl: '/?module=' + modules.migration + '&action=migration_list',
			complete: function() {
				checkAllReportInstance( 'manage_company_reports' );
			},
			onCloseCallback: function() {
				// reload cache module.
				window.location.href = '/?module=helpxxx&action=reload_modules_cache&hide_message=1&return_url=/?module=' + modules.reportLibrary;
			}
		});
	}

	function selectAllSchedules(e) {
		$('#enabled').toggle();
	}

	function migrationAddInstance(e) {
		e.preventDefault();
		var data				= $('#js-migration-add-form').serializeArray(),
			boolValidated		= true,
			arrStrInstances		= [],
			isPrivateFailed		= $( 'input:hidden[name=is_private_failed]' ).val(),
			boolIsArchive		= "1" === $( 'input:hidden[name=is_archive]' ).val() ? true : false;

		$( '[name^="report_instance[name]"]' ).each( function( index, value ){
			if( 0 == value.value.trim().length ) {
				$( '#migration_add' ).find('p.alert').remove();
				$( '#migration_add' ).prepend( '<p class="alert error slim"><i></i>' + __( 'Enter instance name' ) + '</p>' );
				boolValidated = false;
			} else {
				arrStrInstances.push( value.value );
			}
		});

		$('[name^="report_instance[report_version_id]"]').each( function( index, value ) {
			if( 0 == value.value.trim().length ) {
				$( '#migration_add' ).find( 'p.alert' ).remove();
				$( '#migration_add' ).prepend( '<p class="alert error slim"><i></i>' + __( 'Please select the report version.' ) + '</p>' );
				boolValidated = false;
			}
		});

		if( boolValidated ) {
			var strActiveTabName = getActiveTabName();
			psi.patterns.ajaxRequest({
				url: '?module=' + modules.migration + '&action=migration_add_instance',
				data: data,
				beforeSend: function() {
					psi.patterns.showLoadingImage({ strElementSelector: '#js-migration-add-form' });
					$('.js-migration-add-instance').attr( 'disabled', 'disabled' );
				},
				complete: function( response ) {
					psi.patterns.removeLoadingImage({ strElementSelector: '#js-migration-add-form' });
					var arrResponse = JSON.parse(response.responseText);
					$('#js-migration-add-form > table > tbody > tr').each( function(){
						$(this).removeClass( 'js-failed-instance' );
					});

					$('#migration_add > p.alert').remove();
					if( arrResponse.error ) {
						$( '#migration_add' ).prepend( '<p class="alert error slim"><i></i>' + arrResponse.message + '</p>' );
						$('.js-migration-add-instance').removeAttr( 'disabled' );
						let failedFilterIds = ( typeof arrResponse.failed_filter_ids !== 'undefined' && arrResponse.failed_filter_ids.length > 0 ) ? arrResponse.failed_filter_ids : [];
						$('#js-migration-add-form > table > tbody > tr').each( function(){
							var filterId = $(this).data('filter-id');
							if( -1 !== $.inArray( filterId, failedFilterIds ) ) {
								$(this).addClass( 'js-failed-instance' );
							}
						});
					} else {
						$( '#migration_add' ).prepend( '<p class="alert success slim"><i></i>' + __( 'Report instance inserted successfully' ) + '</p>' );
						psi.patterns.ajaxRequest({
							url: '?module=' + modules.migration + '&action=migration_delete&is_skip_list=' + isPrivateFailed + getQuickMigrationUri(),
							data: { 'report_filter[ids]' : arrResponse.filter_ids },
							success : function( response ) {
								if( isPrivateFailed ) {
									location.reload();
								} else {
									$("#migration_add").dialog("close");
									$('#manage_company_reports').html(response);
									if( 0 < strActiveTabName.length ) {
										$( '.' + strActiveTabName ).trigger( 'click' );
									}
									setTimeout( function(){
										//$('#manage_company_reports').html(response);
										checkAllReportInstance( 'manage_company_reports' );
										bindEssentials();
									}, 500 );
								}
							},
							complete: function() {
								if( boolIsArchive ) {
									window.location.href = '/?module=helpxxx&action=reload_modules_cache&hide_message=1&return_url=/?module=' + modules.archive;
								}
							}
						} );
					}
				},
				error: function() {
					// TODO: Populate all error messages on inputs, back up to earliest step with an error
				}
			} );
		}
	}

	function boolIsErrorTab() {
		return ( $( 'ul.tabs > li.js-failed-reports-tab' ).hasClass( 'selected' ) ) ? 1 : 0;
	}

	function getActiveTabName() {
		var strActiveTabName = $( 'ul.tabs > li.selected' ).attr('class');
		return ( strActiveTabName ) ? strActiveTabName.replace(' selected', '') : '';
	}

	function getUpdatedMigrationList( popupName = '' ) {
		let isErrorTab = boolIsErrorTab();
		psi.patterns.ajaxRequest({
			url: '?module=' + modules.migration + '&action=migration_list' + getQuickMigrationUri(),
			success : function( response ) {
				$( '#' + popupName ).dialog( 'close' );
				$( '#manage_company_reports' ).html( response );
				if( isErrorTab ) {
					$( '.js-failed-reports-tab' ).trigger( 'click' );
				}
				setTimeout( function() {
					//$('#manage_company_reports').html(response);
					checkAllReportInstance( 'manage_company_reports' );
					bindEssentials();
				}, 500 );
			}
		});
	}

	function insertMigrationInsights(e) {
		e.preventDefault();
		var data = $('#js-migration-insights-add-form').serializeArray(),
			boolValidated = true,
			arrStrInstances = [];

		$('[name^="report_instance[name]"]').each( function( index, value ){
			if( 0 == value.value.trim().length ) {
				$( '#migration_add_insights' ).find('p.alert').remove();
				$( '#migration_add_insights' ).prepend( '<p class="alert error slim"><i></i>' + __( 'Enter instance name' ) + '</p>' );
				boolValidated = false;
			} else {
				arrStrInstances.push( value.value );
			}
		});

		if( true == boolValidated ) {
			psi.patterns.ajaxRequest( {
				url: '?module=' + modules.migration + '&action=insert_migration_insights',
				data: data,
				beforeSend: function() {
					psi.patterns.showLoadingImage( { strElementSelector: '#js-migration-insights-add-form' } );
					$('.js-insert-migration-insights').attr( 'disabled', 'disabled' );
				},
				complete: function( response ) {
					psi.patterns.removeLoadingImage( { strElementSelector: '#js-migration-insights-add-form' } );
					var arrResponse = JSON.parse( response.responseText );
					$('#js-migration-insights-add-form > table > tbody > tr').each( function(){
						$(this).attr( 'style','');
					});
					$( '#migration_add_insights > p.alert' ).remove();
					if( true === arrResponse.error ) {
						$( '#migration_add_insights' ).prepend( '<p class="alert error slim"><i></i>' + arrResponse.message + '</p>' );
						$('.js-insert-migration-insights').removeAttr( 'disabled' );
						let failedInstanceIds = 'undefined' !== typeof arrResponse.failed_instance_ids && 0 < arrResponse.failed_instance_ids.length ? arrResponse.failed_instance_ids : [];
						$('#js-migration-insights-add-form > table > tbody > tr').each( function(){
							let instanceId = $(this).data('instance-id');
							if( -1 !== $.inArray( instanceId, failedInstanceIds ) ) {
								$(this).css({"background-color" : "#ffdadb !important"});
							}
						});
					} else {
						$( '#migration_add_insights' ).prepend( '<p class="alert success slim"><i></i>' + __( 'Report insights migrated successfully' ) + '</p>' );
						let isErrorTab = boolIsErrorTab();
						psi.patterns.ajaxRequest( {
							url: '?module=' + modules.migration + '&action=migration_delete' + getQuickMigrationUri(),
							data: { 'report_instance[ids]': arrResponse.instance_ids, 'is_insights_report': true },
							success: function( response ) {
								$( "#migration_add_insights" ).dialog( "close" );
								$( '#manage_company_reports' ).html( response );
								if( isErrorTab ) {
									$( '.js-failed-reports-tab' ).trigger( 'click' );
								} else {
									$( '#manage_company_reports' ).find( '.js-insight-report-tab' ).trigger( 'click' );
								}
								setTimeout( function() {
									//$('#manage_company_reports').html(response);
									checkAllReportInstance( 'manage_company_reports' );
									bindEssentials();
								}, 500 );
							}
						} );
					}
				},
				error: function() {
					// TODO: Populate all error messages on inputs, back up to earliest step with an error
				}
			} );
		}
	}

	function insertMigrationSchedule(e) {
		e.preventDefault();
		var data = $('#js-migration-schedule-add-form').serializeArray(),
			boolValidated = true,
			arrStrInstances = [];

		$('[name^="report_instance[name]"]').each( function( index, value ){
			if( 0 == value.value.trim().length ) {
				$( '#migration_schedule_add' ).find('p.alert').remove();
				$( '#migration_schedule_add' ).prepend( '<p class="alert error slim"><i></i>' + __( 'Enter schedule name' ) + '</p>' );
				boolValidated = false;
			} else {
				if( 0 != arrStrInstances.length ) {
					if( true == arrStrInstances.includes( value.value ) ) {
						$( '#migration_schedule_add' ).find('p.alert').remove();
						$( '#migration_schedule_add' ).prepend( '<p class="alert error slim"><i></i>' + __( 'Cannot save due to duplicate schedule names.  Please enter unique names and try again.' ) + '</p>' );
						boolValidated = false;
					}
				}
				arrStrInstances.push( value.value );
			}
		});

		if( true == boolValidated ) {
			psi.patterns.ajaxRequest({
				url: '?module=' + modules.migration + '&action=insert_migration_schedule',
				data: data,
				beforeSend: function() {
					psi.patterns.showLoadingImage({ strElementSelector: '#js-migration-schedule-add-form' });
					$('.js-insert-migration-schedule').attr( 'disabled', 'disabled' );
					$('.migration_schedule_id').each( function() {
						$('.migration-table').find('tr[data-schedule-id="' + this.value + '"]').hide();
					} );
				},
				complete: function( response ) {
					psi.patterns.removeLoadingImage({ strElementSelector: '#js-migration-schedule-add-form' });
					var arrResponse = JSON.parse(response.responseText);
					$('#migration_schedule_add > p.alert').remove();
					if( 'failed' == arrResponse.status ) {
						$( '#migration_schedule_add' ).prepend( '<p class="alert error slim"><i></i>' + arrResponse.messages[0] + '</p>' );
						$('.js-insert-migration-schedule').removeAttr("disabled");
						$('.migration_schedule_id').each( function() {
							$('.migration-table').find('tr[data-schedule-id="' + this.value + '"]').show();
						} );
						$( '#js-migration-schedule-add-form > table > tbody > tr' ).each( function() {
							if( $(this).data('filter-id') == arrResponse.failed_filter_id ) {
								$(this).addClass( 'js-failed-instance' );
							}
						} );
					} else {
						$( '#migration_schedule_add' ).prepend( '<p class="alert success slim"><i></i>' + __( 'Report schedule(s) migrated successfully' ) + '</p>' );
						getUpdatedMigrationList( 'migration_schedule_add' );
					}
				},
				error: function() {
					// TODO: Populate all error messages on inputs, back up to earliest step with an error
				}
			});
		}
	}

	function insertMigrationPacket(e) {
		e.preventDefault();
		var data = $('#js-migration-packet-add-form').serializeArray(),
			boolValidated = true,
			arrStrInstances = [];

		if( 0 == $('[name^="packet_name"]').val().trim().length ) {
			$( '#migration_packet_add' ).find('p.alert').remove();
			$( '#migration_packet_add' ).prepend( '<p class="alert error slim"><i></i>' + __( 'Enter packet name' ) + '</p>' );
			boolValidated = false;
		}

		$('[name^="report_instance[name]"]').each( function( index, value ){
			if( 0 == value.value.trim().length ) {
				$( '#migration_packet_add' ).find('p.alert').remove();
				$( '#migration_packet_add' ).prepend( '<p class="alert error slim"><i></i>' + __( 'Enter instance name' ) + '</p>' );
				boolValidated = false;
			} else {
				if( 0 != arrStrInstances.length ) {
					if( true == arrStrInstances.includes( value.value ) ) {
						$( '#migration_packet_add' ).find('p.alert').remove();
						$( '#migration_packet_add' ).prepend( '<p class="alert error slim"><i></i>' + __( 'Cannot save due to duplicate instance names.  Please enter unique names and try again.' ) + '</p>' );
						boolValidated = false;
					}
				}
				arrStrInstances.push( value.value );
			}
		});

		if( true == boolValidated ) {
			psi.patterns.ajaxRequest({
				url: '?module=' + modules.migration + '&action=insert_migration_packet',
				data: data,
				beforeSend: function() {
					psi.patterns.showLoadingImage({ strElementSelector: '#js-migration-packet-add-form' });
					$('.js-insert-migration-packet').attr( 'disabled', 'disabled' );
					$('.migration_schedule_id').each( function() {
						$('.migration-table').find('tr[data-schedule-id="' + this.value + '"]').hide();
					} );
					$( '#js-migration-packet-add-form > table > tbody > tr' ).each( function() {
						$( this ).removeClass( 'js-failed-instance' );
					} );
				},
				complete: function( response ) {
					psi.patterns.removeLoadingImage({ strElementSelector: '#js-migration-packet-add-form' });
					var arrResponse = JSON.parse(response.responseText);
					$('#migration_packet_add > p.alert').remove();
					if( 'failed' == arrResponse.status || ( typeof arrResponse.error !== 'undefined' && arrResponse.error.length > 0 ) ) {
						let strErrorMessage = ( typeof arrResponse.error !== 'undefined' && arrResponse.error.length > 0 ) ? arrResponse.error.toString() : arrResponse.messages[0];
						$( '#migration_packet_add' ).prepend( '<p class="alert error slim"><i></i>' + strErrorMessage + '</p>' );
						$('.js-insert-migration-packet').removeAttr("disabled");
						$('.migration_schedule_id').each( function() {
							$('.migration-table').find('tr[data-schedule-id="' + this.value + '"]').show();
						} );
						$( '#js-migration-packet-add-form > table > tbody > tr' ).each( function(){
							if( $( this ).data( 'filter-id' ) == arrResponse.failed_filter_id ) {
								$( this ).addClass( 'js-failed-instance' );
							}
						});
					} else {
						$( '#migration_packet_add' ).prepend( '<p class="alert success slim"><i></i>' + __( 'Report packet migrated successfully' ) + '</p>' );
						getUpdatedMigrationList( 'migration_packet_add' );
					}
				},
				error: function() {
					// TODO: Populate all error messages on inputs, back up to earliest step with an error
				}
			});
		}
	}

	function migrationAdd(e) {
		e.preventDefault();
		var $instance	= $( this ).parents( '.js-failed-private-filter' ),
			strTitle	= __( 'Add to Company Reports' );

		if( $instance.data( 'is-failed-private-filter' ) ) {
			var $instance	= $( this ).parents( '.js-failed-private-filter' ),
				data		= { 'report_filter' : { 'ids': [ $instance.data('report-filter-id') ] }, 'is_private_failed' : true };
			$( '.actiontip' ).remove();
			strTitle = __( 'Add to My Reports' );
		} else {
			var is_archive				= $(this).data('is-failed-instances'),
				migration_list_form		= ( is_archive ) ? 'js-failed-migration-list-form' : 'js-migration-list-form',
				migration_filter_list	= ( is_archive ) ? 'failed-migration-filter-list' : 'migration-filter-list',
				instance_error			= ( is_archive ) ? 'js-select-failed-instance-error' : 'js-select-instance-error';
			var is_private_filter = ( $( this ).data( 'is-private-filter' ) ) ? 1 : 0;
			if( is_private_filter ) {
				migration_list_form		= 'js-private-migration-list-form';
				migration_filter_list	= 'private-migration-filter-list';
				instance_error			= 'js-private-select-instance-error';
			}

			var instance = $( this ).parents( '.js-report-instance' ),
				data = ( null === instance.data( 'filter-id' ) ) ? $( '#' + migration_list_form ).serialize() : { 'report_filter' : { 'ids': [ instance.data( 'filter-id' ) ] } };

			if( 0 === $( '#manage_company_reports #' + migration_filter_list + ' .form-checkbox:checked' ).length && null === instance.data( 'filter-id' ) ) {
				$('.' + instance_error).slideDown(300).delay(2000).slideUp(500);
				return false;
			}
		}

		psi.patterns.loadDialog({
			width:1200,
			height:800,
			title: strTitle,
			strContentId:'migration_add',
			method:'post',
			strUrl: '/?module=' + modules.migration + '&action=migration_add' + getQuickMigrationUri() + '&is_private_filter=' + is_private_filter,
			data:data
		});
	}

	function migrationInsightsAdd(e) {
		e.preventDefault();
		var is_archive				= $(this).data('is-failed-insight-instances'),
			migration_insight_form	= ( is_archive ) ? 'js-failed-migration-insight-form' : 'js-migration-insight-report-form',
			migration_insight_list	= ( is_archive ) ? 'failed-migration-insight-list' : 'migration-insight-report-list',
			instance_error			= ( is_archive ) ? 'js-select-failed-insight-instance-error' : 'js-select-insight-instance-error';
		var instance = $(this).parents('.js-insight-report-instance'),
			data = ( null === instance.data( 'instance-id' ) ) ? $( '#' + migration_insight_form ).serialize() : { 'report_instance' : { 'ids' : [ instance.data( 'instance-id' ) ] } };
		if( 0 === $( '#manage_company_reports #' + migration_insight_list + ' .form-checkbox:checked' ).length && null === instance.data('instance-id') ) {
			$('.' + instance_error ).slideDown(300).delay(2000).slideUp(500);
			return false;
		}

		psi.patterns.loadDialog({
			width:950,
			height:550,
			title: __( 'Add to Company Reports' ),
			strContentId:'migration_add_insights',
			method:'post',
			strUrl: '/?module=' + modules.migration + '&action=migration_insights_add' + getQuickMigrationUri(),
			data:data
		});
	}

	function migrationScheduleAdd(e) {
		e.preventDefault();
		var is_archive				= $(this).data('is-failed-schedules'),
			schedule_list_form		= ( is_archive ) ? 'js-failed-migration-schedule-list-form' : 'js-migration-schedule-list-form',
			migration_schedule_list	= ( is_archive ) ? 'migration-failed-schedule-list' : 'migration-schedule-list',
			schedule_error			= ( is_archive ) ? 'js-failed-select-schedule-error' : 'js-select-schedule-error';

		var instance = $(this).parents('.js-report-schedule'),
			data = ( null === instance.data('filter-id') ) ? $( '#' + schedule_list_form ).serialize() : { 'report_filter' : { 'ids': [ "(" + instance.data('report-version-id') + "," + instance.data('filter-id') + ")_" + instance.data('filter-id') + "_" +  + instance.data('schedule-id') ], 'failed_reason' : [ instance.data('filter-id') + "_" + instance.data('schedule-failed-reason') ] } };

		if( 0 === $( '#manage_company_reports #' + migration_schedule_list + ' .form-checkbox:checked' ).length && null === instance.data('filter-id') ) {
			$('.' + schedule_error).slideDown(300).delay(2000).slideUp(500);
			return false;
		}

		psi.patterns.loadDialog({
			width:750,
			height:450,
			title: __( 'Add to Report Schedules' ),
			strContentId:'migration_schedule_add',
			method:'post',
			strUrl: '/?module=' + modules.migration + '&action=migration_schedule_add' + getQuickMigrationUri(),
			data:data
		});
	}

	function migrationPacketAdd(e) {
		e.preventDefault();

		var instance = $(this).parents('.js-report-packet'),
			data = { 'report_filter_ids' : instance.data('filter-id'), 'packet_name' : instance.data('packet-name'), 'company_user_id' : instance.data('company-user-id'), 'schedule_id' : instance.data('schedule-id'), 'failed_reason' : instance.data('schedule-failed-reason'), 'failed_filter_id' : instance.data('failed-filter-id') };

		psi.patterns.loadDialog({
			width:1200,
			height:450,
			title: __( 'Add to Report Packets' ),
			strContentId:'migration_packet_add',
			method:'post',
			strUrl: '/?module=' + modules.migration + '&action=migration_packet_add' + getQuickMigrationUri(),
			data:data
		});
	}

	function migrationDelete(e) {
		e.preventDefault();
		var strActiveTabName = getActiveTabName();

		var instance = $(this).parents('.js-report-instance'),
			data = '';

		if( null === instance.data('filter-id') ) {
			data = $( '#js-migration-list-form' ).serializeArray();
			data.forEach( function( filterId, index ) {
				var intFilterId = filterId.value.replace(/\(|\)/g,'').split(',');
				filterId.value = intFilterId[1];
			});
		} else {
			data = { 'report_filter' : { 'ids': [ instance.data('filter-id') ] } };
		}

		if( 0 === $( '#manage_company_reports .form-checkbox:checked' ).length && null === instance.data('filter-id') ) {
			$('.js-select-instance-error').slideDown(300).delay(2000).slideUp(500);
			$('.tip').remove();
			return false;
		}

		psi.patterns.ajaxRequest({
			url: '?module=' + modules.migration + '&action=migration_delete' + getQuickMigrationUri(),
			data: data,
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '.js-migration-list-form' });
			},
			complete: function() {
				psi.patterns.removeLoadingImage({ strElementSelector: '#js-migration-list-form' });
				$('.tip').remove();
			},
			success: function( response ) {
				$('.js-update-report-filter').slideDown(300).delay(2000).slideUp(500);
				setTimeout( function(){
					$('#manage_company_reports').html(response);
					if( 0 < strActiveTabName.length ) {
						$( '.' + strActiveTabName ).trigger( 'click' );
					}
					checkAllReportInstance( 'manage_company_reports' );
					bindEssentials();
				}, 500 );
			},
			error: function() {
				// TODO: Populate all error messages on inputs, back up to earliest step with an error
			}
		});
	}

	function migrationPrivateDelete(e) {
		e.preventDefault();

		var data = { 'report_filter' : { 'ids': [ $( this ).data( 'filter-id' ) ] } };

		psi.patterns.ajaxRequest({
			url: '?module=' + modules.migration + '&action=migration_delete&is_skip_list=true',
			data: data,
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '.js-confirm-migration-filter-delete' });
			},
			complete: function() {
				psi.patterns.removeLoadingImage({ strElementSelector: '.js-confirm-migration-filter-delete' });
			},
			success: function( response ) {
				location.reload();
			},
			error: function() {
				// TODO: Populate all error messages on inputs, back up to earliest step with an error
			}
		});
	}

	function migrationInsightsDelete(e) {
		e.preventDefault();

		var instance = $(this).parents('.js-insight-report-instance'),
			data = ( null === instance.data('instance-id') ) ? $( '#js-migration-insight-report-form' ).serialize() + "&is_insights_report=true": { 'report_instance' : { 'ids': [ instance.data('instance-id') ] }, 'is_insights_report': true };

		if( 0 === $( '#manage_company_reports .form-checkbox:checked' ).length && null === instance.data('instance-id') ) {
			$('.js-select-insight-instance-error').slideDown(300).delay(2000).slideUp(500);
			$('.tip').remove();
			return false;
		}
		psi.patterns.ajaxRequest( {
			url: '?module=' + modules.migration + '&action=migration_delete' + getQuickMigrationUri(),
			data: data,
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '.js-migration-insight-form' });
			},
			success: function( response ) {
				psi.patterns.removeLoadingImage({ strElementSelector: '.js-migration-insight-form' });
				$('.tip').remove();
				$( "#migration_add_insights" ).dialog( "close" );
				$( '#manage_company_reports' ).html( response );
				$( '#manage_company_reports' ).find( '.js-insight-report-tab' ).trigger( 'click' );
				$('.js-update-insight-report-filter').slideDown(300).delay(2000).slideUp(500);
				setTimeout( function() {
					//$('#manage_company_reports').html(response);
					checkAllReportInstance( 'manage_company_reports' );
					bindEssentials();
				}, 500 );
			}
		} );

	}

	function changeReportSystem(e) {
		var boolUseNewReporting = $('.current-report-system').find('.js-change-report-system').data('new-report-system');

		psi.patterns.ajaxRequest({
			url: '?module=' + modules.migration + '&action=change_report_system',
			data: {'use_new_system' : boolUseNewReporting},
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '.current-report-system' });
			},
			complete: function() {
				psi.patterns.removeLoadingImage({ strElementSelector: '.current-report-system' });
				$('.tip').remove();
			},
			success: function(e) {
				// reload cache module
				window.location.href = '/?module=helpxxx&action=reload_modules_cache&hide_message=1&return_url='+ encodeURIComponent( '/?module=' + modules.archive +'&success_message=1');
			},
			error: function() {
				// TODO: Populate all error messages on inputs, back up to earliest step with an error
			}
		});
	}

	function checkAllReportInstance( strParentElement) {

		$( '#' + strParentElement + ' .form-checkbox.first' ).click( function() {
			$( '.form-checkbox' ).prop( 'checked', (this.checked ? "checked" : "") );
		} );

		var countAllElement = $( '#' + strParentElement + ' .form-checkbox:not(:first)' ).length;
		$( '#' + strParentElement + ' .form-checkbox:not(:first)' ).click( function() {
			if( true === $( '#' + strParentElement + ' .form-checkbox' ).is( ':checked' ) ) {
				$( '.checkAll' ).prop( 'checked', false );
			} else if( countAllElement === $( '#' + strParentElement + ' .form-checkbox:checked' ).length ) {
				$( '.checkAll' ).prop( 'checked', true );
			}
		} );
	}

	// endregion

	// region Report Documentation

	function bindReportDocumentationEventHandlers() {
		var $body = $('body');
		$body.off('click', '.tab-desc').on('click', '.tab-desc', documentationTabDescription);
		$body.off('click', '.tab-versions').on('click', '.tab-versions', documentationTabVersions);
	}

	function documentationTabDescription() {
		$(this).addClass('selected').siblings().removeClass('selected');
		$('.js-desc').fadeIn();
		$('.js-versions').hide();
	}

	function documentationTabVersions() {
		$(this).addClass('selected').siblings().removeClass('selected');
		$('.js-versions').fadeIn();
		$('.js-desc').hide();
	}

	// endregion

	// region Report Schedules

	function bindReportScheduleEventHandlers() {
		var $body = $('body');
		$body.off( 'click', '.js-create-schedule-btn' ).on( 'click', '.js-create-schedule-btn', addReportSchedule );
		$body.off( 'click', '.js-edit-schedule-btn' ).on( 'click', '.js-edit-schedule-btn', editReportSchedule );
		$body.off( 'click', '.js-save-schedule-btn' ).on( 'click', '.js-save-schedule-btn', submitReportSchedule );
		$body.off( 'click', '.js-update-schedule-btn' ).on( 'click', '.js-update-schedule-btn', submitReportSchedule );
		$body.off( 'click', '.js-property-source-selector' ).on( 'click', '.js-property-source-selector', handleSchedulePropertyGroupSourceSelection );
		$( '.js-delete-schedule-btn' ).off( 'click', '.actions-btn' ).on( 'click', '.actions-btn', deleteReportSchedule );
		$body.off( 'click', 'js-filter-schedule-list' ).on( 'click', '.js-filter-schedule-list', filterSchedulesByCompanyUsers );
		$body.off( 'click', 'js-reset-schedules' ).on( 'click', '.js-reset-schedules', reloadSchedules );

		downloadReportSchedule();

		bindReportRecipientEventHandlers();
	}

	function downloadReportSchedule() {
		$( '.js-schedule-element-download' ).on( 'click', function() {
			entrataReports.intScheduleId = $( this ).data( "schedule-id" );

			if( 1 != $( this ).data( "schedule-type-id" ) && "" != $( this ).data( "schedule-type-id" ) ) {
				( 1 != $( this ).data( "attach-pdf" ) ? $( ".download-pdf" ).hide() : $( ".download-pdf" ).show() );
				( 1 != $( this ).data( "attach-xls" ) ? $( ".download-xls" ).hide() : $( ".download-xls" ).show() );
				( 1 != $( this ).data( "attach-csv" ) ? $( ".download-csv" ).hide() : $( ".download-csv" ).show() );
			} else {
				$( ".download-pdf" ).show();
				$( ".download-xls" ).show();
				$( ".download-csv" ).show();
			}
		} );

		// Options popup for download.
		$( '.js-schedule-element-download' ).psiTooltip( {
			tooltipClass: "download-content",
			trigger: 'click',
			contentSelector: $( '.report-download' ),
			positions: 'left',
			items: '.js-schedule-element-download',
			clickAnywhereToClose: true,
			open: function() {
				bindEssentials();
			}
		} );

		$(document).off('click', '.download-pdf').on('click', '.download-pdf', function(e) {
			if(e.handled !== true) {
				var strOutputType = $(this).hasClass( 'download-pdf' ) ? 'export_pdf' : '';
				downloadSchedule( strOutputType, entrataReports.intScheduleId );
			}
		});

		$(document).off('click', '.download-xls').on('click', '.download-xls', function(e) {
			if(e.handled !== true) {
				var strOutputType = $(this).hasClass( 'download-xls' ) ? 'export_spreadsheet' : '';
				downloadSchedule( strOutputType, entrataReports.intScheduleId );
			}
		});

		$(document).off('click', '.download-csv').on('click', '.download-csv', function(e) {
			if(e.handled !== true) {
				var strOutputType = $(this).hasClass( 'download-csv' ) ? 'export_csv' : '';
				downloadSchedule( strOutputType, entrataReports.intScheduleId );
			}
		});
	}

	function downloadSchedule( strOutputType, intScheduleId ) {
		$('.js-schedule-element-download').psiTooltip('close');

		$.asyncRequest( {
			url: '/?module=' + modules.schedules + '&action=generate_report&report_schedule_id=' + intScheduleId + '&output_type=' + strOutputType,
			data : {
				user_time: ( new Date() ).toString()
			},
			isFile: true,
			method: 'post',
			success: function( response ) {
				$('.ui-icon-closethick').trigger('click');
				$( window ).scrollTop( 0 );
				$( '#alert_error_div' ).html( '' );
				$( '#alert_error_div' ).append( '<p class="alert success slim"><i></i>' + __( 'Report schedule downloaded successfully.' ) + '</p>' ).fadeIn().fadeOut( 5000 );
			},
			error: function( strUrl, strResponse ) {
				$('.ui-icon-closethick').trigger('click');
				var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );
				$( '#alert_error_div' ).html( '' );
				if( null != parsedJson.error ) {
					$( window ).scrollTop( 0 );
					for( i = 0; i < parsedJson.error.length; i++ ) {
						var error = parsedJson.error[i];
						$( window ).scrollTop( 0 );
						$( '#alert_error_div' ).append( '<p class="alert error slim"><i></i>' + error + '</p>' );
					}
					$( '#alert_error_div' ).fadeIn().fadeOut( 20000 );
				}
			}
		} );
	}

	function addReportSchedule() {
		psi.patterns.loadDialog({
			width:950,
			height: 'auto',
			strContentId:'modal_id',
			strUrl:'?module=' + modules.schedules + '&action=create_or_edit_schedule',
			title: __( 'Add Report Schedule' ),
			open: function( event, ui ) {
				function callback() {
					if( 0 < $('#reportInstanceList').length ) {
						$( '.frequency' ).trigger( 'change' );
						$( '.searchBox' ).psiSearchCombobox( {
							delay: 0,
							dataList: $( '#reportInstanceList' ),
							select: function( event, ui ) {
								$( '.searchBox' )
									.attr( 'id', $( ui.item.option ).val() )
									.attr( 'data-selected-report-instance', $( ui.item.option ).attr( 'data-report-instance-name' ) );
								$( '#reportInstanceId' ).val( $( ui.item.option ).data( 'report-instance-id' ) );
								$( '#reportInstanceName' ).val( $( ui.item.option ).data( 'report-instance-name' ) );
								$( '#reportVersionId' ).val( $( ui.item.option ).data( 'report-version-id' ) );
								$( '#reportId' ).val( $( ui.item.option ).data( 'report-id' ) );
							}
						} );
						return true;
					}
					return false;
				}

				reattemptUntilTrue( callback, 500, 120 );
			}
		});
	}

	function editReportSchedule() {
		psi.patterns.loadDialog({
			width:950,
			height: 'auto',
			strContentId:'modal_id',
			strUrl:'/?module=' + modules.schedules + '&action=create_or_edit_schedule' + $(this).data('report-query') + '&report_schedule_id=' + $(this).data("report-schedule-id"),
			title: __( 'Edit Report Schedule' ),
			open: function( event, ui ) {
				function callback() {
					if( 0 < $('#create_edit_report_schedule').length ) {
						$('.frequency').trigger( 'change' );
						return true;
					}
					return false;
				}
				reattemptUntilTrue( callback, 500, 120 )
			}
		});
	}

	function deleteReportSchedule() {
		var intReportScheduleId = $(this).parents('span').parents('i').attr('data-report-schedule-id'),
			intReportId			= $(this).parents('span').parents('i').attr('data-report-id'),
			intReportInstanceId	= $(this).parents('span').parents('i').attr('data-report-instance-id');

		psi.patterns.ajaxRequest({
			strElementSelector: '#scheduled_new_reports_div',
			url: '/?module=' + modules.schedules + '&action=delete_schedule' + '&report_instance_id=' + intReportInstanceId + '&report_schedule_id=' + intReportScheduleId + '&report_id=' + intReportId,
			data: '',
			success: function( strResponse ) {
				psi.patterns.removeLoadingImage({
					strElementSelector: '#scheduled_new_reports_div'
				});
				try {
					var objResponse = $.parseJSON( strResponse );
					if( true === objResponse['success'] ) {
						location.reload();
					} else {
						$( '#modal_id').scrollTop(0);
						$( '#report_new_report_schedule_messages' ).html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + objResponse.message + '</span>' );
					}
				} catch (e) {
					( '#report_new_report_schedule_messages' ).html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + JSON.parse( strResponse ).error + '</span>' );
				}
			}
		});
	}

	function filterSchedulesByCompanyUsers( e ) {
		e.preventDefault();
		$('.js-filter-schedule-form').attr( 'action', '?module=' + modules.schedules );
		$('.js-filter-schedule-form' ).submit();
	};

	function reloadSchedules( e ) {
		e.preventDefault();
		window.location.href = '?module=' + modules.schedules;
	}

	function validateReportSchedules(e) {
		var reportInstanceId = $( 'input:hidden[name="schedule_reports[report_instance_id]"]' ).val(),
			reportInstanceName = $( 'input:hidden[name="schedule_reports[report_instance_name]"]' ).val(),
			reportName = $( '.searchBox' ).val(),
			strMessage = '',
			boolIsValidPacketOrSchedule = true,
			strScheduleMessage = validateReportPacketOrSchedules();

		if( undefined !== reportName || '' == reportInstanceId ) {
			if( !reportName || reportName !== reportInstanceName ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + __( 'Please select a report instance.' );
			}
		}

		// Validate if at least 1 attachment is selected.
		if( !$( '.attachment-preference' ).hasClass( 'on' ) ) {
			boolIsValidPacketOrSchedule = false;
			strMessage = strMessage + ' ' + __( 'Attachment preference is required.' );
		}

		if( undefined !== strScheduleMessage ) {
			boolIsValidPacketOrSchedule = false;
			strMessage = strMessage + ' ' + strScheduleMessage;
		}

		if( '' !== strMessage.trim() ) {
			$( '#modal_id').scrollTop(0);
			$('#report_new_report_schedule_messages').html( '<p class="alert error slim"><i>! </i>' + strMessage + '</p>' ).fadeIn(500);
		}

		return boolIsValidPacketOrSchedule;
	}

	function submitReportSchedule(e) {
		e.preventDefault();
		var intReportScheduledTaskId = $('#reportScheduleId').val();
		if( true === validateReportSchedules(e) ) {
			psi.patterns.ajaxRequest({
				strElementSelector: '#scheduled_new_reports_div',
				url: '/?module=' + modules.schedules + '&action=insert_or_update_schedule' + '&report_schedule_id=' + intReportScheduledTaskId,
				method: 'post',
				data: $( '#create_edit_report_schedule' ).serialize(),
				beforeSend: function() {
					psi.patterns.showLoadingImage({
						strElementSelector: '#modal_id'
					});
				},
				success: function( strResponse ) {
					psi.patterns.removeLoadingImage({ strElementSelector: '#modal_id' });
					try {
						var objResponse = $.parseJSON( strResponse );
						if( true === objResponse['success'] ) {
							psi.patterns.showLoadingImage({
								strElementSelector: '#create_edit_report_schedule'
							});
							location.reload();
						} else {
							$( '#modal_id').scrollTop(0);
							$( '#report_new_report_schedule_messages' ).html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + objResponse.message + '</span>' );
						}
					} catch( e ) {
						$( '#report_new_report_schedule_messages' ).html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + JSON.parse( strResponse ).error + '</span>' );
					}
				}
			});
		}

	}

	function bindReportRecipientEventHandlers() {
		var $body = $('body');

		$body.off( 'click', '.js-recipients' ).on( 'click', '.js-recipients', showRecipients );

	}

	function showRecipients() {
		let intScheduleId = $( this ).data( "schedule-id" );
		let requestedModule = $( this ).data( "module" );

		psi.patterns.loadDialog( {
			width: 900,
			height: 500,
			strContentId: 'schedule-recipients-list',
			title: __( '{%s, 0} Recipients', [ $( this ).data('packet-name') ] )
		} );

		psi.patterns.ajaxRequest( {
			type: 'post',
			strElementSelector: '#schedule-recipients-list',
			url: '/?module=' + requestedModule + '&action=view_report_schedule_recipients&report_schedule_id=' + intScheduleId,
		} );

	}

	function validateReportPacketOrSchedules() {
		var intScheduleFrequency	= $( '#schedule_frequency' ).val(),
			strStartOnDate			= $( '.start_on_date' ).val(),
			strStartOnDateYmd		= $( 'input:hidden[name="schedule_reports[start_on_date]"]' ).val(),
			strOldStartOnDate		= $( '#old_start_on_date' ).val(),
			strEndOnDate			= $( '.end_on_date' ).val(),
			strEndOnDateYmd			= $( 'input:hidden[name="schedule_reports[end_on_date]"]' ).val(),
			strOldEndOnDate			= $( '#old_end_on_date' ).val(),
			boolIsValidPacketOrSchedule = true,
			boolIsValidDay			= false,
			strMessage				= '',
			intDays					= '',
			strWeekDay				= '',
			intCountSelectedFields	= 0,
			strNumDaysRegEx			= /^\d+$/;

		if( reportScheduleTypes.scheduled === parseInt($('.js-packet-types').val()) ) {
			switch( intScheduleFrequency ) {
				case '1':
					intDays = $( '.num-days' ).val();
					if( '' === $.trim( intDays ) ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'Number of Days is required.' );
					} else if( false === strNumDaysRegEx.test( intDays ) ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'The daily schedule rate must be a number.' );
					} else if( 1 > $( '.num-days' ).val() || 31 < $( '.num-days' ).val() ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'The daily schedule rate must be from 1 to 31.' );
					}

					break;

				case '2':
					intDays = $( '.num_weeks' ).val();
					strWeekDay = $( '[name="schedule_reports[week_day]"]' ).val();

					if( '' === $.trim( intDays ) ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'Number of Weeks is required.' );
					} else if( false === strNumDaysRegEx.test( intDays ) ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'The weekly schedule rate must be a number.' );
					} else if( 1 > $( '.num_weeks' ).val() || 4 < $( '.num_weeks' ).val() ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'The weekly schedule rate must be from 1 to 4.' );
					}

					if( '' === strWeekDay ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'Please select a Day of the Week.' );
					}

					break;

				case '3':
					intDays = $( '.num_months' ).val();

					if( '' === $.trim( intDays ) ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'Number of Months is required.' );
					} else if( false === strNumDaysRegEx.test( intDays ) ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'The monthly schedule rate must be a number.' );
					} else if( 1 > $( '.num_months' ).val() || 12 < $( '.num_months' ).val() ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'The monthly schedule rate must be from 1 to 12.' );
					}

					$( "input[name^='schedule_reports[days_of_month]']" ).each( function() {
						if( true === $( this ).parent('li').hasClass( 'selected' ) ) {
							boolIsValidDay = true;
						}
					} );

					break;

				case '4':
					intDays = $( '.ordinal' ).val();
					strWeekDay = $( '[name="schedule_reports[weekday]"]' ).val();

					if( '' === strWeekDay ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'Please select a Day of the Week.' );
					}

					break;

				case '5':
					intDays = $( '.num_years' ).val();

					if( '' === $.trim( intDays ) ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'Number of Years is required.' );
					} else if( false === strNumDaysRegEx.test( intDays ) ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'The yearly schedule rate must be a number.' );
					} else if( 1 > $( '.num_years' ).val() || 10 < $( '.num_years' ).val() ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'The yearly schedule rate must be from 1 to 10.' );
					}

					break;
			}

			if( 3 == intScheduleFrequency && false === boolIsValidDay ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + __( 'Please select at least one Day(s) of the Month.' );
			}

			if( '' === $.trim( strStartOnDate ) || '' === $.trim( strStartOnDateYmd ) ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + __( 'Start date required.' );
			} else if( strStartOnDate !== strOldStartOnDate ) {
				var myDate = new Date( strStartOnDateYmd );
				myDate.setHours( 0, 0, 0, 0 );

				var today = new Date();
				today.setHours( 0, 0, 0, 0 );

				if( myDate < today ) {
					boolIsValidPacketOrSchedule = false;
					strMessage = strMessage + ' ' + __( 'The entered starting date is invalid, please select a valid date.' );
				}
			}

			if( '' === $.trim( strEndOnDate ) || '' === $.trim( strEndOnDateYmd ) ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + __( 'End date required.' );
			} else if( strEndOnDate !== strOldEndOnDate ) {
				var endOnDate = new Date( strEndOnDateYmd );
				endOnDate.setHours( 0, 0, 0, 0 );

				if( '' !== $.trim( strStartOnDate ) && '' !== $.trim( strStartOnDateYmd ) ) {
					var startOnDate = new Date( strStartOnDateYmd );
					startOnDate.setHours( 0, 0, 0, 0 );

					if( endOnDate < startOnDate ) {
						boolIsValidPacketOrSchedule = false;
						strMessage = strMessage + ' ' + __( 'End date must be greater than Start date.' );
					} else {
						startOnDate.setFullYear( startOnDate.getFullYear() + 5 );
						startOnDate.setHours( 0, 0, 0, 0 );

						if( startOnDate < endOnDate ) {
							boolIsValidPacketOrSchedule = false;
							strMessage = strMessage + ' ' + __( 'End date must be less than 5 years from Start date.' );
						}
					}
				}
			}
		}

		if( reportScheduleTypes.manual !== parseInt($('.js-packet-types').val()) ) {
			if( $( '.load-recipients-packet' ).length && false == $( '.load-recipients-packet' ).is(':checked') ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + __( 'Please select at least one language.' );
			} else {
				$( '.packet-recipients-public' ).each( function() {
					var selectedLocale = $(this).data('locale_name');
					if( $( this ).is( ':visible' ) ) {
						var selectedRecipients = $( this ).find( 'label' ).hasClass( 'selected' );
						if( false == selectedRecipients ) {
							boolIsValidPacketOrSchedule = false;
							strMessage = strMessage + ' ' + __( 'Please select at least one Recipient for: ' + selectedLocale );
						}
					}
				});
			}

			if($("#private_packet_type").prop("checked") && $('#private_module_id').val() == $("#private_packet_type").val() ){
				intCountSelectedFields++;
			}

			$( "li.js-recipient-items[data-selected]" ).each( function() {
				if( false == $( this ).find( 'label' ).find('input').prop("disabled") && true == $( this ).find( 'label' ).hasClass('selected') ) {
					intCountSelectedFields++;
				}
			} );

			if( 1 > intCountSelectedFields ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + __( 'Please select at least one recipient.' );
			}

			var strRecipientEmails = $( '#report_recipient' ).val();
			if( 0 < strRecipientEmails.length ) {
				var strEmailPattern = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,64})+$/;
				var intInvalidCount = 0;
				strRecipientEmails = strRecipientEmails.replace( /[ \n\r]/g, "" );
				var arrRecipientEmails = strRecipientEmails.split( ',' );
				for( var intIndex = 0; intIndex < arrRecipientEmails.length; intIndex++ ) {
					if( !strEmailPattern.test( arrRecipientEmails[intIndex] ) ) {
						intInvalidCount = 1;
					}
				}
				if( 0 !== intInvalidCount ) {
					boolIsValidPacketOrSchedule = false;
					strMessage = strMessage + ' ' + __( 'One or more of the entered recipient emails is invalid, please update.' );
				}
			}
		}

		if( false == boolIsValidPacketOrSchedule ) {
			return strMessage;
		}
	}

	function handleSchedulePropertyGroupSourceSelection() {
		var $propertyGroupsDiv = $('.js-schedule-property-groups');
		if( $(this).val() === 'schedule' ) {
			$propertyGroupsDiv.removeClass('hide');
			$propertyGroupsDiv.find('input').prop('disabled', false);
		} else {
			$propertyGroupsDiv.addClass('hide');
			$propertyGroupsDiv.find('input').prop('disabled', true);
		}
	}

	// endregion

	// region Report Packets

	function bindReportPacketEventHandlers() {
		var $body = $('body');
		$body.off( 'change', '.js-packet-types' ).on( 'change', '.js-packet-types', changeReportScheduleType );
		$body.off( 'click', '.js-delete-packet' ).on( 'click', '.js-delete-packet', confirmDeleteReportPacket );
		$body.off( 'click', '.js-delete-internal-packet' ).on( 'click', '.js-delete-internal-packet', confirmDeleteReportPacket );
		$body.off( 'click', '.js-confirm-delete-packet' ).on( 'click', '.js-confirm-delete-packet', deleteReportPacket );
		$body.off( 'click', '.js-insert-update-packet' ).on( 'click', '.js-insert-update-packet', insertUpdateReportNewPacket );
		$body.off( 'click', '.js-add-report-new-group-instance' ).on( 'click', '.js-add-report-new-group-instance', addReportNewGroupInstance );
		$body.off( 'click', '.js-delete-report-new-group-instance' ).on( 'click', '.js-delete-report-new-group-instance', deleteReportGroupInstance );
		$body.off( 'click', '.js-add-edit-packet, .js-create-edit-internal-packet' ).on( 'click', '.js-add-edit-packet, .js-create-edit-internal-packet', addOrEditReportPacket );
		$body.off( 'click', '.js-packet-history' ).on( 'click', '.js-packet-history', viewPacketHistory );
		$body.off( 'click', '.js-packet-schedule-execution-details' ).on( 'click', '.js-packet-schedule-execution-details', viewPacketScheduleExecutionDetails );
		$body.off( 'click', '.js-pdf-switch' ).on( 'click', '.js-pdf-switch', changePdfOrientation );
		$body.off( 'change', '.js-pdf-collation' ).on( 'change', '.js-pdf-collation', changePdfCollation );
		$body.off( 'click', '.load-recipients-packet' ).on( 'click', '.load-recipients-packet', loadRecipients );
		$body.off( 'click', '.js-configure-download' ).on( 'click', '.js-configure-download', loadConfigurePacket );
		$body.off( 'click', '.js-configure-download-packet' ).on( 'click', '.js-configure-download-packet', downloadConfigurePacket );
		$body.off( 'click', '.report-description.js-report-history-recipients' ).on( 'click', '.report-description.js-report-history-recipients', viewPacketRecipients );
		$body.off( 'click', '.js-packet-element-download' ).on( 'click', '.js-packet-element-download', downloadPacketHistory );
		$body.off( 'click', '.js-use-existing, .js-choose-properties' ).on( 'click', '.js-use-existing, .js-choose-properties', togglePropertySelector );
		$body.off( 'change', '.packet_permissions' ).on( 'change', '.packet_permissions', changePacketPermissions );
		$body.off( 'click', '#view_vendor_dialog' ).on( 'click', '#view_vendor_dialog', loadVendor );
		$body.off( 'click', '.js-report-export-switch' ).on( 'click', '.js-report-export-switch', changeReportExportSelection );
		downloadReportPacket();
	}

	function changeReportScheduleType() {

		if( reportScheduleTypes.manual === parseInt($( this ).val()) ) {
			$( '.js-report-recipients' ).hide();
			$( '.js-report-recipients *' ).attr( 'disabled', true );
			$( '.js-save-to-documents' ).hide();
			$( '.js-report-html-generation' ).hide();
			$( '.js-report-html-generation *' ).attr( 'disabled', true );
		} else {
			$( '.js-report-recipients' ).show();
			$( '.js-report-recipients *' ).removeAttr( 'disabled' );
			$( '.js-save-to-documents' ).show();
			$( '.js-report-html-generation' ).show();
			$( '.js-report-html-generation *' ).removeAttr( 'disabled' );
		}

		if( reportScheduleTypes.scheduled === parseInt($( this ).val()) ) {
			$( '.js-scheduled-packet-type' ).show();
			$( '.js-scheduled-packet-type *' ).removeAttr( "disabled" );
		} else {
			$( '.js-scheduled-packet-type' ).hide();
			$( '.js-scheduled-packet-type *' ).attr( 'disabled', true );
		}

		if( reportScheduleTypes.period_close === parseInt($( this ).val()) ) {
			$( '.js-period-close-packet-type' ).show();
			$( '.js-period-close-packet-type *' ).removeAttr( "disabled" );
		} else {
			$( '.js-period-close-packet-type' ).hide();
			$( '.js-period-close-packet-type *' ).attr( 'disabled', true );
		}

		if( reportScheduleTypes.period_advance === parseInt($( this ).val()) ) {
			$( '.js-period-advance-packet-type' ).show();
			$( '.js-period-advance-packet-type *' ).removeAttr( "disabled" );
		} else {
			$( '.js-period-advance-packet-type' ).hide();
			$( '.js-period-advance-packet-type *' ).attr( 'disabled', true );
		}

		$( '.frequency' ).trigger( 'change' );
	}

	function addOrEditReportPacket() {
		var strDialogTitle = ( 'undefined' !== typeof( $(this).attr('data-packet-id') ) ? __( 'Edit Packet {%s, 0}', [ $(this).attr( 'data-packet-name' ) ] ) : __( 'Add Packet' ) ),
			intPacketId = ( 'undefined' !== typeof( $(this).attr('data-packet-id') ) ? $(this).attr('data-packet-id') : '' ),
			intScheduleId = ( 'undefined' !== typeof( $(this).attr('data-report-schedule-id') ) ? $(this).attr('data-report-schedule-id') : '' ),
			boolIsInternal = ( 'undefined' !== typeof( $(this).attr('data-is-internal') ) ? $(this).attr('data-is-internal') : '' );

		psi.patterns.loadDialog( {
			width:  950,
			height: 'auto',
			strUrl:  '/?module=' + modules.packets + '&action=create_or_edit_report_packet&report_packet[id]=' + intPacketId + '&report_packet[schedule_id]=' + intScheduleId + '&is_internal=' + boolIsInternal,
			title:  strDialogTitle,
			open: function( event, ui ) {
				function callback() {
					if( 0 < $('.js-report-packet-form').length ) {
						psi.patterns.bindEssentials();
						$( '.js-packet-types' ).trigger( 'change' );
						$( '.frequency' ).trigger( 'change' );

						// This patch is needed on load Add Packet/Edit packet actions.
						if( '0' === $( '.js-pdf-switch input[type=hidden][name="download_options[export_pdf][enabled]"]' ).val() ) {
							$( ".report-pdf-orientation" ).hide();
						} else {
							$( ".report-pdf-orientation" ).show();
						}
						if( '' === intPacketId ) {
							$( '.js-add-report-new-group-instance' ).trigger( 'click' );
						}
						return true;
					}
					return false;
				}

				reattemptUntilTrue( callback, 500, 120 );
			}
		} );
	}

	function changePdfOrientation() {
		if( 1 == $( '.js-pdf-switch input[type=hidden][name="download_options[export_pdf][enabled]"]' ).val() ) {
			$( ".report-pdf-orientation" ).hide();
		} else {
			$( ".report-pdf-orientation" ).show();
		}
	}

	function changePdfCollation() {
		var value = $(this).val(),
			$pagination = $('.js-pdf-pagination');

		if( 'report' === value ) {
			$pagination.parent().removeClass( 'hide' );
			if( 'separate_files' === $pagination.val() ) {
				$pagination.val( 'single_file' );
			}
		} else {
			$pagination.val( 'separate_files' );
			$pagination.parent().addClass( 'hide' );
		}
	}

	function changeReportExportSelection() {
		if( 1 == $( '.js-report-export-switch input[type=hidden][name="report_schedule[is_export]"]' ).val() ) {
			$( ".js-export-configuration" ).hide();
			$("#sftp_servers").val( '' );
		} else {
			$( ".js-export-configuration" ).show();
		}
	}

	function loadRecipients() {
		var strLocaleCode = $( this ).data( 'locale-code' );
		var strPacketPermissions = $( 'input[type=radio][name=packet_permissions]:checked' ).val();
		var strCompanyUserId = $('#private-recipient').val();
		if( true == $( this ).is( ':checked' ) ) {
			if( $('#private_module_id').val() == strPacketPermissions && $( '.private_user_' + strLocaleCode ).length === 0 && strPacketPermissions !== undefined ) {
				$( '#private_users' ).append('<li class="js-recipient-items private-locale-' + strLocaleCode + '" data-selected="yes"><label class="selected"><input type="hidden" class="private_user_' + strLocaleCode + '" name="report_schedule_recipients[2]['+ strCompanyUserId +'][]" value="' + strLocaleCode + '" /></label></li>');
			}
			else {
				$( '.packet-recipients-' + strLocaleCode ).removeClass('hide');
				$( '.packet-recipients-' + strLocaleCode).find('input').prop("disabled", false);
			}
		}
		else {
			if( $('#private_module_id').val() == strPacketPermissions && strPacketPermissions !== undefined ) {
				$( 'li.private-locale-' + strLocaleCode ).remove();
			} else {
				$( '.packet-recipients-' + strLocaleCode ).addClass( 'hide' );
				$( '.packet-recipients-' + strLocaleCode ).find( 'input' ).prop( "disabled", true );
			}
		}

	}

	function changePacketPermissions() {
		var strCompanyUserId = $('#private-recipient').val();
		var strLocaleCode = $('#private-recipient').attr('class');
		if( $( this ).is(":checked")){
			if("null" == $(this).val()){
				if( 'private_packet_type' == $( this ).attr('id')){
					$(this).val($('#private_module_id').val());
				}else{
					$(this).val($('#public_module_id').val());
				}
			}
			if($('#public_module_id').val() == this.value ) {
				$( 'div#private_users' ).empty();
				$( 'label.selected' ).children( '.load-recipients-packet' ).trigger( 'click' );
				$('.js-hide-for-private-packet').show();
				$( 'private_user_' + strLocaleCode ).remove();
				$( '.packet-recipients').find( 'input' ).prop( "disabled", false );
			}
			if($('#private_module_id').val() == this.value ) {
				if(!$('div').hasClass('locales')) {
					$( '#private_users' ).append( '<input type="hidden" class="private_user_' + strLocaleCode + '" name="report_schedule_recipients[2][' + strCompanyUserId + '][]" value="' + strLocaleCode + '" />' );
				}
				$('.js-hide-for-private-packet').hide();
				if($('div').hasClass('locales')){
					$( '.load-recipients-packet' ).removeAttr('checked');
					$( '[class*="packet-recipients-"]' ).removeAttr('checked');
					$( '[class*="packet-recipients-"]' ).addClass( 'hide' );
					$( '[class*="packet-recipients-"]' ).find( 'input' ).prop( "disabled", true );
				}else{
					$( '.packet-recipients').find( 'input' ).prop( "disabled", true );
				}
			}
		}
	}

	function loadConfigurePacket() {
		$('.element-download').psiTooltip('close');
		var strElementSelector = $('#js-report-packet-id-' + entrataReports.intReportGroupId );
		var intPacketId = strElementSelector.data('packet-id'),
			intPacketScheduleId = strElementSelector.data('report-schedule-id'),
			intPacketTypeId = strElementSelector.data('packet-type-id'),
			intAttachPdf = strElementSelector.data('attach-pdf'),
			intAttachXls = strElementSelector.data('attach-xls'),
			intAttachCsv = strElementSelector.data('attach-csv'),
			boolIsEntrataOnlyPacket = strElementSelector.data('is-entrata-only-packet'),
			objData = { packet_type_id: intPacketTypeId, is_entrata_only: boolIsEntrataOnlyPacket, download_option: { pdf: intAttachPdf, excle: intAttachXls, csv: intAttachCsv } };

		psi.patterns.loadDialog({
			strContentId: 'load_configure_packet',
			width:'690',
			height:'650',
			strUrl:'/?module=' + modules.packets + '&action=configure_download&report_group_id=' + intPacketId + '&report_group_schedule_id=' + intPacketScheduleId + '&is_entrata_only=' + boolIsEntrataOnlyPacket,
			data: objData,
			title: __( 'Configure Packet Download: {%s, 0}', [ strElementSelector.data('packet-name') ] ),
			open: function( event, ui ) {
				psi.patterns.bindEssentials();
				$('.js-packet-element-download').psiTooltip('close');
				setTimeout( function () {
					$(document).off( 'click', '#report_form .cancel-default-report-packet-filters' ).on( 'click', '#report_form .cancel-default-report-packet-filters', function() {
						$( '.ui-dialog-titlebar-close' ).trigger( 'click' );
					});
				}, 500 );
			}
		});
	}

	function downloadConfigurePacket() {

		let strOutputType,
			strMessage = '',
            strPropertyGroupFirstElement = $('#report_filterproperty_group_ids ul:first li'),
			data = $( '#configure_download_report_form' ).serialize(),
			arrmixLocales = $( '#configure_download_report_form' ).find(".load-recipients-packet.selected :input").map(
				function() {
					return {"name": this.name, "value": this.value}
				} ),
			strCheckCustomPeriod = $( "input[name ^= 'report_filter[period]']:visible" ),
			boolExist = false,
			boolIsEntrataOnly = $( this ).data( 'entrata-only' );

        if ( strPropertyGroupFirstElement.hasClass( 'js-allProperty' ) ) {
            var arrData = data.split( '&' );
            data = '';
            arrData.forEach( function( pair ) {
                var [ key, value ] = pair.split( '=' );
                if( decodeURIComponent( key ) !==  "report_filter[property_group_ids][]" ) {
                    data += "&" + encodeURIComponent( key ) + "=" + encodeURIComponent( value );
                }
            } );
            $( '#property_list ul li' ).each( function () {
                data += "&" + encodeURIComponent( `report_filter[property_group_ids][]` ) + "=" + $( this ).data( 'listid' );
            } );
        }

		data = $.merge( data, arrmixLocales );

		if( 't' == boolIsEntrataOnly && 1 < strPropertyGroupFirstElement.length ) {
			strMessage += __( 'Please select only one property.' );
		}

		if( ( undefined != strCheckCustomPeriod.val() || null != strCheckCustomPeriod.val() ) ) {
			$.each( strCheckCustomPeriod ,function( i , item ){
				if( '' == strCheckCustomPeriod[i].value ) {
					boolExist = true;
					return false;
				}
			});
			if( boolExist ) {
				strMessage += __( $( '#period_filter_range' ).find( ":selected" ).text() + ' is required.' );
			}
		}

		if( $( '.load-recipients-packet' ).length && false == $( '.load-recipients-packet' ).is(':checked') ) {
			strMessage += __( 'Please select at least one language.' );
		}

		if( '' !== strMessage.trim() ) {
			$( '#load_configure_packet' ).scrollTop( 0 );
			$('#configure_download_error_messages').html( '<p class="alert error slim"><i>! </i>' + strMessage + '</p>' ).fadeIn().fadeOut( 5000 );
			return false;
		}

		if( 1 == $(this).data('download-pdf') ) {
			strOutputType = 'export_pdf';
		} else if( 1 == $(this).data('download-xls') ) {
			strOutputType = 'export_spreadsheet';
		} else {
			strOutputType = 'export_csv';
		}

		$( '#alert_div' ).html( '' );
		psi.patterns.showLoadingImage({
			strElementSelector: '#configure_download_report_form'
		});

		$.asyncRequest( {
			url: '/?module=' + modules.packets + '&action=generate_configure_download&report_schedule_id=' + entrataReports.intReportScheduleId + '&output_type=' + strOutputType + '&entrata_only=' + boolIsEntrataOnly,
			data : data,
			isFile: true,
			method: 'post',
			success: function( response ) {
				psi.patterns.removeLoadingImage({
					strElementSelector: '#configure_download_report_form'
				});
				$('.js-form-dialog-cancel').click();
				$( window ).scrollTop( 0 );
				$( '#alert_div' ).stop(true, true).fadeOut();
				$( '#alert_div' ).html( '' );
				if( true === response.error ) {
					$( '#alert_div' ).append( '<p class="alert error slim"><i></i>' + response.error + '</p>' );
				} else {
					$( '#alert_div' ).append( '<p class="alert success slim"><i></i>' + __( 'Packet downloaded successfully. Please go to History for more details.' ) + '</p>' ).fadeIn().fadeOut( 7000 );
				}
			},
			error: function( strUrl, strResponse ) {
				psi.patterns.removeLoadingImage({
					strElementSelector: '#configure_download_report_form'
				});
				var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );
				$( '#configure_download_error_messages' ).html( '' );
				$( '#load_configure_packet' ).scrollTop( 0 );
				if( null != parsedJson.error ) {
					for( i = 0; i < parsedJson.error.length; i++ ) {
						var error = parsedJson.error[i];
						$( '#configure_download_error_messages' ).append( '<p class="alert error slim"><i></i>' + error + '</p>' );
					}
                    if ( parsedJson.error === true && parsedJson.message ) {
                        $( '#configure_download_error_messages' ).append( '<p class="alert error slim"><i></i>' + parsedJson.message + '</p>' );
                    }
					$( '#configure_download_error_messages' ).fadeIn().fadeOut( 30000 );
				}
			}
		} );
	}

	function viewPacketHistory() {
		// Click on history icon for a packet.
		var obj = $( this );
		let intScheduleTypeId = obj.data( 'schedule-type-id' );
		let intWidth = ( '2' == intScheduleTypeId ) ? 900 : 530;
		let intHeight = ( '2' == intScheduleTypeId ) ? 600 : 320;

		psi.patterns.loadDialog( {
			width: intWidth,
			height: intHeight,
			strUrl:'/?module=' + modules.packets + '&action=view_packet_history&packet_id=' + obj.data('packet-id') + '&expired_report=' + (obj.data('expired-report') ? true : false) + '&schedule_id=' + obj.data('schedule-id')  + '&is_packet=' + obj.data('is-packet') + '&schedule_type_id=' + intScheduleTypeId,
			title: __( '{%s, 0} History', [ obj.data('packet-name') ] )
		});
		$( "#update-packet-properties" ).hide();
	}

	function viewPacketScheduleExecutionDetails() {
		// Click on history icon for a packet and schedule.
		var obj = $( this );
		psi.patterns.loadDialog( {
			width:'850',
			height:'560',
			strUrl:'/?module=' + modules.packets + '&action=view_packet_schedule_execution_details&schedule_id=' + obj.data('schedule-id') + '&is_packet=' + obj.data('is-packet') + '&schedule_type_id=' + obj.data('schedule-type-id'),
			title: __( '{%s, 0} History', [ obj.data('packet-schedule-name') ] )
		});
		$( "#update-packet-properties" ).hide();
	}

	function viewPacketRecipients() {
		$(this).children('.gradient-overlay').toggle();
		$(this).toggleClass('full-description');
	}

	function downloadPacketHistory() {
		entrataReports.intReportScheduleId = $( this ).data( 'report-schedule-id' );
		entrataReports.intReportGroupId = $( this ).data( 'packet-id' );
		downloadReportPacket();
	}

	function togglePropertySelector() {
		if( $(this).hasClass( 'js-choose-properties' ) ) {
			$( '.js-report-packet-form .js-property-selector' ).removeClass('hide');
		} else {
			$( '.js-report-packet-form .js-property-selector' ).addClass('hide');
		}
	}

	function downloadReportPacket() {

		$( '.js-packet-element-download' ).on( 'click', function() {
			entrataReports.intReportScheduleId = $( this ).data( 'report-schedule-id' );
			entrataReports.intReportGroupId = $( this ).data( 'packet-id' );

			( 1 !== $( this ).data( "attach-pdf" ) ? $( "#download-pdf" ).hide() : $( "#download-pdf" ).show() );
			( 1 !== $( this ).data( "attach-xls" ) ? $( "#download-xls" ).hide() : $( "#download-xls" ).show() );
			( 1 !== $( this ).data( "attach-csv" ) ? $( "#download-csv" ).hide() : $( "#download-csv" ).show() );
			( 1 === $( this ).data( "is-internal" ) ? $( "#update-packet-properties" ).hide() : $( "#update-packet-properties" ).show());
		} );

		// Options popup for download.packet-download
		$( '.js-packet-element-download' ).psiTooltip({
			tooltipClass: "download-content",
			trigger: 'click',
			contentSelector: $('.packet-download'),
			positions: 'left',
			items: '.js-packet-element-download',
			clickAnywhereToClose: true,
			open: function(){
				bindEssentials();
			}
		} );

		$(document).off('click', '.js-download-packet').on('click', '.js-download-packet', function() {
			$( window ).scrollTop( 0 );
			$( '#alert_div' ).html( '' );
			$( '#alert_div' ).append( '<p class="alert info slim"><i></i>' + __( 'Your report packet is being generated. If you’d like to continue working, you can do so as the packet will automatically be downloaded to your computer when completed.' ) + '</p>' ).fadeIn().fadeOut( 18000 );
			var strOutputType;
			if( 'download-pdf' == $(this).attr('id') ) {
				strOutputType = 'export_pdf';
			} else if( 'download-xls' == $(this).attr('id') ) {
				strOutputType = 'export_spreadsheet';
			} else {
				strOutputType = 'export_csv';
			}

			$( '.js-packet-element-download' ).psiTooltip('close');

			var clearPacketErrorMessage = true;

			$.asyncRequest( {
				url: '/?module=' + modules.packets + '&action=generate_report&report_schedule_id=' + entrataReports.intReportScheduleId + '&output_type=' + strOutputType,
				data : $( '#report_form' ).serialize() + $.param({ 'user_time': ( new Date() ).toString() }),
				isFile: true,
				method: 'post',
				success: function( response ) {
					$('.ui-icon-closethick').trigger('click');
					// If packet has error, this code will avoid clearing packet error message which is added in update event handler of generate report call
					if(clearPacketErrorMessage) {
						$( '#alert_div' ).stop( true, true ).fadeOut();
						$( '#alert_div' ).html( '' );
					}
					if( true === response.error ) {
						$( '#alert_div' ).append( '<p class="alert error slim"><i></i>' + response.error + '</p>' );
					} else if(clearPacketErrorMessage) {
						$( '#alert_div' ).append( '<p class="alert success slim"><i></i>' + __( 'Packet downloaded successfully. Please go to History for more details.' ) + '</p>' ).fadeIn().fadeOut( 7000 );
					}
				},
				error: function( strUrl, strResponse ) {
					$('.ui-icon-closethick').trigger('click');
					var parsedJson = $.isPlainObject( strResponse ) ? strResponse : $.parseJSON( strResponse );
					$( '#alert_div' ).html( '' );
					if( null != parsedJson.error ) {
						$( window ).scrollTop( 0 );
						for( i = 0; i < parsedJson.error.length; i++ ) {
							var error = parsedJson.error[i];
							$( window ).scrollTop( 0 );
							$( '#alert_div' ).append( '<p class="alert error slim"><i></i>' + error + '</p>' );
						}
						$( '#alert_div' ).fadeIn().fadeOut( 20000 );
					}
				},
				update: function( strUrl, strResponse ) {
					// If packet has error for some reports, notify it to user and proceed with download
					if( strResponse.packet_error ) {
						$( '#alert_div' ).stop(true, true).fadeOut();
						clearPacketErrorMessage = false;
						var error = strResponse.packet_error.replace(/"/g,'').replace(/&lt;/g,'<').replace(/&lt;/g,'<').replace(/&gt;/g, '>');
						$( '#alert_div' ).html( '<p class="alert error slim"><i></i>' + error + '</p>' ).fadeIn();
					}
				}
			} );
		} );
	}

	function addReportNewGroupInstance() {
		var $reportInstanceTable		= $( '#add-report-table' ),
			$newReportInstanceTemplate	= $( '#report_instances'),
			$reportInstanceTbody		= $reportInstanceTable.find( 'tbody' );

		if( 0 === $newReportInstanceTemplate.length ) {
			// TODO: This needs i18n, through a helper function that adds the necessary markup
			$('#report_instance_row_error').html( '<p class="alert error slim"><i>! </i>' + __( 'At least one report instance must be added to the packet. Please add a report instance and try again. ' ) + '</p>' ).fadeIn(500);
			return false;
		}

		var $newReportInstance	= $newReportInstanceTemplate.clone( false, false ).removeAttr( 'id' ).appendTo( $reportInstanceTbody ).removeClass( 'hide' ),
			$reportSelect		= $newReportInstance.find( '.form-search-field' ),
			intRowCount			= $reportInstanceTable.find( 'tbody tr' ).length;

		if( 0 !== $( '#add-report-table #report-instance-' + intRowCount ).length ) {
			intRowCount++;
		}

		$newReportInstance.attr( 'id', 'report-instance-' + intRowCount );

		$newReportInstance.find( 'select[disabled], input[disabled]' ).each( function() {
			$( this ).prop( 'disabled', false );
			$( this ).attr( 'name', $( this).attr( 'name' ).replace( '[0]', '[' + intRowCount + ']' ) );
		} );

		$reportSelect.psiSearchCombobox( {
			dataList: $reportSelect.siblings( 'select' ),
			select: loadReportFilters
		} );
	}

	function loadReportFilters( event, ui ) {
		var $option					= $(ui.item.option),
			intReportInstanceId		= $option.data('report-instance-id'),
			intReportId				= $option.data('report-id'),
			intReportVersionId		= $option.data('report-version-id'),
			$row					= $option.parents('tr');

		// Remove any errors
		$row.find('p.error, span.error').remove();

		// Populate additional fields from the report
		$row.find( '.js-report-new-instance-id' ).val( intReportInstanceId );
		$row.find( '.js-report-id' ).val( intReportId );
		$row.find( '.js-report-version-id' ).val( intReportVersionId );
	}

	function deleteReportGroupInstance() {
		if( 0 < $(this).parent().parent().next('span.error').length ) {
			$(this).parent().parent().next('span').remove();
		}
		$(this).parent().parent().remove();
		if( 0 === $('tbody .report-instances').length ) {
			addReportNewGroupInstance();
		}
	}

	function validateInsertUpdateReportPacket() {
		var strPacketName			= $('#packet-name').val().trim(),
			$reportInstances		= $( 'tbody .report-instances' ),
			reportsAdded			= false,
			reportMap				= {},
			strMessage = '',
			boolIsValidPacketOrSchedule = true,
			strScheduleMessage;

		//PacketType validation
		if(!$("input[name='packet_permissions']:checked").val()){
			boolIsValidPacketOrSchedule = false;
			strMessage = strMessage + ' ' + __( 'Select Packet Permission' );
		}
		// Packet name validation.
		if( 50 < strPacketName.length ) {
			boolIsValidPacketOrSchedule = false;
			strMessage = strMessage + ' ' + __( 'Packet name exceeds max character limit of 50.' );
		} else if( 0 === strPacketName.length ) {
			boolIsValidPacketOrSchedule = false;
			strMessage = strMessage + ' ' + __( 'Please enter a packet name.' );
		}

		if( reportScheduleTypes.manual !== parseInt($('.js-packet-types').val()) ) {
			strScheduleMessage = validateReportPacketOrSchedules();
			if( undefined !== strScheduleMessage ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + strScheduleMessage;
			}
		}

		// Validate if at least 1 attachment is selected.
		if( !$('.attachment-preference').hasClass('on') ) {
			boolIsValidPacketOrSchedule = false;
			strMessage = strMessage + ' ' + __( 'Attachment preference is required.' );
		}

		//Validate property groups if Choose properties is selected.
		if( $('.js-report-packet-form .js-choose-properties' ).prop("checked") ) {
			if( 0 == $('[name="report_schedule[filter_overrides][property_group_ids][]"]').length ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + __( 'Property Groups are required.' );
			}
		}

		// Making sure at least 1 report is selected.
		if( 0 === $reportInstances.length ) {
			boolIsValidPacketOrSchedule = false;
			strMessage = strMessage + ' ' + __( 'At least one report instance must be added to the packet. Please add a report instance and try again.' );
		}

		$reportInstances.each( function() {
			reportsAdded = true;
			var $reportInstance = $(this).find( '.js-report-new-instance-id' ),
				intReportInstanceId = $reportInstance.val();

			if( '' === intReportInstanceId ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + __( 'Please select a report instance' );
			}

			if( true === reportMap.hasOwnProperty( intReportInstanceId ) ) {
				boolIsValidPacketOrSchedule = false;
				strMessage = strMessage + ' ' + __( 'This instance is already included in the packet. Please select a different instance and try again.' );
			} else if( '' !== intReportInstanceId ) {
				reportMap[intReportInstanceId] = intReportInstanceId;
			}

		} );

		boolIsValidPacketOrSchedule &= reportsAdded;

		if( '' !== strMessage.trim() ) {
			$( '#modal_id').scrollTop(0);
			$('#create-edit-report-packet-error').html( '<p class="alert error slim"><i>! </i>' + strMessage + '</p>' ).fadeIn(500);
		}

		return Boolean( boolIsValidPacketOrSchedule );
	}

	function insertUpdateReportNewPacket() {

		$('p.error').remove();
		$('span.error').remove();

		if( true === validateInsertUpdateReportPacket() ) {
			psi.patterns.ajaxRequest({
				url: '/?module=' + modules.packets + '&action=insert_or_update_report_packet',
				strElementSelector: '.js-report-packet-form',
				method: 'post',
				data: $( '.js-report-packet-form' ).serialize(),
				success: function( response ) {
					try {
						var strResponseMessage = $.parseJSON( response );
						if( true === strResponseMessage['success'] ) {
							psi.patterns.showLoadingImage({
								strElementSelector: '.js-report-packet-form'
							});
							location.reload();
						} else {
							psi.patterns.removeLoadingImage({
								strElementSelector: '.js-report-packet-form'
							});
							$( '#mod').scrollTop(0);
							$('#create-edit-report-packet-error').html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + JSON.parse( response ).message + '</span>' );
						}
					} catch(e) {
						$( '#create-edit-report-packet-error' ).html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + JSON.parse( response ).message + '</span>' );
					}
				}
			});
		} else {
			$( '#mod' ).animate({ scrollTop: 0 }, "slow");
		}
		$( '.ui-datepicker-inline' ).hide();
	}

	function deleteReportPacket() {
		var boolAddInstance = $(this).data('add-instance');
		var intPacketId = $( 'input:hidden[name=packet_id]' ).val();

		psi.patterns.ajaxRequest({
			url: '/?module=' + modules.packets + '&action=delete_report_packet&report_packet[id]=' + intPacketId,
			strElementSelector: '.confirm-delete-packet',
			method: 'post',
			data: { boolAddInstance: boolAddInstance },
			success: function( strResponse ) {
				try {
					$( 'div#delete_packet_confirmation' ).dialog( 'close' );
					if( strResponse['data']['result'] ) {
						$( window ).scrollTop( 0 );
						location.reload();
					} else {
						psi.patterns.removeLoadingImage({ strElementSelector: '.view-report-packets' });
						$('.tip').remove();
						$( '#view-report-packet-errors' ).html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + objResponse.message + '</span>' ).fadeOut( 3000 );
					}
				} catch ( e ) {
					$('.confirm-delete-packet').html( strResponse );
				}
			}
		});
	}

	function confirmDeleteReportPacket() {
		var intPacketId = $( this ).data('packet-id'),
			intReportScheduleId = $( '.js-delete-internal-packet' ).data('report-schedule-id');

		if( null != intReportScheduleId ) {
			intPacketId = intReportScheduleId;
		}

		$('#delete_packet_confirmation').html('');
		psi.patterns.loadOverlay( {
			width: 800,
			height: 300,
			closeOnEscape: true,
			strUrl: '/?module=' + modules.packets + '&action=confirm_delete_report_packet&report_packet[id]=' + intPacketId,
			strContentId: 'delete_packet_confirmation'
		} );
	}

	// endregion

	// region Reports Inbox

	function bindReportInboxEventHandlers() {

		psi.patterns.bindEssentials();
		var $body = $('body');
		$body.off( 'click', '.js-tab-inbox' ).on( 'click', '.js-tab-inbox', viewInbox );
		$body.off( 'click', '.js-tab-archive' ).on( 'click', '.js-tab-archive', viewArchives );
		$body.off( 'click', '.js-btn-move-to-archive' ).on( 'click', '.js-btn-move-to-archive', moveReportToArchives );
		$body.off( 'click', '.js-btn-move-to-inbox' ).on( 'click', '.js-btn-move-to-inbox', function() {
			if( $('#move-to-inbox').is(':checked') ) {
				$( '#form_archives table .form-checkbox').attr( 'checked', true );
			}
			moveReportToInbox();
		} );
		$body.off( 'click', '.js-move-to-archive' ).on( 'click', '.js-move-to-archive', function() {
			if( true === $('#move-to-archive').is(':checked') ) {
				$( '#form_inbox input:checkbox').prop( 'checked', true );
			} else {
				$( '#form_inbox input:checkbox').prop( 'checked', false );
			}
		} );
		$body.off( 'click', '.js-move-to-inbox' ).on( 'click', '.js-move-to-inbox', function() {
			if( $('#move-to-inbox').is(':checked') ) {
				$( '#form_archives input:checkbox').prop( 'checked', true );
			} else {
				$( '#form_archives input:checkbox').prop( 'checked', false );
			}
		} );
		$body.off( 'click', '.js-btn-filter-archive' ).on( 'click', '.js-btn-filter-archive', function() {
			var strFromDate = $( '#from-date' ).val();
			var strToDate	= $( '#to-date' ).val();
			if( ( '' !== strFromDate && !Date.parse( strFromDate ) ) || ( '' !== strToDate && !Date.parse( strToDate ) ) ) {
				// TODO: Needs i18n using a helper function that adds the HTML
				$('#report-archive-error').html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + __( 'Valid Date range is required.' ) + '</span></p>' ).show();
				return;
			}
			viewArchives();
		} );
		$body.off( 'click', '.js-more' ).on( 'click', '.js-more', function() {
			$(this).toggleClass('less');
			$(this).siblings('.js-inbox-packet-element').toggle();
			$(this).parent().next('td').find('.js-inbox-packet-element').toggle();
		} );
		$body.off( 'click', '.js-inbox-report-link' ).on( 'click', '.js-inbox-report-link', reportGenerate );
		downloadReportInbox();
	}

	function viewInbox() {
		$(".js-tab-inbox").addClass('selected').siblings().removeClass('selected');
		$('#report-inbox-error').html('');
		$('.js-inbox').fadeIn();
		$('.js-archive').hide();
		psi.patterns.ajaxRequest({
			strElementSelector: '.js-inbox',
			url: '?module=' + modules.inbox,
			method: 'post'
		});
	}

	function viewArchives() {
		$(".js-tab-archive").addClass('selected').siblings().removeClass('selected');
		$('#report-inbox-error').html('');
		$('.js-archive').fadeIn();
		$('.js-inbox').hide();
		psi.patterns.ajaxRequest({
			strElementSelector: '.js-archive',
			url: '?module=' + modules.inbox + '&action=view_report_archives',
			method: 'post',
			data: $( '#form_archives' ).serialize()
		});
	}

	function moveReportToArchives() {
		$( '.js-inbox_email_values' ).val( '' );
		if( false === $('.js-inbox input[type=checkbox][name="company_user_report_histories[report_history_ids][]"]').is(':checked') && false === $('#move-to-archive').is( ':checked' ) ) {
			// TODO: Needs i18n using a helper function that adds the HTML
			$('#report-inbox-error').html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + __( 'Please select at least one report to move to archive.' ) + '</span></p>' );
		} else {
			psi.patterns.ajaxRequest({
				strElementSelector: '.js-inbox',
				url: '?module=' + modules.inbox + '&action=update_company_user_report_histories&is_archived=1&tab=inbox',
				method: 'post',
				data: $( '.js-inbox form' ).serialize(),
				success: function (res) {
					$('.js-archive').html(res).fadeIn();
					psi.patterns.removeLoadingImage( { strElementSelector: '.js-inbox' } );
					$('.js-tab-archive').addClass( 'selected' ).siblings().removeClass( 'selected' );
					$('.js-inbox').hide();
					bindReportInboxEventHandlers();
				}
			});
		}
	}

	function moveReportToInbox() {
		$( '.js-inbox_email_values' ).val('');
		if( false === $('.js-archive input[type=checkbox][name="company_user_report_histories[report_history_ids][]"]').is(':checked') && false === $('#move-to-inbox').is( ':checked' ) ) {
			// TODO: Needs i18n using a helper function to add the HTML
			$('#report-archive-error').html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + __( 'Please select at least one report to move to the inbox.' ) + '</span></p>' ).show();
		} else {
			psi.patterns.ajaxRequest({
				strElementSelector: '.js-archive',
				url: '?module=' + modules.inbox + '&action=update_company_user_report_histories&is_archived=0&tab=archives',
				method: 'post',
				data: $( '.js-archive form' ).serialize(),
				success: function (res) {
					$('.js-inbox').html(res).fadeIn();
					psi.patterns.removeLoadingImage( { strElementSelector: '.js-archive' } );
					$('.js-tab-inbox').addClass( 'selected' ).siblings().removeClass( 'selected' );
					$('.js-archive').hide();
					bindReportInboxEventHandlers();
				}
			});
		}
	}

	function reportGenerate() {
		var reportId 			= $( this ).data( "report-id" ),
			title				= $( this ).data( "report-title" ),
			instanceId			= $( this ).data( "report-instance-id" ),
			versionId			= $( this ).data( "report-version-id" ),
			reportUrl			= $( this ).data( "report-url" ).replace( 'reportsxxx', 'report_instances_newxxx&action=view_instance' ),
			correlationId		= $( this ).data( "correlation-id" ),
			historyId			= $( this ).data( "report-history-id" ),
			data				= $( this ).data( "filters" ),
			reportPacketId		= $( this ).data( "report-packet-id" ),
			reportScheduleId	= $( this ).data( "report-schedule-id" );

		reportPacketId		= undefined != reportPacketId ? '&report_packet_id=' + reportPacketId : '';
		reportScheduleId	= undefined != reportScheduleId ? '&report_schedule_id=' + reportScheduleId : '';

		psi.patterns.loadLargeDialog( {
			title: title,
			strContentId: 'view_instance',
			strUrl: reportUrl + '&report_instance[id]=' + instanceId + '&report_instance[report_version_id]=' + versionId + '&report_instance[report_id]=' + reportId + '&correlation_id=' + correlationId + '&history_id=' + historyId + reportPacketId + reportScheduleId,
			data: data,
			complete: function() {
				// If something needs to be clicked when the dialog loads, click it and remove the class so it isn't auto-clicked again
				$( '.js-click-on-load' ).removeClass( '.js-click-on-load' ).click();
				// Remove click event from all locked filters.
				$( 'i.lock' ).click( false );
			}
		} );

	}

	function downloadReportInbox() {

		$( '.js-inbox-element-download' ).on( 'click', function() {
			entrataReports.intReportPacketId = $( this ).data( "packet-id" ),
				entrataReports.intReportScheduleId = $( this ).data( 'report-schedule-id' ),
				entrataReports.boolIsPacket = $( this ).data( 'is-packet' ),
				entrataReports.curh_array = $( this ).parents( 'tr' ).find( '.js-curh' ).map( function() {
					return $( this ).val();
				} ).get(),
				entrataReports.intCorrelationId = $( this ).data( "correlation-id" ),
				entrataReports.intReportVersionId = $( this ).data( "report-version-id" ),
				entrataReports.intstanceDetails = $( this ).parents( 'tr' ).find('.js-report-instance .js-dev-version-of-report');

			( 1 != $( this ).data( "attach-pdf" ) ? $( "#download-pdf" ).hide() : $( "#download-pdf" ).show() );
			( 1 != $( this ).data( "attach-xls" ) ? $( "#download-xls" ).hide() : $( "#download-xls" ).show() );
			( 1 != $( this ).data( "attach-csv" ) ? $( "#download-csv" ).hide() : $( "#download-csv" ).show() );
		} );

		// Options popup for download.
		$( '.js-inbox-element-download' ).psiTooltip({
			tooltipClass: "download-content",
			trigger: 'click',
			contentSelector: $('.inbox-download'),
			positions: 'left',
			items:'.js-inbox-element-download',
			clickAnywhereToClose: true,
			open: function(){
				bindEssentials();
			}
		});

		$(document).off('click', '.js-download-inbox').on('click', '.js-download-inbox', function() {
			var strOutputType,
				intPacketOrScheduleParameter,
				format,
				isCachedOutput = ( undefined !== $(this).data( 'is-cached-output' ) ? 1 : 0 ),
				strIsReportOrPacket = '';

			if( 'download-pdf' == $(this).attr('id') ) {
				strOutputType = 'export_pdf';
				format = 'pdf';
			} else if( 'download-xls' == $(this).attr('id') ) {
				strOutputType = 'export_spreadsheet';
				format = 'xls';
			} else {
				strOutputType = 'export_csv';
				format = 'csv';
			}

			intPacketOrScheduleParameter = '&report_schedule_id=' + entrataReports.intReportScheduleId;
			if( true == entrataReports.boolIsPacket ) {
				intPacketOrScheduleParameter = '&packet_id=' + entrataReports.intReportPacketId;
				strIsReportOrPacket = 'Report Packet';
			} else if( entrataReports.intReportScheduleId ) {
				strIsReportOrPacket = 'Report Schedule';
			} else {
				strIsReportOrPacket = 'Report'
			}

			$('.js-inbox-element-download').psiTooltip('close');
			$( window ).scrollTop( 0 );
			$( '#alert_div' ).html( '' );
			$( '#alert_div' ).append( '<p class="alert info slim"><i></i>' + __( 'Your ' + strIsReportOrPacket + ' is being generated. If you’d like to continue working, you can do so as the ' + strIsReportOrPacket + ' will automatically be downloaded to your computer when completed.' ) + '</p>' ).fadeIn().fadeOut( 18000 );

			if( isCachedOutput ) {
				var instanceId, reportId, reportVersionId, reportHistoryId, reportFilters, reportDownloadOptions, data;
				if( undefined !== entrataReports.intstanceDetails ) {
					instanceId		= entrataReports.intstanceDetails.data( 'report-instance-id' );
					reportId		= entrataReports.intstanceDetails.data( 'report-id' );
					reportVersionId = entrataReports.intstanceDetails.data( 'report-version-id' );
					reportHistoryId = entrataReports.intstanceDetails.data( 'report-history-id' );
					reportFilters   = entrataReports.intstanceDetails.data( 'filters' );
					reportDownloadOptions   = entrataReports.intstanceDetails.data( 'download-options' );
					data = $.extend( reportFilters, {'download_options' : reportDownloadOptions } );
				}

				$.asyncRequest( {
					url: '/?module=report_instances_newxxx&action=generate_report&format=' + format + intPacketOrScheduleParameter + '&is_packet=' + entrataReports.boolIsPacket + '&history_id=' + reportHistoryId + '&report_instance[id]=' + instanceId + '&report_instance[report_version_id]=' + reportVersionId + '&report_instance[report_id]=' + reportId + '&correlation_id=' + entrataReports.intCorrelationId + '&cache_id=' + entrataReports.intCorrelationId,
					method: 'post',
					data: data,
					isFile: true,
					success: function( url, strResponse ) {
						$( window ).scrollTop( 0 );
						$( '#alert_div' ).stop(true, true).fadeOut();
						$( '#alert_div' ).html( '' );
						if( strResponse.error ) {
							$( '#alert_div' ).append( '<p class="alert error slim"><i></i>' + strResponse.error[0].message + '</p>' );
						} else {
							$( '#alert_div' ).append( '<p class="alert success slim"><i></i>' + __( strIsReportOrPacket + ' downloaded successfully.' ) + '</p>' ).fadeIn().fadeOut( 7000 );
						}
					},
					error: function( url, strResponse ) {
						$( window ).scrollTop( 0 );
						$( '#alert_div' ).stop(true, true).fadeOut();
						$( '#alert_div' ).html( '' );
						if( strResponse.error ) {
							$( '#alert_div' ).append( '<p class="alert error slim"><i></i>' + strResponse.error[0].message + '</p>' ).fadeIn().fadeOut( 7000 );
						}
					}
				} );

			} else {
				window.open( '/?module=' + modules.inbox + '&action=download_report_inbox' + intPacketOrScheduleParameter + '&report_version_id=' + entrataReports.intReportVersionId + '&output_type=' + strOutputType + '&is_packet=' + entrataReports.boolIsPacket + '&curh_array=' + entrataReports.curh_array + '&correlation_id=' + entrataReports.intCorrelationId );
			}

		});

		var arrobjReportInbox = ( 'undefined' !== typeof $( '.js-view-report-inbox .js-inbox_email_values' ).val() && '' != $( '.js-view-report-inbox .js-inbox_email_values' ).val() ? JSON.parse( $( '.js-view-report-inbox .js-inbox_email_values' ).val() ) : '' );
		if( 'undefined' != typeof arrobjReportInbox && 0 != arrobjReportInbox.length ) {
			var intPacketOrScheduleParameter;
			if( 30 <= arrobjReportInbox['no_of_days'] ) {
				$( '.js-view-report-inbox' ).find('.js-report-inbox-email-error-msg').removeClass('hide').delay( 2500 ).fadeOut( 30000, function() {
					$( this ).hide();
				} );
				return;
			}

			if( arrobjReportInbox['is_packet'] ) {
				intPacketOrScheduleParameter = '&packet_id=' + arrobjReportInbox['packet_id'];
			} else {
				intPacketOrScheduleParameter = '&report_schedule_id=' + arrobjReportInbox['report_schedule_id'];
			}

			$( '.js-view-report-inbox' ).find('.js-report-inbox-email-msg').removeClass('hide').delay( 2500 ).fadeOut( 30000, function() {
				$( this ).hide();
			} );
			setTimeout(function () {
				window.open( '/?module=' + modules.inbox + '&action=download_report_inbox' + intPacketOrScheduleParameter +'&report_version_id=' + arrobjReportInbox['report_version_id'] +  '&output_type=' + arrobjReportInbox['output_type'] + '&is_packet=' + arrobjReportInbox['is_packet'] + '&curh_array=' + arrobjReportInbox['curh_array'] + '&correlation_id=' + arrobjReportInbox['correlation_id'] );
			}, 2000 );
		}
	}

	// endregion

	// region EntrataInsights

	function bindEntrataInsightsEventHandlers() {
		var $body = $('body');

		$body.off( 'click', '.js-create-insights-report' ).on( 'click', '.js-create-insights-report', createInsightsReport );
		$body.off( 'click', 'input[name="create"]' ).on( 'click', 'input[name="create"]', toggleTemplateVisibility );
		$body.off( 'change', '.js-template-report' ).on( 'change', '.js-template-report', populateInstanceNameFromTemplate );
		$body.off( 'click', '.js-edit-insights-report' ).on( 'click', '.js-edit-insights-report', editInsightsReport );
	}

	function createInsightsReport() {
		psi.patterns.loadLargeDialog( {
			title: __( 'Design Custom Report' ),
			strContentId: 'add_report_instance',
			strUrl: '?module=' + modules.sap + '&action=add_edit_instance&report_type_id=' + reportTypes.sap
		} );
	}

	function toggleTemplateVisibility() {
		$(".js-template").toggle(this.value === "template" && this.checked);
	}

	function populateInstanceNameFromTemplate() {
		$('.js-instance-name').val( $(this).find( 'option:selected' ).text() );
	}

	function editInsightsReport() {
		var $instance		= $(this).parents('.js-report-instance');

		$( '.js-report-action-tips' ).actiontip( 'hide' );

		psi.patterns.loadLargeDialog( {
			strUrl: '/?module=' + modules.sap + '&action=edit_report&report[id]=' + $instance.data('report-id'),
			title: __( 'Edit {%s, 0}', [ $instance.data( 'report-title' ) ] ),
			boolBookmark: true
		} );
	}

	// endregion

	// region Error Message Handling

	function addFilterError( filterId, message ) {
		var errorParent = $( '#' + filterId + ' > label' ),
			error = errorParent.children('p'),
			boolIsAppendError = true;
		if( 0 === error.length ) {
			var labelText = errorParent.html();
			errorParent.html(
				'<p class="alert slim error inline-alert" style="display:none;">' +
				'	<b class="bold">' + labelText + '</b>' +
				'</p>' );
			error = errorParent.children('p');
			error.fadeIn(100);
		}

		error.children().each(function() {
			if ( $(this).text() == message ) {
				boolIsAppendError = false;
				exit();
			}
		});
		if( boolIsAppendError ){
			error.append( '<br /><em class="margin5-top font11 block">' + message + '</em>' );
		}
	}

	function clearAllErrors() {
		clearErrors();
		$('div[id$="_filter"]').each( function() {
			clearFilterErrors( $(this).attr('id') );
		});
	}

	function clearErrors() {
		$('div.js-status-message-container .error').parent().fadeOut(100).html('');
		$('.global-error').fadeOut(100).html('');
	}

	function clearFilterErrors( filterId ) {
		var errorParent = $( '#' + filterId + ' > label' );
		var error = errorParent.children('p');
		if( 0 !== error.length ) {
			var labelText = errorParent.find('b').html();
			errorParent.html( labelText );
		}
	}

	// endregion

	// region Filter Change Handlers

	function reloadFilter( event ) {
		if( 1 == $("input[name='drilldown']").val() ) return;
		var strFilterKey = event.data.filter,
			// Lock should be visible only when we create new instance.
			strShowFilterLocks = $("#report_form").hasClass("js-create-edit-instance-form") ? '' : '&show_filter_locks=1',
			strUrl = $('#js-report-url').val().replace( 'reportsxxx', 'report_system_newxxx&action=view_dependent_filter' ) + strShowFilterLocks;
		setTimeout( function() {
			$.ajax( {
				type : 'POST',
				data: $( '.js-report-input' ).serialize(),
				beforeSend: function() {
					psi.patterns.showLoadingImage({
						strElementSelector: '#' + strFilterKey + '_filter'
					});
				},
				complete: function() {
					psi.patterns.removeLoadingImage({
						strElementSelector: '#' + strFilterKey + '_filter'
					});
					if( '' == strShowFilterLocks ) {
						$( 'i.lock' ).click( false );
					} else {
						validateLocksToDependentFilters();
					}
				},
				url : strUrl + '&filter_key=' + strFilterKey
			} ).done( function( response ) {
				if( $( '#' + strFilterKey + '_filter' ).hasClass( 'hide' ) ) {
					$( '#' + strFilterKey + '_filter' ).replaceWith(response);
					$( '#' + strFilterKey + '_filter' ).addClass( 'hide' );
				} else {
					$( '#' + strFilterKey + '_filter' ).replaceWith(response);
				}
				psi.patterns.bindEssentials();
			} );
		}, 100 );

	}

	function showIf( event ) {
		checkFilterIntegrity( event );
	}

	function showIfNot( event ) {
		checkFilterIntegrity( event );
	}

	function showIfValues( event ) {
		checkFilterIntegrity( event );
	}

	function checkFilterIntegrity( event ) {
		/* This function is called by the handlers to verify if all other dependencies are also fulfilled and satisfied before showing or hiding the filter.
		*  The function maintains an array that is used to store boolean value, if a dependency meets the condition then it stores 1 if it does not then it stores 0.*/
		var arrmixDependentFilters = $.parseJSON( event.data.dependencies_array ),
			arrboolFilterValue = [],
			strFilter = event.data.filter;

		$.each( arrmixDependentFilters, function( strFilterKey, mixFilterValue ) {
			/* The setTimeout is used to get the updated values of form elements*/
			setTimeout( function() {
				var intFilterInput = parseInt( $( 'div#' + strFilterKey + ' > input:hidden ' ).val() );

				var boolshowFilter = '';
				if( true === $( 'div#' + strFilterKey ).hasClass( 'onoff' ) ) {
					boolshowFilter = intFilterInput;
				} else {
					boolshowFilter = parseInt( $( '#' + strFilterKey + '_filter' ).find( 'select' ).val() );
				}

				switch( mixFilterValue ) {
					case 'showIf':
						if( !boolshowFilter ) {
							arrboolFilterValue.push( 0 );
						} else {
							arrboolFilterValue.push( 1 );
						}
						break;

					case 'showIfNot':
						if( boolshowFilter ) {
							arrboolFilterValue.push( 0 );
						} else {
							arrboolFilterValue.push( 1 );
						}
						break;

					default:
						if( "object" === typeof mixFilterValue && 'showIfValues' === mixFilterValue.function ) {
							var arrmixFilterValue = $( '#' + strFilterKey + '_filter input:checkbox:checked' ).map( function() {
								return $( this ).val();
							} ).get();
							var arrstrParameters = mixFilterValue.parameters.map( String );
							if( 1 <= arrmixFilterValue.length ) {
								// This checks if the filter is a Multi-Select, Combo-Box or a normal filter
								var boolCheck = arrmixFilterValue.some( function( mixValue ) {  // If filter is a Multi-Select or Combo-Box then checks if at least one value is in the showIfValues array
									return -1 !== $.inArray( mixValue, arrstrParameters );
								} );
								if( boolCheck ) {
									arrboolFilterValue.push( 1 );
								} else {
									arrboolFilterValue.push( 0 );
								}
							} else if( true === Array.isArray( arrstrParameters ) && 0 === arrstrParameters.length && 0 === arrmixFilterValue.length ) {
								arrboolFilterValue.push( 1 );
							} else {
								if( -1 === $.inArray( $( '#' + strFilterKey + '_filter' ).find( 'select' ).val(), arrstrParameters ) ) {
									arrboolFilterValue.push( 0 );
								} else {
									arrboolFilterValue.push( 1 );
									if( mixFilterValue.reloadFilter ) {
										reloadFilter( event );
									}
								}
							}
						}
						break;
				}
			}, 100);

		} );

		/* The setTimeout is used so we don't have to flip the value of toggle button because filterchange(showIf showIfNot) gets called first and then
			*  the hidden input value is changed. */
		setTimeout( function() {

			let objFilter = $( 'div#' + strFilter );
			$( '#' + strFilter + '_filter' ).show();
			$( '#' + strFilter + '_filter' ).removeClass('hide');
			objFilter.attr( "disabled", false );
			objFilter.find( 'input:hidden' ).attr( 'disabled', false );
			if( -1 === $.inArray( 1, arrboolFilterValue ) ) {
				$( '#' + strFilter + '_filter' ).hide();
				$( '#' + strFilter + '_filter' ).addClass( 'hide' );
				if( objFilter.hasClass( 'onoff' ) ) {
					if( 0 != objFilter.length && objFilter.find( 'input:hidden' ).attr( 'value' ) != objFilter.find( 'input:hidden' ).attr( 'default_value' ) ) {
						objFilter.click();
					}
					objFilter.find( 'input:hidden' ).attr( 'disabled', true );
				} else {
					objFilter.attr( "disabled", true );
				}
			}

		}, 100 );
	}

	function toggleInputFilters( objCaller, arrstrFilterKeys, boolVisible ) {
		var index, strFilterKey;
		if( null == boolVisible ) {
			boolVisible = false;
		}
		for( index in arrstrFilterKeys ) {
			if( !arrstrFilterKeys.hasOwnProperty( index ) ) continue;
			strFilterKey = arrstrFilterKeys[index];
			if( true === boolVisible ) {
				$( '#' + strFilterKey + '_filter' ).removeClass('hide');
				$( '#' + strFilterKey + '_filter' ).show();
			} else {
				// When hiding these, set the values to zero so they don't show weird values in the report parameters
				$( '#' + strFilterKey + '_filter select' ).val( 0 );
				if( 0 != $( '#' + strFilterKey + ' input' ).length && 0 != $( '#' + strFilterKey + ' input' ).val() ) {
					$( '#' + strFilterKey + '_filter div' ).click();
				}
				$( '#' + strFilterKey + '_filter' ).hide();
			}
		}

		// Simulate change on any visible element so that its handlers will fire properly
		for( index in arrstrFilterKeys ) {
			if( !arrstrFilterKeys.hasOwnProperty( index ) ) continue;
			strFilterKey = arrstrFilterKeys[index];
			if( true === boolVisible ) {
				$( '#' + strFilterKey + '_filter select' ).change();
			}
		}
	}

	function toggleReportFilters( strParentField, boolInverted ) {

		if( typeof boolInverted === 'undefined' || null == boolInverted ) {
			boolInverted = false;
		}

		var boolInputValue = $('#'+strParentField+' input').val();
		var arrstrChildElementNames = $('div#'+strParentField).attr('child_filters').split('|');
		$.each( arrstrChildElementNames, function( index, value ){

			var element = value + '_filter';
			if( boolInverted == boolInputValue ) {
				$('#' + element).hide();
				$( '#' + element ).find( 'input, textarea, button, select').attr( 'disabled','disabled' );
			} else {
				$('#' + element).show();
				$( '#' + element).find( 'input, textarea, button, select' ).removeAttr( 'disabled' );
			}
		} );
	}

	function toggleDependentElementsInPreLease ( strTriggerElementId ) {
		if( 'summarize_by_property' == strTriggerElementId ) {
			$('#group_by_filter').toggleClass('hide');
			$('#space_options_filter').toggleClass('hide');
			$('#consolidate_properties_filter').toggleClass('hide');
			$('#combine_unit_spaces_with_same_lease_filter' ).toggleClass('hide');
		} else {
			$('#space_options_filter').toggleClass('hide');
		}
	}

	function togglePeriodFilters( strTrailingPeriod, strFuturePeriod, strExpandByPeriod, strPeriodFilter, boolIncludeTrailingFuturePeriodValue ) {

		if( typeof strPeriodFilter === 'undefined' ) {
			strPeriodFilter = 'period';
		}

		if( typeof strExpandByPeriod === 'undefined' ) {
			strExpandByPeriod = null;
		}

		if( typeof(boolIncludeTrailingFuturePeriodValue) == 'undefined' ) {
			boolIncludeTrailingFuturePeriodValue = false;
		}

		if( !boolIncludeTrailingFuturePeriodValue ) {
			if( '0' !== $('#' + strTrailingPeriod ).val() ) {
				$( '#' + strFuturePeriod + '_filter' ).hide();
			} else {
				$( '#' + strFuturePeriod + '_filter' ).show();
			}
			if( null != strExpandByPeriod ) {
				$( '#' + strExpandByPeriod + '_filter select' ).removeAttr( 'disabled' );
				$( '#' + strExpandByPeriod + '_filter' ).show();
			}
		}

		if( ( '0' === $('#' + strTrailingPeriod ).val() ) && ( ( '0' === $('#' + strFuturePeriod ).val() ) || 0 === strFuturePeriod.length ) ) {
			if( null != strExpandByPeriod ) {
				$( '#' + strExpandByPeriod + '_filter select' ).prop( 'selectedIndex', 0 );
				$( '#' + strExpandByPeriod + '_filter' ).hide();
			};
		}
		// Update future and trailing filter to default if period filter value changed.
		if( null != strExpandByPeriod ) {
			var strPeriodFilterIdElementSelector = $( '#' + strPeriodFilter + '_filter_range' ), arrStrPostMonthAndDate;

			if( 'undefined' !== typeof( strPeriodFilterIdElementSelector.attr('onChange') ) && 'true' === strPeriodFilterIdElementSelector.attr('onChange').slice(-7,-3) ) {
				arrStrPostMonthAndDate = [ 'today', 'yesterday', 'date', 'currentwk', 'lastwk' ];
			} else {
				arrStrPostMonthAndDate = [ 'currentcm', 'priorcm', 'nextcm', 'currentpm', 'nextpm', 'priorpm', 'pm', 'cm', 'cq' ];
			}

			strPeriodFilterIdElementSelector.change( function() {
				var boolVisible = ( -1 !== $.inArray( $( this ).val(), arrStrPostMonthAndDate ) );
				if( true === boolVisible ) {
					$( '#' + strFuturePeriod + '_filter' ).show();
					$( '#' + strFuturePeriod ).val( 0 );
					$( '#' + strTrailingPeriod + '_filter' ).show();
					$( '#' + strTrailingPeriod ).val( 0 );
					$( '#' + strExpandByPeriod + '_filter' ).hide();
				} else {
					$( '#' + strFuturePeriod + '_filter' ).hide();
					$( '#' + strTrailingPeriod + '_filter' ).hide();
				}
			} );
		}

		// To handle "Show Periods From" Filter hide/show dependency which is currently present only in Income Statement Report.
		if( ( 0 != $( '#trailing_periods' ).val() || 0 != $( '#future_periods' ).val() ) && 0 != $( '#expand_by_month' ).val() ) {
			$( '#show_periods_from_filter select' ).removeAttr( 'disabled' );
			$( '#show_periods_from_filter' ).show();
		} else {
			$( '#show_periods_from_filter' ).hide();
		}
	}

// This function is for handling dependencies of compare period filter with other period filters.
	function toggleComparePeriodsFilter( strComparePeriods, arrExpandByPeriod ) {

		setTimeout( function() {
			var arrPeriodFilterValues = [ 'pmrange', 'fyrtodate', 'pmtodate', 'currentfq', 'priorfq', 'priorfyr', 'currentfyr' ];
			var arrPeriodFilterValuesForVisibility = [ 'pmrange', 'currentfq', 'priorfq', 'priorfyr', 'currentfyr' ];
			var undfnd;

			if( 0 == $( '#' + strComparePeriods + '_filter' ).find('input').val() && !arrPeriodFilterValues.includes( $('#period_filter_range').val() ) ) {
				toggleInputFilters( this, [ 'trailing_periods', 'future_periods', 'expand_by_month' ], true );
				ReportsModule.toggleAdvancedTrailingFuturePeriods( $( '#period_filter_range'  ), [ 'trailing_periods', 'future_periods' ], undfnd, undfnd, arrExpandByPeriod );
				$( '#expand_by_gl_book_filter' ).show();
			} else if( 0 == $( '#' + strComparePeriods + '_filter' ).find('input').val() && arrPeriodFilterValuesForVisibility.includes( $('#period_filter_range').val() ) ) {
				toggleInputFilters( this, [ 'expand_by_month'], true );
				ReportsModule.toggleAdvancedTrailingFuturePeriods( $( '#period_filter_range'  ), [], undfnd, undfnd, arrExpandByPeriod );
				$( '#expand_by_gl_book_filter' ).show();
			} else {
				toggleInputFilters( this, [ 'trailing_periods', 'future_periods', 'expand_by_month', 'show_periods_from' ], false );
				$( '#trailing_periods' ).prop('disabled', false );
				$( '#future_periods' ).prop('disabled', false );
				$( '#expand_by_gl_book_filter' ).hide();
			} }, 300 );
	}

	function toggleCompareFilter( objCaller ) {

		setTimeout( function() {
			var arrPeriodFilterValues = [ 'date', 'fyrtodate', 'pmtodate', 'priorfq', 'priorfyr', 'currentfyr', 'currentfq', 'pmrange' ];

			if( 1 == $( 'div#compare_post_month' ).find('input').val() || 1 == $( 'div#compare_prior_year' ).find('input').val() || arrPeriodFilterValues.includes( $( objCaller ).val() ) ) {
				toggleInputFilters( this, [ 'trailing_periods', 'future_periods' ], false );
				$( '#trailing_periods' ).prop('disabled', false );
				$( '#future_periods' ).prop('disabled', false );
			} else {
				toggleInputFilters( this, [ 'trailing_periods', 'future_periods' ], true );
			} }, 300 );
	}

	function toggleCompareMonthYearFilter( objCaller ) {

		var arrPeriodFilterValues = [ 'date', 'fyrtodate', 'pmtodate', 'priorfq', 'priorfyr', 'currentfyr' ];
		setTimeout( function() {
			if( 0 == $( '#compare_post_month input').val() && 0 == $( '#compare_prior_year input').val() && !arrPeriodFilterValues.includes( $('#period_filter_range').val() ) ) {
				if( $( '#trailing_periods' ).val() != 0 ) {

					$( '#trailing_periods_filter' ).show();
					$( '#future_periods_filter' ).hide();
				} else if( $( '#future_periods' ).val() != 0 ) {

					$( '#future_periods_filter' ).show();
					$( '#trailing_periods_filter' ).hide();
				} else {

					$( '#future_periods_filter' ).show();
					$( '#trailing_periods_filter' ).show();
				}
			} else {

				$( '#trailing_periods_filter' ).hide();
				$( '#future_periods_filter' ).hide();
			}
		}, 500 );
	}

	function toggleExpandByPeriodFilter( strExpandByPeriod, strCaller, boolRemoveMonthOption ) {

		var arrOptionKeyValues = [];

		$("#" + strExpandByPeriod + " option").each(function() {
			arrOptionKeyValues[$(this).val()] =  $(this).text();
		});

		if( strCaller.val() == 'pmrange' ) {

			$( '#trailing_periods_filter' ).hide();
			$( '#future_periods_filter' ).hide();

			$( '#' + strExpandByPeriod + '_filter select' ).removeAttr( 'disabled' );
			$( '#' + strExpandByPeriod + '_filter' ).show();

			if( 1 == $( '#compare_periods' ).find('input').val() ) {
				$( '#' + strExpandByPeriod + '_filter' ).hide();
			}

			if(  0 != $( '#' + strExpandByPeriod ).val() && 3 != $( '#' + strExpandByPeriod ).val() ) {
				$( '#show_periods_from_filter select' ).removeAttr( 'disabled' );
				$( '#show_periods_from_filter' ).show();
			}

			if( boolRemoveMonthOption ) {
				$( '#' + strExpandByPeriod ).find( 'option[value=1]' ).remove();
			}

		} else {

			if( boolRemoveMonthOption && 0 == $( '#' + strExpandByPeriod + ' option[value="1"]' ).length ) {

				$( '#' + strExpandByPeriod + ' option' ).eq( 1 ).before( $( "<option></option>" ).val( 1 ).text( "Month" ) );
			}

			setTimeout( function() {
				if( 1 == $( '#compare_periods' ).find('input').val() ) {
					$( '#trailing_periods_filter' ).hide();
					$( '#future_periods_filter' ).hide();
				}
			}, 200 );

			ReportsModule.toggleTrailingFuturePeriods( strCaller, [ strExpandByPeriod, 'trailing_periods', 'future_periods' ] );
			var arrOptionValues = [];
			$('#' + strExpandByPeriod + ' option').each(function() {
				arrOptionValues.push( $(this).val() );
			});

			if( !( $.inArray( '1', arrOptionValues ) != -1 ) ) {
				$( '#' + strExpandByPeriod ).append( $( '<option></option>' ).val( '1' ).html( arrOptionKeyValues['1'] ) );
			}

		}
	};

	function toggleTrailingFuturePeriods( objCaller, arrstrFilterKeys, boolIsAllowedPeriodsForDates, arrstrPeriodOptions ) {
		var arrStrPostMonthAndDate, index, strFilterKey;
		if( 'undefined' !== typeof( boolIsAllowedPeriodsForDates ) && true === boolIsAllowedPeriodsForDates ) {
			arrStrPostMonthAndDate = [ 'today', 'yesterday', 'date', 'currentwk', 'lastwk' ];
		} else {
			arrStrPostMonthAndDate = [ 'currentcm', 'priorcm', 'nextcm', 'currentpm', 'nextpm', 'priorpm', 'pm', 'cm', 'cq' ];
		}

		if( 'undefined' !== typeof( arrstrPeriodOptions ) ) {
			arrStrPostMonthAndDate = arrstrPeriodOptions;
		}

		var boolVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrStrPostMonthAndDate ) );
		for( index in arrstrFilterKeys ) {
			if( !arrstrFilterKeys.hasOwnProperty( index ) ) continue;
			strFilterKey = arrstrFilterKeys[index];
			if( true === boolVisible ) {
				$( '#' + strFilterKey + '_filter' ).show();
			} else {
				// When hiding these, set the values to zero so they don't show weird values in the report parameters
				$( '#' + strFilterKey + '_filter select' ).val( 0 );
				if( 0 !== $( '#' + strFilterKey + '_filter input' ).length && 0 !== $( '#' + strFilterKey + '_filter input' ).val() ) {
					$( '#' + strFilterKey + '_filter div' ).click();
				}
				$( '#' + strFilterKey + '_filter' ).hide();
			}
		}

		// Simulate change on any visible element so that its handlers will fire properly
		for( index in arrstrFilterKeys ) {
			if( !arrstrFilterKeys.hasOwnProperty( index ) ) continue;
			strFilterKey = arrstrFilterKeys[index];
			if( true === boolVisible ) {
				$( '#' + strFilterKey + '_filter select' ).change();
			}
		}
	}

	function toggleConsolidateByFilter( strGroupBy, strConsolidateBy ) {
		( 'consolidate_all_properties' == $('#' + strConsolidateBy ).val() ) ? $( '#' + strGroupBy + '_filter' ).show() : $( '#' + strGroupBy + '_filter' ).hide();
	}

	function toggleDependentElements( strCallerFilterId, strToggleFilterId, boolRunByValue ) {
		if( typeof boolRunByValue === 'undefined' ) {
			boolRunByValue = false;
		}

		var arrstrHtmlElements 	= ["SELECT"],  //You can add more elements as per requirement
			strFilterString		='_filter',
			boolInputValue = $('#'+strCallerFilterId+'_filter input').val();

		//Radio button
		if( $( 'div#'+strCallerFilterId ).hasClass( "onoff" ) ) {
			if( true == boolRunByValue && 1 == boolInputValue ) {
				$( '#' + strToggleFilterId + strFilterString ).hide();
				$( '#' + strToggleFilterId + strFilterString ).find( 'input, textarea, button, select').attr( 'disabled','disabled' );
			} else if( $( '#' + strToggleFilterId + strFilterString ).is( ':visible' ) ) {
				$( '#' + strToggleFilterId + strFilterString ).hide();
				$( '#' + strToggleFilterId + strFilterString ).find( 'input, textarea, button, select').attr( 'disabled','disabled' );
			} else {
				$( '#' + strToggleFilterId + strFilterString ).show();
				$( '#' + strToggleFilterId + strFilterString).find( 'input, textarea, button, select' ).removeAttr( 'disabled' );
			}
			//If toggleElement is exits
			if( $( '#' + strToggleFilterId ).length > 0 ) {
				toggleDependentElements( strToggleFilterId );
			}
		} else {

			//All html Tag except Radio
			var callerFilterDivId = strCallerFilterId + strFilterString,
				htmlTag = ( $( '[id^='+strCallerFilterId+']' ).get(2).tagName ),
				hideElement = ( $('[id^='+ strCallerFilterId +']').get(2).value );

			if( $.inArray( htmlTag, arrstrHtmlElements ) == 0 ) {
				switch(htmlTag) {
					case 'SELECT':
						setTimeout( function() {
							$( '#'+strCallerFilterId+' option' ).each( function(e) {
								var optionValue = $(this).val();
								// If select is visible then show dependent elements else hide all dependent element
								if( $('#'+callerFilterDivId).is(':visible') ) {
									if( hideElement == optionValue ) {
										$( '#'+ optionValue + strFilterString ).show();
										$( '#'+ optionValue + strFilterString).find( 'input, textarea, button, select' ).removeAttr( 'disabled' );
									} else {
										$( '#'+ optionValue + strFilterString ).hide();
										// Restrict to submit disabled elements
										$( '#'+ optionValue + strFilterString ).find( 'input, textarea, button, select' ).attr( 'disabled', 'disabled' );
									}
								} else {
									$( '#'+ optionValue + strFilterString).hide();
									$( '#'+ optionValue + strFilterString).find( 'input, textarea, button, select' ).attr( 'disabled', 'disabled' );
								}
							});
						}, 300 );
						break;
					default:
						break;
				}
			}
		}
	};

	function showDeleteConfirmBox( url, currElement ) {
		var response = confirm("Are you sure you want to delete this recurring payment?");

		if( response == true ) {
			jQuery.ajax({
				type: "GET",
				url: url,
				data: '',
				cache: false
			}).done(function ( data ) {
				if( data == 'false' ) {
					jQuery('.table-controls').append('<label style=color:red id=errorMsg>Selected recurring payment could not be deleted.</label>');
					setTimeout( "$('#errorMsg').remove();", 15000);
					return false;
				} else {
					jQuery(currElement).parent().hide('slow', function() {
						jQuery(currElement).parent().remove();
					});
				}
			});
		} else {
			return false;
		}
	}

	function toggleAdvancedTrailingFuturePeriods( objCaller, arrstrFilterKeys, boolIsAllowedPeriodsForDates, arrstrPeriodOptions, arrOptionKeyValues ) {
		var arrstrPostMonthsAndDates;
		if( 'undefined' !== typeof( boolIsAllowedPeriodsForDates ) && true === boolIsAllowedPeriodsForDates ) {
			arrstrPostMonthsAndDates = [ 'today', 'yesterday', 'date', 'currentwk', 'lastwk' ];
		} else {
			arrstrPostMonthsAndDates = [ 'currentcm', 'priorcm', 'currentpm', 'nextpm', 'priorpm', 'pm', 'cm', 'cq' ];
		}

		var arrstrExpandByPeriodOption = ['currentfyr', 'currentfq', 'priorfq', 'priorfyr', 'pmrange'];
		var arrstrExpandByQuarterOption = ['currentfyr', 'priorfyr', 'pmrange'];
		var arrstrExpandByMonthOption = ['currentfq', 'priorfq','currentfyr', 'priorfyr', 'pmrange'];
		if( 'undefined' !== typeof( arrstrPeriodOptions ) ) {
			arrstrPostMonthsAndDates = arrstrPeriodOptions;
		}

		var arrOptionValues = [];
		var boolVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrstrPostMonthsAndDates ) );
		var boolExpandByVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrstrExpandByPeriodOption ) );
		var boolExpandByMonthVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrstrExpandByMonthOption ) );
		var boolExpandByQuarterVisible = ( -1 !== $.inArray( $( objCaller ).val(), arrstrExpandByQuarterOption ) );

		arrOptionValues['0'] = arrOptionKeyValues['0'];

		if( true == boolExpandByVisible ) {
			$( '#expand_by_month_filter select' ).removeAttr( 'disabled' );
			$( '#expand_by_month_filter' ).show();
			if( boolExpandByMonthVisible ) {
				arrOptionValues['1'] = arrOptionKeyValues['1'];
			}

			if( boolExpandByQuarterVisible && arrOptionKeyValues['3'] ) {
				arrOptionValues['3'] = arrOptionKeyValues['3'];
			}

		} else {
			$( '#expand_by_month_filter' ).hide();
			arrOptionValues['1'] = arrOptionKeyValues['1'];
			if( arrOptionKeyValues['3'] ) {
				arrOptionValues['3'] = arrOptionKeyValues['3'];
			}
		}

		if( 1 == $( '#compare_periods' ).find('input').val() ) {
			$( '#expand_by_gl_book_filter' ).hide();
		} else {
			if( $( '#expand_by_month' ).val() == 0 ) {
				$( '#expand_by_gl_book_filter' ).show();
			} else {
				$( '#expand_by_gl_book_filter' ).hide();
			};
		}

		var strSelectedOption =  $( '#expand_by_month option:selected' ).val();

		$( '#expand_by_month' ).find('option').remove();
		for( indexOption in arrOptionValues ) {
			if( !( $.inArray( indexOption, arrOptionValues ) != -1 ) ) {
				$( '#expand_by_month' ).append( $( '<option></option>' ).val( indexOption ).html( arrOptionValues[indexOption] ) );
			}
		}

		if( ( true == boolExpandByVisible && 'pmrange' == $( objCaller ).val() ) || false == boolExpandByVisible ) {
			$( '#expand_by_month' ).append( $( '<option></option>' ).val( 2 ).html( arrOptionKeyValues['2'] ) );
		}

		$( '#expand_by_month option[value="'+ strSelectedOption +'"]' ).attr('selected', 'selected');
		for( index in arrstrFilterKeys ) {

			var strFilterKey = arrstrFilterKeys[index];
			if( true == boolVisible ) {
				$( '#' + strFilterKey + '_filter' ).show();
			} else {

				// When hiding these, set the values to zero so they don't show weird values in the report parameters
				$( '#' + strFilterKey + '_filter select' ).val( 0 );
				if( 0 != $( '#' + strFilterKey + '_filter input' ).length && 0 != $( '#' + strFilterKey + '_filter input' ).val() ) {
					$( '#' + strFilterKey + '_filter div' ).click();
				}
				$( '#' + strFilterKey + '_filter' ).hide();
			}
		};

		for( index in arrstrFilterKeys ) {
			var strFilterKey = arrstrFilterKeys[index];
			if( true == boolVisible ) {
				$( '#' + strFilterKey + '_filter select' ).change();
			}
		}

	}

	function toggleAdvancedExpandByPeriodFilter( strExpandByPeriod, arrExpandByPeriod ) {

		setTimeout( function() {
			if( 'daterange' == $( '#period_filter_range'  ).val() ) {
				$( '#compare_periods_filter' ).hide();
				$( '#custom_period_filter' ).hide();
				$( '#show_occupancy_percentages_filter' ).hide();
				$( '#begin_end_cash_balances_filter' ).hide();
				if( 0 != $( '#begin_end_cash_balances_filter input' ).length && 0 != $( '#begin_end_cash_balances_filter input' ).val() ) {
					$( '#begin_end_cash_balances_filter div' ).click();
				}
				$( '#beginning_ending_cash_balance_detail_filter' ).hide();
				$( '#year_to_date_filter' ).hide();
				$( '#show_periods_from_filter' ).hide();
				$( '#' + strExpandByPeriod + '_filter select' ).prop( 'selectedIndex', 0 );
				$( '#' + strExpandByPeriod + '_filter' ).hide();
			} else {
				$( '#compare_periods_filter' ).show();
				if( 'expand_by_month' === strExpandByPeriod ) {
					$( '#' + strExpandByPeriod + '_filter select' );
				} else {
					$( '#' + strExpandByPeriod + '_filter select' ).prop( 'selectedIndex', 0 );
				}
				if( 1 == $( '#compare_periods' ).find('input').val() ) {
					$( '#custom_period_filter' ).show();
				}

				if( false == $('#custom_tags_filter_items .form-checkbox, #departments_filter_items .form-checkbox').is( ':checked') ) {
					$( '#show_occupancy_percentages_filter' ).show();
				}

				$( '#begin_end_cash_balances_filter' ).show();
				if( 1 == $( '#begin_end_cash_balances_filter' ).find('input').val() ) {
					$( '#beginning_ending_cash_balance_detail_filter').show();
				}

				$( '#year_to_date_filter' ).show();
			}

			var undfnd;

			if( 1 == $( '#compare_periods' ).find('input').val() ) {
				$( '#' + strExpandByPeriod + '_filter' ).hide();
				$( '#trailing_periods_filter' ).hide();
				$( '#future_periods_filter' ).hide();
				$( '#expand_by_gl_book_filter' ).hide();
			} else {
				ReportsModule.toggleAdvancedTrailingFuturePeriods( $( '#period_filter_range'  ), [ 'trailing_periods', 'future_periods' ], undfnd, undfnd, arrExpandByPeriod );
				if( $( '#expand_by_month' ).val() == 0 ) {
					$( '#expand_by_gl_book_filter' ).show();
				} else {
					$( '#expand_by_gl_book_filter' ).hide();
				};
			}}, 300 );

	}

	function loadPeriodFilterValue( strFilterKey ) {
		clearAllErrors();

		if( 'undefined' !== typeof modules.instances && true === boolLoadPeriodFilterValue ) {

			var arrPeriodFilterValues	= [ 'currentpm', 'currentpmm', 'priorpm', 'priorpmm', 'nextpm', 'currentfq', 'currentfqm', 'priorfq', 'priorfqm', 'currentfyr', 'priorfyr' ],
				arrstrPeriodFilterMatchValues = [ 'currentpmm', 'priorpmm', 'currentfqm', 'priorfqm' ];

			$(document).off( 'click','#report_filterproperty_group_ids_selector li' ).on( 'click','#report_filterproperty_group_ids_selector li', function() {
				displayValue();
				loadDisplayOptions();
			});

			$(document).off( "mouseup","#report_filterproperty_group_ids div.form-multiselectbox > ul li" ).on("mouseup","#report_filterproperty_group_ids div.form-multiselectbox > ul li", function() {
				displayValue();
			});

			if( 0 < $('#report_filterproperty_group_ids').find( 'ul li:visible' ).length ) {
				setTimeout( function() {
					displayValue();
				}, 500 );
			}

			$(document).off( 'mouseup', '#report_filterproperty_group_ids_selector #property_list span .add' ).on( 'mouseup', '#report_filterproperty_group_ids_selector #property_list span .add', function() {
				setTimeout( function() {
					displayValue();
				}, 500 );
			} );

			$(document).on( 'change', '#period_filter #use_alternative_year_end', function() {
				if( 'currentfq' === $( document).find( '#period_filter #period_filter_range' ).val() || 'priorfq' === $( document).find( '#period_filter #period_filter_range' ).val() || 'currentfyr' === $( document).find( '#period_filter #period_filter_range' ).val() || 'priorfyr' === $( document).find( '#period_filter #period_filter_range' ).val() ) {
					setTimeout( function() {
						displayValue();
					}, 500 );
				}
			});

			$(document).off( 'change', '#period_filter #period_filter_range' ).on( 'change', '#period_filter #period_filter_range', function() {
				displayValue();
			});

			if( $( 'input[type=hidden][name="report_filter[period][allow_different_post_months]"]' ).val() ) {
				$( document ).on( 'change', '#consolidate_by_filter #consolidate_by', function() {
					displayValue();
				});
			}

			function loadDisplayOptions(e) {
				if( 0 === $('#configure_download_property_groups_container').length ) {
					reloadDisplayOptions( e, true );
				}
			}

			function displayValue() {
				setTimeout( function() {
					clearAllErrors();

					var strPeriodFilterValue = $( '#period_filter_range' ).val();
					$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
					$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );

					$( '#period_filter_range' ).parent().next().children().addClass( 'hide' );
					$( '#period_filter_range' ).parent().next().find( '.' + strPeriodFilterValue ).removeClass( 'hide' );

					if( $.inArray( strPeriodFilterValue, arrPeriodFilterValues ) !== -1 ) {

						$( '#period_filter #period_filter_start_date' ).removeClass( 'hide' );
						if( 'currentfq' === strPeriodFilterValue || 'priorfq' === strPeriodFilterValue || 'currentfyr' === strPeriodFilterValue || 'priorfyr' === strPeriodFilterValue || $.inArray( strPeriodFilterValue, arrstrPeriodFilterMatchValues ) !== -1 ) {
							$( '#period_filter #period_filter_end_date' ).removeClass( 'hide' );
						}
						if( 0 === $('#configure_download_property_groups_container').length ) {
							psi.patterns.ajaxRequest( {
								url: '/?module=' + modules.instances + '&action=period_filter_display_value',
								data: $( '.js-create-edit-instance-form' ).serialize(),
								success: function( response ) {
									try {
										var objResponse = $.parseJSON( response );

										if( true === objResponse.error ) {
											$( '.global-error p' ).remove();
											$( 'p.error' ).remove();
											$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
											$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );
											$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
											$( '.global-error' ).html( '<p class="alert slim error inline-alert" id="error_msg"><span class="error text-red font12 ">' + objResponse.message + '</span>' ).css( 'display', 'block' );
										} else {
											$( '.global-error p' ).remove();
											var strStartPostMonth = objResponse.data.start_post_month.split( /\//g ),
												strEndPostMonth = objResponse.data.end_post_month.split( /\//g ),
												strStartDate = objResponse.data.start_date.split( /\//g ),
												strEndDate = objResponse.data.end_date.split( /\//g ),
												strWarningMessage = objResponse.message;

											if( 'currentpm' === strPeriodFilterValue || 'priorpm' === strPeriodFilterValue || 'nextpm' === strPeriodFilterValue ) {
												$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );
												if( !strWarningMessage ) {
													$( '#period_filter #period_filter_start_date' ).removeClass( 'hide' ).val( strStartPostMonth[0] + '/' + strStartPostMonth[2] );
													$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
												} else {
													$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
													$( '#period_filter span#period_warning_message' ).removeClass( 'hide' );
													$( '#period_filter span#period_warning_message' ).text( strWarningMessage );
												}
											} else if( 'priorfq' == strPeriodFilterValue || 'currentfq' == strPeriodFilterValue || 'currentfyr' == strPeriodFilterValue || 'priorfyr' == strPeriodFilterValue ) {
												if( !strWarningMessage ) {
													$( '#period_filter #period_filter_start_date' ).removeClass( 'hide' ).val( strEndPostMonth[0] + '/' + strEndPostMonth[2] );
													$( '#period_filter #period_filter_end_date' ).removeClass( 'hide' ).val( strStartPostMonth[0] + '/' + strStartPostMonth[2] );
													$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
												} else {
													$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
													$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );
													$( '#period_filter span#period_warning_message' ).removeClass( 'hide' );
													$( '#period_filter span#period_warning_message' ).text( strWarningMessage );
												}
											} else if( $.inArray( strPeriodFilterValue, arrstrPeriodFilterMatchValues ) !== -1 ) {
												$( '#period_filter #period_filter_start_date' ).removeClass( 'hide' ).val( strEndDate[0] + '/' + strEndDate[1] + '/' + strEndDate[2] );
												$( '#period_filter #period_filter_end_date' ).removeClass( 'hide' ).val( strStartDate[0] + '/' + strStartDate[1] + '/' + strStartDate[2] );
												$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
											}
										}
									} catch( e ) {
										$( '.global-error' ).html( '<p class="alert error slim" id="error_msg"><span class="error text-red font15 ">' + __( 'Failed to load post month.' ) + '</span>' );
									}
								}
							} );
						}
					} else {
						$( '.global-error p' ).remove();
						$( '#period_filter #period_filter_start_date' ).addClass( 'hide' );
						$( '#period_filter #period_filter_end_date' ).addClass( 'hide' );
						$( '#period_filter span#period_warning_message' ).addClass( 'hide' );
					}
				}, 500 );
			}

			/*
			* Added this code hack so that custom_period in Balance Sheet can work properly.
			* We require to add this code as key for period is statically binded in our system.
			* */
			$(document).off( 'change', '#custom_period_filter #custom_period_filter_range' ).on( 'change', '#custom_period_filter #custom_period_filter_range', function() {

				var strPeriodFilterValue = $( '#custom_period_filter #custom_period_filter_range' ).val();

				$( '#custom_period_filter #custom_period_filter_start_date' ).addClass( 'hide' );
				$( '#custom_period_filter #custom_period_filter_end_date' ).addClass( 'hide' );

				$(this).parent().next().children().addClass( 'hide' );
				$(this).parent().next().find('.' + strPeriodFilterValue).removeClass( 'hide' );

			});
		} else {
			return false;
		}
	}

	// endregion

	// region Drill-down Event Handlers

	function loadPaymentDetails( paymentId ) {
		dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=update_ar_paymentxxx&action=view_ar_payment&source=resident_receipt_report&ar_payment[id]='+paymentId, strContentId: 'ar_transaction', title: __( 'Payment' ) } );
		return;
	}

	function loadInvoiceDetails( ap_header_id, lease_id ) {
		dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=invoicexxx&action=view_invoice&ap_header[id]='+ap_header_id+'&lease[id]='+lease_id, strContentId: 'Invoice', title: __( 'Invoice Details' )} );
	}

	function loadcheckDetails( paymentId ) {
		dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=check_registerxxx&action=view_check&payment[id]='+paymentId, strContentId: 'view_check', title: __( 'Check' ) } );
	}

	function callFunctionsOnModalWindow( strFunction, arrArgs, boolClearFunction = true ) {
		var tryCount = 0;
		var timerId = setInterval( function() {
			try {
				strFunction1 = window[strFunction];
				eval( strFunction1( arrArgs[0], arrArgs[1], arrArgs[2] ) );
				clearInterval( timerId );
				if ( boolClearFunction ) {
					window[strFunction] = 0;//To clear this function from JS cache else it will be available before next function call is made
				}
			} catch( err ) {
				//try for 5 times. Else exit.
				if(tryCount >= 10 ) {
					clearInterval( timerId );
				}
				tryCount = tryCount + 1;
			}
		}, 3500 );
	}

	function loadResidents( lease_id, customer_id, resident_name, load_full_ledger_tab ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&load_financial_system=1&is_report_drilldown=1&view_full_ledger=' + load_full_ledger_tab, title: __( 'Resident: {%s,0}', [ resident_name ] ) } );
		var funcToCall = 'changeTab';
		var funcArgs = [ 'view_ar_transactions', '?module=ledgerxxx&action=view_full_ledger&ledger_filter[show_reversals]=true&sort_by=post_month&sort_dir=DESC' ];
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadApPayeeRecurringTransactionsDetails ( apPayeeId ) {
		dialog = psi.patterns.addDialogContent( { strUrl: '/?module=ap_payee_systemxxx&ap_payee[id]=' +apPayeeId, title: __( 'Recurring Transaction Details' ) } );
		setTimeout( function() {
			loadApPayeeTab('ap_payee_financial_tab','/?module=scheduled_ap_transactionsxxx&action=view_scheduled_ap_transactions&ap_payee[id]=' + apPayeeId);

			$( '#view_scheduled_ap_transactions' ).addClass( 'selected' ).siblings().removeClass('selected');

		}, 1000 );
	}

	function viewScheduledApTransaction( intScheduledApTransactionHeaderId ) {
		psi.patterns.loadDialog( { strUrl: '?module=scheduled_ap_transactionsxxx&action=view_scheduled_ap_transaction&scheduled_ap_transaction_header[id]=' + intScheduledApTransactionHeaderId + '&is_po_request_from_vendor=1', strContentId: 'view_scheduled_ap_transaction', title: __( 'View Scheduled Transaction' ) } );
	}

	function loadCustomerHousehold( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s,0}', [ resident_name ] ) } );
		var funcToCall = 'loadCustomerTab';
		var funcArgs = new Array( 'customer_household_tab', '/?module=household_peoplexxx&action=view_people&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=' );
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadPeopleDetails( lease_id, customer_id, selected_customer_id ) {
		psi.patterns.loadDialog({ strUrl: '/?module=household_peoplexxx&action=view_profile&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=&sub_tab=&selected_customer[id]='+selected_customer_id, strContentId: 'profile_dialog', title: 'Profile' });
		return;
	}

	function loadApplication( applicationId, applicationName ) {
		dialog = psi.patterns.addDialogContent( { strUrl: '/?module=application_systemxxx&application[id]='+applicationId, title: __( 'Lead: {%s, 0}', [applicationName] ) } );
		return;
	}

	function loadChargeDetails( ar_transaction_id, lease_id, customer_id ) {
		dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=charge_ar_transactionxxx&action=view_charge_ar_transaction&ar_transaction[id]='+ar_transaction_id+'&lease[id]='+lease_id+'&customer[id]='+customer_id+'&from_screen=ledger', strContentId: 'ar_transaction', title: __( 'Charge Details' ) } );
		return;
	}

	function loadScheduledChargeDetails( scheduled_charge_id, lease_id, customer_id ) {
		dialog = psi.patterns.loadDialog( { strUrl: '/?module=scheduled_chargexxx&action=view_scheduled_charge_history&scheduled_charge[id]='+scheduled_charge_id+'&lease[id]='+lease_id+'&customer[id]='+customer_id+'&from_screen=recurring_charges', strContentId: 'scheduled_charge', title: __( 'Scheduled Charge Details' ) } );
		return;
	}

	function loadLeaseSummary( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id, title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTab';
		var funcArgs = new Array( 'customer_lease_tab', '/?module=customer_leasexxx&lease[id]='+lease_id+'&customer[id]='+customer_id );
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadLeaseViolations( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id, title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTabSubMenuItem';
		var funcArgs = new Array( 'customer_lease_tab', '/?module=customer_violationsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=', 'customer_lease_violations' );
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadCustomerPets( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTabSubMenuItem';
		var funcArgs = new Array(
			'customer_lease_tab',
			'?module=customer_petsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=',
			'customer_lease_pets' );
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadSpecials( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTabSubMenuItem';
		var funcArgs = new Array(
			'customer_lease_tab',
			'?module=lease_specialsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=',
			'customer_lease_specials'
		);
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadRentableItemsTab( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTabSubMenuItem';
		var funcArgs = new Array(
			'customer_lease_tab',
			'?module=lease_add_on_lease_associationsxxx&add_on_type[id]=2&lease[id]=' + lease_id + '&customer[id]=' + customer_id,
			'customer_lease_rentable_options'
		);
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadInsuranceTab( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTabSubMenuItem';
		var funcArgs = new Array(
			'customer_lease_tab',
			'?module=tenant_lease_term_insurancexxx&lease[id]=' + lease_id + '&customer[id]=' + customer_id,
			'customer_lease_rentable_options'
		);
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadLeaseTermPercentRentTab( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Tenant: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTabSubMenuItem';
		var funcArgs = new Array(
			'customer_lease_tab',
			'?module=tenant_lease_term_percent_rentxxx&lease[id]=' + lease_id + '&customer[id]=' + customer_id,
			'add_edit_percent_rent'
		);
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadLeaseTermReimbursableTab( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTabSubMenuItem';
		var funcArgs = new Array(
			'customer_lease_tab',
			'?module=tenant_lease_term_reimbursable_expensesxxx&lease[id]=' + lease_id + '&customer[id]=' + customer_id,
			''
		);
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadCustomerHouseholdCertifications( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTabSubMenuItem';
		var funcArgs = new Array( 'customer_household_tab', '/?module=household_certificationsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=view_certifications' );
		setTimeout( function(){
			callFunctionsOnModalWindow( funcToCall, funcArgs );
		}, 10 );
	}

	function loadResidentRepayments( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&load_financial_system=1', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'changeTab';
		var funcArgs = new Array( 'view_repayment_agreements', '?module=repayment_agreementsxxx&action=view_repayment_agreements' );
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadLeaseGuestManager( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTab';
		var funcArgs = new Array( 'customer_lease_tab', '/?module=guest_managementsxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=' );

		setTimeout( function(){
			callFunctionsOnModalWindow( funcToCall, funcArgs );
		}, 10000 );
	}

	function loadCustomerLeaseInsurance( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&load_financial_system=1', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTab';
		var funcArgs = new Array( 'customer_lease_tab', '?module=lease_insurancexxx&action=view_insurance_policies' );
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadLeaseActivityLog( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTabSubMenuItem';
		var funcArgs = new Array( 'customer_activity_tab', '/?module=customer_activityxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&event_id=' );
		callFunctionsOnModalWindow( funcToCall, funcArgs, false );
	}

	function loadCustomerMaintenance( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'loadCustomerTab';
		var funcArgs = new Array( 'customer_maintenance_tab', '/?module=customer_maintenancexxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&is_from_resident_view=1' );

		setTimeout( function(){
			callFunctionsOnModalWindow( funcToCall, funcArgs );
		}, 500 );
	}

	function loadResidentDeposits( lease_id, customer_id, resident_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&load_financial_system=1', title: __( 'Resident: {%s, 0}', [resident_name] ) } );
		var funcToCall = 'changeTab';
		var funcArgs = new Array( 'view_deposit_ar_transactions', '?module=ar_transactionsxxx&action=view_deposit_ar_transactions' );
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadApplicationLogs( application_id, application_name, lease_id, customer_id, lease_interval_id ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=application_systemxxx&application[id]='+application_id, title: __( 'Lead: {%s, 0}', [application_name] ) } );
		var funcToCall = 'loadApplicationTab';
		var funcArgs = new Array( 'application_history_tab', '/?module=application_historyxxx&action=view_application_history&&application[id]='+application_id+'&lease_interval[id]='+lease_interval_id+'&lease[id]='+lease_id+'&customer[id]='+customer_id );
		callFunctionsOnModalWindow( funcToCall, funcArgs, false );
	}

	function loadCorporateCustomerOpenItems( lease_id, customer_id, occupancy_type_id, customer_name ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=customerxxx&lease[id]='+lease_id+'&customer[id]='+customer_id+'&is_report_drilldown=1&is_corporate_tab=1&occupancy_type_id=' + occupancy_type_id, title: __( 'Customer: {%s, 0}', [customer_name] ) } );
		var funcToCall = 'changeTab';
		var funcArgs = new Array(
			'view_open_ar_transactions',
			'?module=ledgerxxx&action=view_ledger_container&lease[id]=' + lease_id + '#&customer[id]=' + customer_id + '#&event_id=&is_corporate_tab=1&occupancy_type_id=' + occupancy_type_id
		);
		callFunctionsOnModalWindow( funcToCall, funcArgs );
	}

	function loadJournalDetails( headerNumber ) {
		dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=general_journalxxx&action=view_gl_entry&gl_header[id]='+headerNumber, strContentId: 'view_gl_entry', title: __( 'Journal Entry' ) } );
		return;
	}

	function loadDepositDetails( depositId ) {
		dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=ar_depositsxxx&action=view_ar_deposit&ar_deposit[id]='+depositId, strContentId: 'view_ar_deposit', title: __( 'Deposits' ) } );
		return;
	}

	function loadCustomerGuestManager( guest_id, property_id, guest_activity_log_id, check_in_status, guest_name ) {

		if( 0 == check_in_status ) {
			check_in_status = '';
		}

		dialog = psi.patterns.loadDialog( { width: 980, height: 600, strUrl: '/?module=customer_guestsxxx&action=view_customer_guest_profile&guest[id]='+guest_id+'&property_id='+property_id+'&guest_activity_log_id='+guest_activity_log_id+'&check_in_status='+check_in_status, title: __( '' + guest_name + ' Guest Profile' ) } );
		return;
	};
	// endregion

	// region Utility Functions

	function reattemptUntilTrue( callback, interval, maxAttempts ) {
		var count = 0,
			wrapper = function() {
				if( !callback() && ++count < maxAttempts ) {
					window.setTimeout( wrapper, interval );
				}
			};

		wrapper();
	}

	var intReportModuleId = 3265;
	objEntrataNotification.registerCallbackFunction( intReportModuleId, function( objMessage ) {
		if( 1 == objMessage.report_details.disabled_notification ) {
			return false;
		}
		return true;
	});

	// endregion

	// Quick Report Search

	function bindReportQuickSearch() {
		var reportGroupTypeId		= $( 'input[type=hidden][name="report_group_type_id"]' ).val(),
			entrataQuickSearchUrl	= reportGroupTypeId ? 'report_system_newxxx' : modules.reportLibrary;
		$(document).find('.js-report-quick-search').entrataQuickSearch( {
			url: '?module=' + entrataQuickSearchUrl + '&action=search_report',
			containerClass: 'fast-lookup fl-default',
			lazyLoad: 0,
			height: 150,
			minRequiredChars: 2,
			beforeRequestSend: function( textBox ) {
				this.data['fast_lookup_filter[report_filter_by]'] = $(textBox).attr('id');
				this.data['report_group_type_id'] = $('input:hidden[name=report_group_type_id]').val();
				this.data['company_user_id'] = $('select[name="report_filter[user]"]').val();
			},
			onRowClick: function( objRowData ) {
				clickHandlerReportLink( objRowData );
			}
		} );
	}
	// region Entrata Report Reponses
	function bindEntrataReportResponsesEventHandlers() {
		var $body = $('body');

		$body.off( 'click', '.js-positive-feedback-button' ).on( 'click', '.js-positive-feedback-button', createEntrataResponse );
		$body.off( 'click', '.js-negative-feedback-button' ).on( 'click', '.js-negative-feedback-button', createEntrataResponse );
	}

	function createEntrataResponse() {
		psi.patterns.loadDialog( {
			strContentId:'report_feedback',
			width: 850,
			height: 500,
			strUrl: '?module=' + modules.responses + '&action=create_entrata_response',
			title: __( 'Report Feedback' ),
			data: {
				report_id: $(this).data('report-id'),
				default_report_id: $(this).data('default-report-id'),
				report_version_id: $(this).data('report-version-id'),
				correlation_id: $(this).data('correlation-id'),
				report_instance_id: $(this).data('report-instance-id'),
				feedback_type : $(this).data('feedback-type')
			},
		} );
	}

	// region Entrata Report Reponses
	function bindQuickMigrationEventHandlers() {
		var $body = $('body');

		$body.off( 'click', '.js-remind-me-later' ).on( 'click', '.js-remind-me-later', loadRemindMeLater );
		$body.off( 'click', '.js-advanced-migration' ).on( 'click', '.js-advanced-migration', loadAdvancedMigration );
		$body.off( 'click', '.js-quick-migration' ).on( 'click', '.js-quick-migration', loadQuickMigration );
		$body.off( 'change', '.js-migrate-reports-accessed-in' ).on( 'change', '.js-migrate-reports-accessed-in', updateCompanySchedulePacketsCount );
		$body.off( 'change', '.js-migrate-reports-type' ).on( 'change', '.js-migrate-reports-type', updateCompanySchedulePacketsCount );
		$body.off( 'click', '.js-insert-quick-migration' ).on( 'click', '.js-insert-quick-migration', insertQuickMigration );
		$body.off( 'click', '.js-migration-back-to-archive .actions-btn' ).on( 'click', '.js-migration-back-to-archive .actions-btn', insertFailedMigrationReportFilterToArchive );
		$body.off( 'click', '.js-migration-insight-back-to-archive .actions-btn' ).on( 'click', '.js-migration-insight-back-to-archive .actions-btn', insertFailedMigrationInsightReportToArchive );
		$body.off( 'click', '.js-packet-back-to-archive .actions-btn' ).on( 'click', '.js-packet-back-to-archive .actions-btn', insertFailedMigrationReportPacketToArchive );
		$body.off( 'click', '.js-schedule-back-to-archive .actions-btn' ).on( 'click', '.js-schedule-back-to-archive .actions-btn', insertFailedMigrationReportScheduleToArchive );
		$body.off( 'click', '.checkAllFailedInstances' ).on( 'click', '.checkAllFailedInstances', checkAllFailedInstances );
		$body.off( 'click', '.checkAllPrivateInstances' ).on( 'click', '.checkAllPrivateInstances', checkAllPrivateInstances );
		$body.off( 'click', '.checkAllFailedInsightInstances' ).on( 'click', '.checkAllFailedInsightInstances', checkAllFailedInsightInstances );
		$body.off( 'click', '.checkAllFailedSchedules' ).on( 'click', '.checkAllFailedSchedules', checkAllFailedSchedules );
		$body.off( 'change', '.js-date-range' ).on( 'change', '.js-date-range', getQuickMigrationCountByDateRange );

		if( $( 'input:hidden[name=is_show_quick_migrate]' ).val() ) {
			psi.patterns.loadOverlay( {
				width: 800,
				height: 300,
				strUrl: '/?module=report_migration_newxxx&action=quick_migrate',
				strContentId: 'quick_migration'
			} );
		}
		let boolIsArchive = $('input:hidden[name=is_archive]').val();
		let is_failed_migration = getCookie( 'failed_migration' );
		if( boolIsArchive && 'true' == is_failed_migration ) {
			$( '#failed-migration-banner' ).show();
			$( '.js-failed-reports-tab' ).trigger( 'click' );
			document.cookie = 'failed_migration=false';
		}

		checkAllReportInstance( 'manage_company_reports' );

	}

	function loadAdvancedMigration(e) {
		$('#quick_migration').dialog('close');
		window.location.href = '/?module=' + modules.archive;
	}

	function loadRemindMeLater() {
		psi.patterns.ajaxRequest({
			url: '?module=' + modules.migration + '&action=remind_me_later',
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '#quickMigrateSourceDiv' });
			},
			complete: function( response ) {
				var data = response.responseText;
				data = JSON.parse( data );
				psi.patterns.removeLoadingImage( { strElementSelector: '#quickMigrateSourceDiv' } );
				if( data.success ) {
					$('#quick_migration').dialog('close');
				}
			},
			error: function() {
				psi.patterns.removeLoadingImage({ strElementSelector: '#quickMigrateSourceDiv' });
			}
		});
	}

	function loadQuickMigration() {
		$('#quick_migration').dialog('close');
		psi.patterns.loadDialog({
			width: 780,
			height: 650,
			strUrl: '/?module=' + modules.migration + '&action=quick_migrate_form',
			strContentId: 'quick_migrate_form',
			title: 'Migrate Reports'
		});
	}

	function getQuickMigrationCountByDateRange() {
		// Kept under settimeout because the input hidden date field from datepicker is not updated immediately.
		setTimeout( function(){
			let dateRangeFrom		= $( 'input:hidden[name=date_range_from]' ).val(),
				dateRangeTo			= $( 'input:hidden[name=date_range_to]' ).val(),
				oldDateRangeFrom	= $( 'input:hidden[name=quick_migration_date_range_count]' ).attr( 'old_date_range_from'),
				oldDateRangeTo		= $( 'input:hidden[name=quick_migration_date_range_count]' ).attr( 'old_date_range_to');

			if( dateRangeFrom && dateRangeTo && ( dateRangeFrom != oldDateRangeFrom || dateRangeTo != oldDateRangeTo ) ) {

				let reportTypes = [];
				$('#js-migrate-reports-type input.form-checkbox:checked').each(function(){
					reportTypes.push( $(this).val() );
				});
				if( 0 === reportTypes.length || -1 !== reportTypes.indexOf( 'all' ) ) {
					reportTypes = [ 'company_reports', 'private_filters', 'scheduled_reports', 'report_packets', 'insights_reports' ];
				}

				let data = { 'date_range' : { 'date_range_from' : dateRangeFrom , 'date_range_to' : dateRangeTo }, 'report_types' : reportTypes };

				psi.patterns.ajaxRequest({
					url: '?module=' + modules.migration + '&action=quick_migration_count_by_date',
					data: data,
					beforeSend: function() {
						psi.patterns.showLoadingImage({ strElementSelector: '#quick_migrate_form' });
					},
					complete: function() {
						psi.patterns.removeLoadingImage({ strElementSelector: '#quick_migrate_form' });
					},
					success: function( response ) {
						$( 'input:hidden[name=quick_migration_date_range_count]' ).val( response );
						$( 'input:hidden[name=quick_migration_date_range_count]' ).attr( 'old_date_range_from', dateRangeFrom );
						$( 'input:hidden[name=quick_migration_date_range_count]' ).attr( 'old_date_range_to', dateRangeTo );
						let data = JSON.parse( response );
						reportTypes.forEach( function( item ) {
							$( '#' + item + '_count' ).html( data[item]['date_range'] );
						});

					},
					error: function() {
						psi.patterns.removeLoadingImage({ strElementSelector: '#quick_migrate_form' });
					}
				});
			}
		}, 500 );
	}

	function updateCompanySchedulePacketsCount(e) {
		e.preventDefault();

		let reportTypes = [];
		let reportsAccessedIn = $('.js-migrate-reports-accessed-in').val();
		let reportCompanySchedulesPackets = $.parseJSON( $('input:hidden[name=report_company_schedules_packets_count]').val() );

		if ( 'date_range' == reportsAccessedIn ){
			$( '.show-date-range' ).show();
			if( $( 'input:hidden[name=date_range_from]' ).val() && $( 'input:hidden[name=date_range_to]' ).val() ) {
				reportCompanySchedulesPackets = $.parseJSON( $( 'input:hidden[name=quick_migration_date_range_count]' ).val() );
			}
		} else {
			$( '.show-date-range').hide();
		}
		if( reportCompanySchedulesPackets === undefined ){
			reportCompanySchedulesPackets = $.parseJSON( $( 'input:hidden[name=report_company_schedules_packets_count]' ).val() );
		}

		$('#validationMessage').hide();
		$('#js-migrate-reports-type input.form-checkbox:checked').each(function(){
			reportTypes.push( $(this).val() );
		});
		if( 0 === reportTypes.length || -1 !== reportTypes.indexOf( 'all' ) ) {
			reportTypes = [ 'company_reports', 'private_filters', 'scheduled_reports', 'report_packets', 'insights_reports' ];
		}
		$( '#company_reports_count' ).html( 0 );
		$( '#private_filters_count' ).html( 0 );
		$( '#scheduled_reports_count' ).html( 0 );
		$( '#report_packets_count' ).html( 0 );
		$( '#insights_reports_count' ).html( 0 );

		reportTypes.forEach( function( item ) {
			reportTypes.forEach( function( item ) {
				$( '#' + item + '_count' ).html( reportCompanySchedulesPackets[item][reportsAccessedIn] );
			});
		});
	}

	function insertQuickMigration(e) {
		e.preventDefault();
		var reportTypes = [];
		var arrErrorMessage = [];
		var boolIsValid = false;

		$('#validationMessage').hide();
		$('#js-migrate-reports-type input.form-checkbox:checked').each(function(){
			reportTypes.push( $(this).val() );
		});

		if( 0 === reportTypes.length ) {
			reportTypes = [ 'company_reports', 'private_filters', 'scheduled_reports', 'report_packets', 'insights_reports' ];
		}
		reportTypes.forEach( function( item ) {
			if( 0 < $( '#' + item + '_count' ).text() ) {
				boolIsValid = true;
				return;
			}
			if( 'all' != item ) {
				arrErrorMessage.push( __( item ) );
			}
		});
		let strErrorMessage = arrErrorMessage.join("/ ").replace( /_/g, ' ' );

		if( !boolIsValid ) {
			$('#validationMessage').html( '<i></i>' + __( 'No ' ) + strErrorMessage + __( ' to migrate.' ) );
			$('#validationMessage').show();
		} else {
			var data = $( '#js-quick-migration-form' ).serialize();
			psi.patterns.ajaxRequest( {
				url: '?module=' + modules.migration + '&action=insert_quick_migration',
				data: data,
				beforeSend: function() {
					psi.patterns.showLoadingImage( { strElementSelector: '#quick_migrate_form' } );
				},
				complete: function( response ) {
					psi.patterns.removeLoadingImage( { strElementSelector: '#quick_migrate_form' } );
					let responseText = response.responseText;
					responseText = JSON.parse( responseText );
					$( '#quick_migrate_form' ).dialog( 'close' );
					psi.patterns.loadDialog( {
						width: 600,
						height: 300,
						title: __( 'Migrate Reports' ),
						strContentId: 'view_success_quick_migration',
						strUrl: '/?module=' + modules.migration + '&action=view_success_quick_migration',
						data: { 'message' : responseText.message },
						onCloseCallback: function() {
							// reload cache module
							window.location.href = '/?module=helpxxx&action=reload_modules_cache&hide_message=1&return_url=/?module=' + modules.company;
						}
					} );
				},
				error: function() {
					psi.patterns.removeLoadingImage( { strElementSelector: '#quick_migrate_form' } );
				}
			} );
		}
	}

	function getCookie(cookieName) {
		var cookieName = cookieName + "=";
		var cookieContents = document.cookie.split( ';' );
		for( var i = 0; i < cookieContents.length; i++ ) {
			var cookieContent = cookieContents[i];
			while( cookieContent.charAt(0) == ' ' ) {
				cookieContent = cookieContent.substring(1);
			}
			if( cookieContent.indexOf( cookieName ) == 0 ) {
				return cookieContent.substring( cookieName.length, cookieContent.length );
			}
		}
		return "";
	}

	function getQuickMigrationUri() {
		let boolIsArchive = $('input:hidden[name=is_archive]').val();
		if( 'undefined' === typeof boolIsArchive ) {
			boolIsArchive = 0;
		}
		return '&is_archive=' + boolIsArchive + '&is_error_tab=' + boolIsErrorTab();
	}

	function insertFailedMigrationReportFilterToArchive(e) {
		e.preventDefault();

		var $this = $(this),
			data = { 'report_filter' : { 'id': [ $(this).parents('.js-report-instance').data('filter-id') ] } };

		psi.patterns.ajaxRequest({
			url: '?module=' + modules.migration + '&action=update_archive_or_failed_migration_report_filters&is_archive_request=true',
			data: data,
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '#js-failed-migration-list-form' });
			},
			complete: function() {
				psi.patterns.removeLoadingImage({ strElementSelector: '#js-failed-migration-list-form' });
				$('.tip').remove();
			},
			success: function( response ) {
				var responseStatus = JSON.parse( response );
				if( responseStatus.status ) {
					$('.js-archive-report-instance-success').slideDown(300).delay(2000).slideUp(500);
					$this.parents('.js-report-instance').hide();
					getUpdatedMigrationList();
				} else {
					$('.js-archive-report-instance-error').slideDown(300).delay(2000).slideUp(500);
				}
			},
			error: function() {
				// TODO: Populate all error messages on inputs, back up to earliest step with an error
			}
		});
	}

	function insertFailedMigrationInsightReportToArchive(e) {
		e.preventDefault();

		var $this = $(this),
			data = { 'report_instance' : { 'id': [ $(this).parents('.js-insight-report-instance').data('instance-id') ] } };

		psi.patterns.ajaxRequest({
			url: '?module=' + modules.migration + '&action=update_archive_or_failed_migration_insight_report_instances&is_archive_request=true',
			data: data,
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '#js-failed-migration-insight-form' });
			},
			complete: function() {
				psi.patterns.removeLoadingImage({ strElementSelector: '#js-failed-migration-insight-form' });
				$('.tip').remove();
			},
			success: function( response ) {
				var responseStatus = JSON.parse( response );
				if( responseStatus.status ) {
					$('.js-archive-insight-report-instance-success').slideDown(300).delay(2000).slideUp(500);
					$this.parents('.js-insight-report-instance').hide();
					getUpdatedMigrationList();
				} else {
					$('.js-archive-insight-report-instance-error').slideDown(300).delay(2000).slideUp(500);
				}
			},
			error: function() {
				// TODO: Populate all error messages on inputs, back up to earliest step with an error
			}
		});
	}

	function insertFailedMigrationReportPacketToArchive(e) {
		e.preventDefault();

		var $this = $(this),
			data = { 'report_schedule' : { 'id': $(this).parents('.js-report-packet').data('schedule-id') } };

		psi.patterns.ajaxRequest({
			url: '?module=' + modules.migration + '&action=update_archive_or_failed_migration_report_packet_schedule&is_archive_request=true',
			data: data,
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '#js-failed-migration-packet-list-form' });
			},
			complete: function() {
				psi.patterns.removeLoadingImage({ strElementSelector: '#js-failed-migration-packet-list-form' });
				$('.tip').remove();
			},
			success: function( response ) {
				var responseStatus = JSON.parse( response );
				if( responseStatus.status ) {
					$('.js-archive-report-packet-success').slideDown(300).delay(2000).slideUp(500);
					$this.parents('.js-report-packet').hide();
					getUpdatedMigrationList();
				} else {
					$('.js-archive-report-packet-error').slideDown(300).delay(2000).slideUp(500);
				}
			},
			error: function() {
				// TODO: Populate all error messages on inputs, back up to earliest step with an error
			}
		});
	}

	function insertFailedMigrationReportScheduleToArchive(e) {
		e.preventDefault();

		var $this = $(this),
			data = { 'report_schedule' : { 'id': $(this).parents('.js-report-schedule').data('schedule-id') } };

		psi.patterns.ajaxRequest({
			url: '?module=' + modules.migration + '&action=update_archive_or_failed_migration_report_packet_schedule&is_archive_request=true',
			data: data,
			beforeSend: function() {
				psi.patterns.showLoadingImage({ strElementSelector: '#js-failed-migration-schedule-list-form' });
			},
			complete: function() {
				psi.patterns.removeLoadingImage({ strElementSelector: '#js-failed-migration-schedule-list-form' });
				$('.tip').remove();
			},
			success: function( response ) {
				var responseStatus = JSON.parse( response );
				if( responseStatus.status ) {
					$('.js-archive-report-schedule-success').slideDown(300).delay(2000).slideUp(500);
					$this.parents('.js-report-schedule').hide();
					getUpdatedMigrationList();
				} else {
					$('.js-archive-report-schedule-error').slideDown(300).delay(2000).slideUp(500);
				}
			},
			error: function() {
				// TODO: Populate all error messages on inputs, back up to earliest step with an error
			}
		});
	}

	function checkAllFailedInstances() {
		$( '.failed-report-filter-checkbox' ).not(this).prop('checked', this.checked);
	}

	function checkAllPrivateInstances() {
		$( '.private-report-filter-checkbox' ).not(this).prop('checked', this.checked);
	}

	function checkAllFailedInsightInstances() {
		$( '.failed-report-insight-checkbox' ).not(this).prop('checked', this.checked);
	}


	function checkAllFailedSchedules() {
		$( '.failed-report-schedule-checkbox' ).not(this).prop('checked', this.checked);
	}

	var strApPayeeId;
	function loadOwnerDetails( owner_id, ap_payee_id, title ) {
		psi.patterns.addDialogContent( { strUrl: '/?module=ownerxxx&action=view_owner&is_from_ap_payee=0&owner[id]=' + owner_id , strContentId: 'view_owner', title: 'View Owner: ' + title } );
		strApPayeeId = ap_payee_id;
		setTimeout( function(){
			psi.objViewOwner.init();
			$( document ).find( '#view_vendor_dialog' ).unbind( 'click' );
		}, 4000 );
		return;
	};

	function loadVendor() {
		psi.patterns.addDialogContent( { strUrl: '/?module=ap_payee_systemxxx&ap_payee[id]=' + strApPayeeId + '&is_from_owner=1', title: 'Vendor' } );
	}

	function loadFilterConfigValues() {
		const isVisibilitySetInFilterConfig = $( 'input[name="isVisibilitySetInFilterConfig"]' ).val();

		if( isVisibilitySetInFilterConfig ) {
			// for the first page filters load
			psi.reportFilter.showHideFiltersByVisibility();
		}
		if( Object.keys( psi.reportFilter.getFilterConfigValues() ).length ) {
			psi.patterns.showLoadingImage( {
				strElementSelector: '#view-data-filters'
			} );
			$( '#view-data-filters .loading-overlay' ).css( { 'z-index': '3000', 'height': '730px' } );
			if( isVisibilitySetInFilterConfig ) {
				$.each( psi.reportFilter.getFilterConfigValues(), function( filter_key, filter_values ) {
					$( '#' + filter_key + '_filter' ).on( 'filterchange.' + filter_key, function() {
						psi.reportFilter.showHideFiltersByVisibility();
					} );
				} );
			}

			Promise.all( psi.reportFilter.filterPromises ).then( function() {
				processFilterTab();
			} );
		} else {
			processFilterTab()
		}
	}

	function processFilterTab(){
		setTimeout( function() {
			psi.patterns.removeLoadingImage({
				strElementSelector: '#view-data-filters'
			});
			if($('#show_notification_message').val()) {
				$( '#view-data-filters .success' ).html( '<p class="alert success slim" ><i></i>Filters and Display Options tabs have already been populated.<br/>Changes can still be made, but only required fields in the Details tab need to be completed in order to Save Instance.</p>' ).fadeIn().delay( 5000 ).fadeOut();
			}
		}, 500 );
	}

	function waitForElementToLoad( selector, target = document.body, timeout = 10000 ) {
		return new Promise( ( resolve, reject ) => {
			const element = document.querySelector( selector );
			if( element ) {
				return resolve( element );
			}

			const elementObserver = new MutationObserver( mutations => {
				const foundElement = document.querySelector( selector );
				if( foundElement ) {
					elementObserver.disconnect();
					resolve( foundElement );
				}
			} );
			elementObserver.observe( target, {
				childList: true,
				subtree: true
			} );

			setTimeout( () => {
				elementObserver.disconnect();
				reject( new Error( 'Element not found within the timeout period' ) );
			}, timeout );
		} );
	}

	function loadReportInstanceNQS() {
		let reportInstance = JSON.parse( JSON.stringify( entrataReports.reportInstanceNqs ) );
		let { intReportNewInstanceId, intReportVersionId, intReportId, intModuleId, strReportName, strReportTitle, intReportType } = reportInstance;
		if( typeof reportInstance === 'object' && reportInstance !== null ) {
			if( entrataReports.reportTypeSAP == intReportType ) {
				reportUrl = '/?module=sap_reports_newxxx&action=view_report&name=' + strReportName + '&type=' + intReportType;
			} else {
				reportUrl = '/?module=report_instances_newxxx&action=view_instance&name=' + strReportName + '&report_instance[id]=' + intReportNewInstanceId + '&report_instance[report_version_id]=' + intReportVersionId + '&report_instance[report_id]=' + intReportId + '&report_instance[module_id]=' + intModuleId + '&override_locked_filters=1';
			}
			setTimeout( function() {
				psi.patterns.loadLargeDialog( {
					strUrl: reportUrl,
					title: __( '{%s,report_title}', { 'report_title': strReportTitle } ),
					complete: function() {
						// load FusionCharts.js
						if( typeof FusionCharts === "undefined" ) {
							var fusionChartScriptFile = document.createElement( "script" );
							fusionChartScriptFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts_3.14/fusioncharts.js";
							jQuery("head").append( fusionChartScriptFile );
							setTimeout(function () {
								var fusionChartThemeFile = document.createElement( "script" );
								fusionChartThemeFile.src = $('#CONFIG_COMMON_PATH').val() + "/javascript/fusioncharts/fusioncharts.theme.entrata.js";
								jQuery("head").append( fusionChartThemeFile );
							}, 600 );
						}
						if( $( this ).data( 'auto-generate' ) ) {
							$( '.js-download-report.js-save-filters.green' ).trigger( 'click' );
						} else {
							$( '.js-click-on-load' ).trigger( 'click' );
						}
					}
				} );
			}, 2000 );
		}
	}

	// endregion

	return {
		init: init,
		// This is a rare case where we need to call the method from outside the module.
		addFilterError: addFilterError,
		bindReportQuickSearch: bindReportQuickSearch,
		reloadFilter: reloadFilter,
		togglePeriodFilters: togglePeriodFilters,
		toggleComparePeriodsFilter:toggleComparePeriodsFilter,
		toggleExpandByPeriodFilter: toggleExpandByPeriodFilter,
		toggleInputFilters: toggleInputFilters,
		toggleDependentElementsInPreLease: toggleDependentElementsInPreLease,
		toggleReportFilters: toggleReportFilters,
		toggleDependentElements: toggleDependentElements,
		showDeleteConfirmBox: showDeleteConfirmBox,
		toggleTrailingFuturePeriods: toggleTrailingFuturePeriods,
		toggleConsolidateByFilter: toggleConsolidateByFilter,
		toggleAdvancedTrailingFuturePeriods: toggleAdvancedTrailingFuturePeriods,
		toggleAdvancedExpandByPeriodFilter: toggleAdvancedExpandByPeriodFilter,
		loadPeriodFilterValue: loadPeriodFilterValue,
		showIf: showIf,
		showIfNot: showIfNot,
		showIfValues: showIfValues,
		loadInvoiceDetails : loadInvoiceDetails,
		loadcheckDetails : loadcheckDetails,
		loadResidents: loadResidents,
		loadPaymentDetails: loadPaymentDetails,
		loadApPayeeRecurringTransactionsDetails: loadApPayeeRecurringTransactionsDetails,
		viewScheduledApTransaction: viewScheduledApTransaction,
		loadCustomerHousehold: loadCustomerHousehold,
		loadLeaseSummary:loadLeaseSummary,
		loadLeaseViolations:loadLeaseViolations,
		displayOptionsColumnReordered: displayOptionsColumnReordered,
		loadApplication: loadApplication,
		loadChargeDetails: loadChargeDetails,
		loadScheduledChargeDetails: loadScheduledChargeDetails,
		loadCustomerPets: loadCustomerPets,
		loadSpecials: loadSpecials,
		loadRentableItemsTab: loadRentableItemsTab,
		loadInsuranceTab: loadInsuranceTab,
		loadLeaseTermPercentRentTab: loadLeaseTermPercentRentTab,
		loadCustomerHouseholdCertifications: loadCustomerHouseholdCertifications,
		loadResidentRepayments: loadResidentRepayments,
		loadLeaseGuestManager: loadLeaseGuestManager,
		loadCustomerLeaseInsurance: loadCustomerLeaseInsurance,
		loadLeaseActivityLog: loadLeaseActivityLog,
		loadCustomerMaintenance: loadCustomerMaintenance,
		loadResidentDeposits: loadResidentDeposits,
		loadApplicationLogs: loadApplicationLogs,
		loadCorporateCustomerOpenItems: loadCorporateCustomerOpenItems,
		loadJournalDetails: loadJournalDetails,
		loadDepositDetails:loadDepositDetails,
		loadCustomerGuestManager: loadCustomerGuestManager,
		toggleCompareFilter:toggleCompareFilter,
		loadLeaseTermReimbursableTab: loadLeaseTermReimbursableTab,
		toggleCompareMonthYearFilter:toggleCompareMonthYearFilter,
		loadPeopleDetails:loadPeopleDetails,
		migrationList: migrationList,
		loadOwnerDetails:loadOwnerDetails,
		loadFilterConfigValues: loadFilterConfigValues,
		loadReportInstanceNQS: loadReportInstanceNQS,
		processFilterTab: processFilterTab,
		showFilterTabErrors: showFilterTabErrors
	};

})(window, jQuery);

$(document).ready( entrataReports.init );

//# sourceURL=Entrata/js/module/reports/reports.js
