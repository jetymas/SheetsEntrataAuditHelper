psi.objDashboard = function() {
	var strCurrentTabUrl = '';
	var intPageNumber = {};
	var arrstrDashboardPrioritiesValues = { 1: 'normal', 2: 'important', 3: 'urgent' };
	var strSortBy = {};
	var strSortDirection = {};
	var intPagingSize = 30;
	var boolShowCount = true;
	var intIsAdministrator = '0';
	var strFilterParams = '';
	var arrintleaseIntervalIds = {};
    var intSelectedRecordCount  = 0;
    var intTotalRecordCount     = 0;
    var strLockedTabUrl          = false;
    var objLockedTabUrlTimeout   = false;
	var objCurrentAttachmentWindow;
	var arrStrUncheckedInvoices = [];
	var strSubTabModule = '';
	var boolSubTabClick = false;

	var loadTab = function( objTab, strTabId ) {

		objTab = $( objTab );

		if( 'undefined' == typeof strTabId ) strTabId = '';

		$(".js-task-link").removeClass("selected");

		objTab.addClass("selected");

		$( '.tabs-menu[id^=ul_sub_nav_]' ).hide();
		$( '#ul_sub_nav_' + objTab.attr( 'id' ) ).show();

		$( ".js-sub-tab-link" ).removeClass("selected");

		if( '' == strTabId ) {
			psi.objDashboard.loadSubTab( $( '#ul_sub_nav_' + objTab.attr( 'id' ) + ' li:first' ) );
		} else {
			psi.objDashboard.loadSubTab( $( '#ul_sub_nav_' + objTab.attr( 'id' ) + ' li#' + strTabId ) );
		}
	}

	var loadSubTab = function( objTab, objParams ) {

		var objThisRef = this;

		objTab = $( objTab );
		if( psi.objDashboard.boolSubTabClick == true ) {
			psi.objDashboard.strSubTabModule = objTab.attr( 'id' );
		} else {
			psi.objDashboard.strSubTabModule = '';
		}

		if( psi.objDashboard.strLockedTabUrl == objTab.attr( 'custom_load_url' ) ) return;

		if( psi.objDashboard.objLockedTabUrlTimeout ) clearTimeout( psi.objDashboard.objLockedTabUrlTimeout );

		if( 'undefined' == typeof objParams ) objParams = psi.objDashboard.strFilterParams;

		$( ".js-sub-tab-link" ).removeClass("selected");

		objTab.addClass("selected");

		var strTableId = objTab.data('table-id'),
			strUrl = objTab.attr( 'custom_load_url' );

		if( 'undefined' != typeof strTableId && 'undefined' != typeof psi.objDashboard.strSortBy[strTableId] && 'undefined' != typeof psi.objDashboard.strSortDirection[strTableId] ) {
			strUrl = objTab.attr( 'custom_load_url' ) + '&sort_by=' + psi.objDashboard.strSortBy[strTableId] + '&sort_direction=' + psi.objDashboard.strSortDirection[strTableId];
		}
		psi.objDashboard.strLockedTabUrl = objTab.attr( 'custom_load_url' );
		psi.objDashboard.objLockedTabUrlTimeout = setTimeout(
			function() {
				psi.objDashboard.strLockedTabUrl = false;
				},
			60000
		);

		loadSubTab.objXhr = psi.patterns.ajaxRequest( { strElementSelector: '#dashboard_content',
		                            url: strUrl,
		                            data: objParams,
		                            complete: function() {
		                                if( psi.objDashboard.strLockedTabUrl == this.url ) {
                                            clearTimeout( psi.objDashboard.objLockedTabUrlTimeout );
                                            psi.objDashboard.strLockedTabUrl = false;
                                        }
		                            } } );

		setTimeout(
			function() {
				psi.objDashboard.loadTabCount( $( '.js-task-link.selected' ) );
			}, 100
		);

		if( strCurrentTabUrl != objTab.attr( 'custom_load_url' ) ) {
			strCurrentTabUrl = objTab.attr( 'custom_load_url' );
			psi.patterns.pushState( {
				strElementSelector: '#dashboard_content',
				tabId: $( '.js-task-link.selected' ).attr( 'id' ),
				subTabId: objTab.attr( 'id' ),
				url: objTab.attr( 'custom_load_url' ),
				beforeSend: 'psi.objDashboard.beforeSendDashboardCallback',
			}, null, objTab.attr( 'custom_load_url' ) );
		}
	}

	var loadTabCount = function( objTab ) {

		if( 'undefined' === typeof objTab || undefined == objTab.attr('custom_load_url') || false == psi.objDashboard.boolShowCount ) return;
		strModuleUrl 	= objTab.attr('custom_load_url') + '&action=load_count&sub_tab_module=' + psi.objDashboard.strSubTabModule;
		strCountDiv     = '#' + objTab.attr('id') +'_count1';

        if( !psi.objDashboard.arrboolActiveLoadUrls ) psi.objDashboard.arrboolActiveLoadUrls = [];

		if( true == psi.objDashboard.arrboolActiveLoadUrls.includes(btoa(strModuleUrl)) ) return;

		psi.objDashboard.arrboolActiveLoadUrls[btoa(strModuleUrl)] = true;

		psi.patterns.ajaxRequest( {
			strElementSelector: strCountDiv,
			url: strModuleUrl,
			success: function( strResponse ) {
				psi.objDashboard.parseTabCount($.parseJSON( strResponse ), objTab.attr( 'id' ) );
			},
			complete: function() {
			    if( psi.objDashboard.arrboolActiveLoadUrls[btoa(this.url)] ) {
			        psi.objDashboard.arrboolActiveLoadUrls[btoa(this.url)] = false;
			    }
			}
		} );
	}

	var viewAlerts = function() {

		psi.patterns.ajaxRequest({ strElementSelector: '#alerts_container', url: '/?module=new_dashboardxxx&action=view_alerts' });

		psi.patterns.removeLoadingImage({ strElementSelector: '#alerts_container' });
	}

	var parseTabCount = function( arrintTabCounts, strTabId ) {
		var intAllTabsCount = '';
		var intAllTabPriority = 1;
		var key = '';
		for( key in arrintTabCounts ) {

			var arrintTabStats 	= Array();
			var intCount = 0;
			var strPriority = '';

			if( typeof( arrintTabCounts[key] ) == 'object' ) {

				for( subTabKey in arrintTabCounts[key] ) {

					if( subTabKey == 0 ) {
						continue;
					}

					arrintTabStats = String( arrintTabCounts[key][subTabKey] ).split( '-' );
					intCount = parseInt( arrintTabStats[0] );

					if( 99 < intCount ) intCount = '99+';

					if( arrintTabStats.length > 1 ) {
						strPriority = arrstrDashboardPrioritiesValues[arrintTabStats[1]];
					} else {
						strPriority = 'normal';
					}

					$( '#' + subTabKey + '_count' ).html( intCount ).removeClass( 'normal urgent important' ).addClass( strPriority );
				}

				arrintTabCounts[key] = arrintTabCounts[key][0];
			}

			arrintTabStats = String( arrintTabCounts[key] ).split( '-' );
			intCount = parseInt( arrintTabStats[0] );
			if( '' == intAllTabsCount ) {
				intAllTabsCount = 0;
			}
			intAllTabsCount += intCount;
			if( 99 < intCount ) intCount = '99+';

			if( arrintTabStats.length > 1 && '' != arrintTabStats[1] ) {
				strPriority = arrstrDashboardPrioritiesValues[arrintTabStats[1]];
				if( intAllTabPriority < arrintTabStats[1] ) intAllTabPriority = arrintTabStats[1];
			} else {
				strPriority = 'normal';
			}

			$( '#' + key + '_count' ).html( intCount ).removeClass( 'normal urgent important' ).addClass( strPriority );
			$( ".form-advancedselect .with-icons" ).find( '#' + key + '_mobilecount' ).html( intCount ).removeClass( 'normal urgent important' ).addClass( strPriority );
			$( ".form-advancedselect" ).find( '#' + key + '_default_count' ).html( intCount ).removeClass( 'normal urgent important' ).addClass( strPriority );
		}

		if( '' == psi.objDashboard.strSubTabModule || undefined == psi.objDashboard.strSubTabModule ) {
			if( 99 < intAllTabsCount ) intAllTabsCount = '99+';
			$( '#' + strTabId + ' div' ).html( intAllTabsCount ).removeClass( 'normal urgent important' ).addClass( arrstrDashboardPrioritiesValues[intAllTabPriority] );
		} else {
			var subTabsData = psi.objDashboard.allSubTabCount( strTabId ),
				intAllSubTabsCount = subTabsData.intSubTabTotal;
			if( 99 < intAllSubTabsCount ) intAllSubTabsCount = '99+';
			$( '#' + strTabId + '_count' ).html( intAllSubTabsCount ).removeClass( 'normal urgent important' ).addClass( subTabsData.strSubTabClass );
		}

	}

	var showHideCount = function() {
		if( false == psi.objDashboard.boolShowCount ) {
			$('.dashboard .tasks .tabs-mid li .notification').addClass('hide').text('');
			$('.dashboard .tasks #dashboard_sub_tabs li .notification').addClass('hide').text('');
			$('.dashboard .tasks .sidetabs-menu li .notification').addClass('hide').text('');
		} else {
			$('.dashboard .tasks .tabs-mid li .notification').removeClass('hide');
			$('.dashboard .tasks #dashboard_sub_tabs li .notification').removeClass('hide');
			$('.dashboard .tasks .sidetabs-menu li .notification').removeClass('hide');
		}
	}

	var init = function( boolIsDefaultModule ) {

		window.selectedItemTotal = 0;
		showHideCount();
		psi.objDashboard.strSubTabModule = '';

		$(".js-task-content").on("click", ".js-task-link", function(){
			psi.objDashboard.boolSubTabClick = true;
			psi.objDashboard.strSubTabModule = '';
			psi.objDashboard.loadTab( this );
		});

		$("#dashboard_sub_tabs").on("click", ".js-sub-tab-link", function() {
			psi.objDashboard.boolSubTabClick = true;
			psi.objDashboard.strSubTabModule = $(this).attr('id');
			psi.objDashboard.loadSubTab( this );
		});

		$(".tasks .head").on("click", ".js-filter-future", function(event){
			if( $(this).is(":checked") == true ) {
				$(".tasks .head .js-setdays").fadeIn('fast');
			} else {
				$(".tasks .head .js-setdays").hide();
			}
		});

		if( false == boolIsDefaultModule ) {
			psi.objDashboard.loadTabCount( $( '.js-task-link.selected' ) );
		} else {
			psi.objDashboard.loadTab( $( '.js-task-link.selected' ) );
		}

		$( '.js-task-link:not(.selected)' ).each( function() {
			psi.objDashboard.loadTabCount( $( this ) );
		});

		$("#side-tabs").on("click", ".js-side-tab", function(){
			$('#message_board').hide();
			$(".js-side-tab").removeClass("selected");
			$(this).addClass("selected");

			var task_link = $(this).data("link");
			psi.patterns.ajaxRequest({ strElementSelector: '#side-content', url: task_link });
		});

		$( '#submit_po_approval_note_popup_dashboard, #skip_po_approval_note_popup_dashboard' ).click( function() {

			if( 'skip_po_approval_note_popup_dashboard' != $( this ).prop( 'id' ) ) {
				if( '' == $( '#po_approval_note_dashboard' ).val().trim() ) {
					$( '#frm_note_popup_on_dashboard_po .alert.error' ).removeClass( 'hide' );
					return false;
				} else {
					$( '#frm_purchase_orders #ap_header_logs_approval_note' ).val( $( '#po_approval_note_dashboard' ).val() );
				}
			}

			$( '#po_approval_note_dashboard' ).val( '' );
			$( '#div_note_popup_on_dashboard_po' ).dialog('close');

			if( 'continue_return_routing_stop' == $( this ).data( 'reference' ) ) {
				returnToSpecificStop();
			}
		} );

		$( '#cancel_po_approval_note_popup_dashboard' ).click( function() {
			$( '#po_approval_note_dashboard' ).val( '' );
			$( '#div_note_popup_on_dashboard_po' ).dialog( 'close' );
		} );

		psi.objDashboard.viewAlerts();
	}

	var allSubTabCount = function( strTabId ) {
		var intSubTabTotal = 0, intSubTabClassUrgent = 0, intSubTabClassImp = 0, strSubTabClass;
		$( "#dashboard_sub_tabs ul[data-parent-id='" + strTabId + "'] .js-sub-tab-link div").each(function() {
			intSubTabTotal+= ( isNaN( parseInt( $(this).html() ) ) ) ? 0 : parseInt( $(this).html() ) ;
			intSubTabClassUrgent+= $( "#dashboard_sub_tabs ul[data-parent-id='" + strTabId + "']").find('.urgent').length;
			intSubTabClassImp+= $( "#dashboard_sub_tabs ul[data-parent-id='" + strTabId + "']").find('.important').length;
		});

		if( intSubTabClassUrgent > 1 ) {
			strSubTabClass = arrstrDashboardPrioritiesValues[3];
		} else if( intSubTabClassImp > 1 && intSubTabClassUrgent === 0 ) {
			strSubTabClass = arrstrDashboardPrioritiesValues[2];
		} else {
			strSubTabClass = arrstrDashboardPrioritiesValues[1];
		}
		return {intSubTabTotal: intSubTabTotal, strSubTabClass: strSubTabClass};
	}

	var initFilter = function() {
		$( '#frm_dashboard_filter .form-submit' ).click(
			function() {

				var objForm = $( '#frm_dashboard_filter' );
				psi.objDashboard.strFilterParams = objForm.serialize();

				var objListEle = objForm.find( '#property_groupid .assigned ul li' );
				if( '0' == psi.objDashboard.intIsAdministrator || ( 0 < objListEle.length && parseInt( psi.objDashboard.intAllPropertyGroupId ) !== objListEle.data( 'listid' ) ) ) {
					psi.objDashboard.boolShowCount = true;
				} else if( parseInt( psi.objDashboard.intAllPropertyGroupId ) === objListEle.data( 'listid' ) ) {
					psi.objDashboard.boolShowCount = false;
				}

				showHideCount();

				psi.objDashboard.boolSubTabClick = false;
				psi.objDashboard.loadSubTab( $( '.js-sub-tab-link.selected' ) );
				psi.objDashboard.viewAlerts();

				setTimeout(
					function() {
						$( '.js-task-link:not(.selected)' ).each( function() {
							psi.objDashboard.loadTabCount( $( this ) );
						});
						psi.patterns.ajaxRequest({ strElementSelector: '#side-content', url: '/?module=dashboard_right_panexxx&action=view_filter' } );
						if( 0 < $('.js-tax-credit-compliance').length ) {
							psi.patterns.ajaxRequest( { strElementSelector: '.js-tax-credit-compliance', url: '/?module=tax_credit_compliancexxx&action=view_compliance_widget' } );
						}
						psi.patterns.ajaxRequest({ url: '/?module=calendarxxx&action=dashboard_property_filter', data: objForm.serialize() } );
					}, 200
				);

			}
		);

		$( '#frm_dashboard_filter .js-form-reset' ).click(
			function() {
				psi.patterns.ajaxRequest({ strElementSelector: '#side-content', url: '/?module=dashboard_right_panexxx&action=view_filter&reset_filter=1',
											success: function( strResponse ) {
												$( '#side-content' ).html( strResponse );
												psi.patterns.removeLoadingImage({ strElementSelector: '#side-content' });
												psi.patterns.bindEssentials();
												psi.objDashboard.strFilterParams = $( '#frm_dashboard_filter' ).serialize();

												psi.objDashboard.boolShowCount = true;
												if( '1' == psi.objDashboard.intIsAdministrator ) {
													psi.objDashboard.boolShowCount = false;
												}
												showHideCount();

												psi.objDashboard.boolSubTabClick = false;
												psi.objDashboard.loadSubTab( $( '.js-sub-tab-link.selected' ), $( '#frm_dashboard_filter' ).serialize() );

												setTimeout(
													function() {
														$( '.js-task-link:not(.selected)' ).each( function() {
															psi.objDashboard.loadTabCount( $( this ) );
														});
													}, 200
												);
											}
										});

				psi.objDashboard.viewAlerts();
			}
		);
	}

	var beforeSendDashboardCallback = function( xhr, options ) {

		if( undefined != options ) {

			psi.patterns.showLoadingImage( options );

			$(".js-task-link").removeClass("selected");
			$( ".js-sub-tab-link" ).removeClass("selected");

			$( '.tabs-menu[id^=ul_sub_nav_]' ).hide();

			$( '#ul_sub_nav_' + options.tabId ).show();
			$( '#' + options.tabId ).addClass( 'selected' );
			$( '#' + options.subTabId ).addClass( 'selected' );
		}
	};

	var getCurrentSubTab = function() {
		var strTabId = $( '.js-task-link.selected' ).attr( 'id' );
		return $( '#ul_sub_nav_' + strTabId + ' li.selected' );
	}

	var initPagination = function( tableId, intPageNumber, isIncompleteInvoice = false, isLoadDataForSubTab = false ) {

		var $strElementSelector = $( "#" + tableId ),
			strTabUrl = $strElementSelector.attr( "custom_load_url" );

		if( $strElementSelector.find(".tbl-body").length > 0 ) {
			$strElementSelector = $strElementSelector.find(".tbl-body");
		}

		if( 'undefined' == typeof strTabUrl || '' == strTabUrl ) {
			return;
		}

		// removing lazy load event, as its being binded on 'document' and initiating unwanted request on other tabs with previous tab url, when new tab having less count.
		$( document ).off( 'scroll.lazyLoad' );

		if( psi.objDashboard.intPagingSize <= $( '#' + tableId + ' > tbody > tr:not(.hide)' ).length || psi.objDashboard.intPagingSize <= $( '#' + tableId + ' > .tbl-body > .tbl-row:not(.hide)' ).length || isLoadDataForSubTab ) {
			var strQueryString = '';

			if( 'undefined' != typeof psi.objDashboard.strSortBy[tableId] && '' != psi.objDashboard.strSortBy[tableId] ) {
				strQueryString += "&sort_by=" + psi.objDashboard.strSortBy[tableId];
			}

			if( 'undefined' != typeof psi.objDashboard.strSortDirection[tableId] && '' != psi.objDashboard.strSortDirection[tableId] ) {
				strQueryString += "&sort_direction=" + psi.objDashboard.strSortDirection[tableId];
			}

			if( 'undefined' != typeof psi.objDashboard.strSortDirection[tableId] && '' != psi.objDashboard.strSortDirection[tableId] && isIncompleteInvoice ) {
				strQueryString += "&sub_menu=" + psi.objDashboard.subTabId;
			}

			$strElementSelector.data("sub_menu", psi.objDashboard.subTabId);
			$strElementSelector.data("next_page_no", 1);

			psi.patterns.lazyLoad({
			    strElementSelector: $strElementSelector,
			    url: strTabUrl + strQueryString,
			    scrollEndValue: 80,
				data: $strElementSelector.data(),
			   	customBeforeSend: function() {
			        $strElementSelector.data( "next_page_no", $strElementSelector.data( "next_page_no" ) + 1 );
				},
				success: function (res) {
          			// checking data to prevent further ajax requests
					let trLength = isIncompleteInvoice ? $(res).find('.incomplete-invoice-container_list_details_table tr').length : $(res).filter('tr').length;
					let resToAppend = $(res).find('.incomplete-invoice-container_list_details_table tbody').html();

					$strElementSelector.data("ajax-in-process", true);
					if (trLength >= psi.objDashboard.intPagingSize || $(res).filter('.tbl-row').length >= psi.objDashboard.intPagingSize) {
						$strElementSelector.data("ajax-in-process", false);
					}

					$strElementSelector.find(".js-loading-data").remove();

					// Append response to the target element
					if (isIncompleteInvoice) {
						$strElementSelector.find('tbody').append(resToAppend);
						psi.objIncompleteInvoices.checkTableRecords();
						psi.objIncompleteInvoices.initDeletePopupEvents();
					} else {
						$strElementSelector.append(res);
					}
          			psi.objDashboard.selectCheckboxes( tableId );
				  	psi.patterns.bindEssentials();
			  	}
			});

		}

	}

	var bindDataToHtmlToolTip = function( strUrl, objParam, strElementSelector ) {
		objRef = this;

		psi.patterns.ajaxRequest( {
			url: strUrl,
			dataType: 'JSON',
			data: {
				'lease_Interval_ids': objRef.arrintleaseIntervalIds
			},
			success: function( res ) {

				if( null !== res.data.events ) {
					objRef.prepareHtmlTooltip( res.data.events );
				}
			}

		} );
	};

	var prepareHtmlTooltip = function( $objValue ) {
		objRef = this;
		var PS_PRODUCT_LEASING_CENTER = 46;

		if( null === $objValue ) {
			return;
		}

		$.each( $objValue, function( index, value ) {
			var objParentElement = $('#actiontip-content-position-' + index );

			objParentElement.find( '.attempt-event-list' ).html('<strong class="text-red">' + __( 'None' ) + '</strong>');
			objParentElement.find('.text-red').show();

			if( null === value ) {
				return;
			}

			if( 1 === value.length ) {
				return;
			}
			value.shift();
			objParentElement.find('.text-red').hide();

			var strHtmlTemplate = '';

			$.each( value, function( intKey, arrintValue ) {

				var strCssClassName = '';

				if( parseInt( objRef.arrstrEventTypesNames['CALL_INCOMING'] ) === parseInt( arrintValue.event_type_id ) &&
					true === $.isNumeric( arrintValue.data_reference_id ) &&
					false === $.isNumeric( arrintValue.event_sub_type_id ) &&
					parseInt( PS_PRODUCT_LEASING_CENTER ) === parseInt( arrintValue.ps_product_id ) ) {
					strCssClassName = 'call-incoming-lc';
				} else if( parseInt( objRef.arrstrEventTypesNames['CALL_INCOMING'] ) === parseInt( arrintValue.event_type_id ) &&
					true == $.isNumeric( arrintValue.event_sub_type_id ) ) {
					strCssClassName = 'call-missed';
				} else if( objRef.arrintTourEventTypeIds.includes( parseInt( arrintValue.event_type_id ) ) && objRef.intDefaultEventResultMissedId === parseInt( arrintValue.default_event_result_id ) ) {
					strCssClassName = objRef.arrstrEventTypeClasses[arrintValue.event_type_id] + '-missed';
				} else {
					strCssClassName = objRef.arrstrEventTypeClasses[arrintValue.event_type_id];
				}

				var strHtml = '<i class=\'margin5-bottom ' + strCssClassName +'\'></i>';

				if( 1 === parseInt( arrintValue.last_attempt_days ) ) {
					strHtml +=  arrintValue.last_attempt_days + ' ' + __( 'Day Ago' ) + ' ';
				} else if( 1 < parseInt( arrintValue.last_attempt_days ) ) {
					strHtml += arrintValue.last_attempt_days + ' ' + __( 'Days Ago' ) + ' ';
				} else {
					strHtml += ' ' + __( 'Today' );
				}

				if( '' != arrintValue.leaseing_agent_name ) {
					strHtml +=  ' ' + __( 'by' ) + ' ' + arrintValue.leaseing_agent_name + '<br>';
				} else {
					strHtml += ' ' + __( 'by System <br>' );
				}
				strHtmlTemplate += strHtml;
			});

			objParentElement.find( '.attempt-event-list' ).append( strHtmlTemplate );
		});
	}

	var bindReasonsForContacts = function( strUrl, strContentTableId ) {

		objRef = this;

		psi.patterns.ajaxRequest( {
			url: strUrl,
			dataType: 'JSON',
			data: {
				'lease_Interval_ids': objRef.arrintleaseIntervalIds
			},
			success: function( res ) {

				if( null !== res.data.events ) {
					objRef.bindDataReasonsForContacts( res.data.events, strContentTableId );
				}
			}

		} );
	};

	var bindDataReasonsForContacts = function( $objValue, strContentTableId ) {

		var objThisRef = this;

		if( null === $objValue ) {
			return;
		}

		$.each( $objValue, function( index, value ) {
			var objParentElement = $('#reason-for-contact-' + index );
			objParentElement.html( '' );
			var intEventCount = 1;

			if( null === value ) {
				return;
			}

			var strHtmlAllText = '';

			$.each( value, function( intKey, arrintValue ) {

				var strHtml = '';

				if( 1 < intEventCount ) {
					strHtml += '<br/>';
				}

				if( 1 < Object.keys( value ).length ) {
					strHtml += intEventCount + '. '
				}

				strHtml += arrintValue.reason;

				if( ( objThisRef.arrstrEventSubTypesNames['EVENT_SUB_TYPE_NEW_LEAD_FOLLOW_UP'] === parseInt( arrintValue.event_sub_type_id ) )
					&& ( null !== arrintValue.lead_source_name && 0 < arrintValue.lead_source_name.length ) ) {
					strHtml += ' ' + __( 'from' ) + ' ' + arrintValue.lead_source_name;
				}

				if( true == arrintValue.is_event_call && null != arrintValue.call_file_id ) {

					strHtml += '<br/><span class="link"> ';

					if( objThisRef.CALL_FILE_PLAY_DAYS_LIMIT > arrintValue.number_of_days ) {
				 		strHtml += '<i class="play-small" onclick="psi.patterns.loadDialog( { width:625, height:375, strUrl:\'' + objThisRef.exitTags.create_call_tracker_associate + 'call[id]=' + arrintValue.call_id + '&event[id]='+ arrintValue.id + '&call[call_duration]=' + arrintValue.call_duration_seconds + '\', strContentId:\'dashboard_call_actions\', title:__( \'Call Action\' ), onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( \'' + strContentTableId + '\' ); } }); title="play"></i> Play';
					} else {
						strHtml += '<a target="_blank"	href=" ' + arrintValue.download_recorded_call +'&call[id]=' + arrintValue.call_id + '"> <i class="download" title="This recording is six months or older. To listen, please download the audio."></i></a>'
					}
					strHtml += '</span>';
				}

				if( 't' == arrintValue.triggering_event_is_resident ) {
					var strParams = '&event[id]=' + arrintValue.triggering_event_id + '&customer[id]=' + arrintValue.customer_id + '&is_email_enabled=1&is_from_dashboard=1&lease[id]=' + arrintValue.lease_id;
				} else {
					var strParams = '&event[id]=' + arrintValue.triggering_event_id + '&application[id]=' + arrintValue.application_id + '&is_email_enabled=1&is_from_dashboard=1';
				}

				// Dashboard Email incoming UI cha
				if( parseInt( objThisRef.arrstrEventTypesNames['EMAIL_INCOMING'] ) === parseInt( arrintValue.triggering_event_type_id ) ) {
					var strUrl = objThisRef.exitTags.view_application_history_detail;

					strHtml += '<div class="link js-view-email-details margin5-top"'; //intIsEmailEnabled
					if( true === $.isNumeric( arrintValue.triggering_event_data_reference_id ) ) {
						if( 't' == arrintValue.triggering_event_is_resident || ( 'undefined' != typeof arrintValue.customer_id && 'undefined' == typeof arrintValue.application_id ) ) {
							strParams = '&event[id]=' + arrintValue.triggering_event_id + '&customer[id]=' + arrintValue.customer_id + '&is_email_enabled=1&is_from_dashboard=1&lease[id]=' + arrintValue.lease_id;
							strUrl = objThisRef.exitTags.view_email;
						}
						strHtml += 'onclick="psi.patterns.loadDialog({width:\'auto\',height:\'auto\',strUrl: \'' + strUrl +  strParams + '\', strContentId:\'email_history_dlg\',title: __( \' Message History \' ), ckeditor: true, onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( \'' + strContentTableId + '\');} });"';
					} else {
					}
					if( 't' != arrintValue.triggering_event_is_resident ) {
						strHtml += 'onclick="psi.patterns.loadDialog({width:\'658\',height:\'649\',strUrl: \'' + objThisRef.exitTags.view_lead_contact +  strParams + '\', strContentId:\'dashboard_followup_instruction_actions\', title: __( \'Contact Details\' ), ckeditor: true, onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( \'' + strContentTableId + '\');} });"';
					}

					strHtml += '>' + __( 'View Details' ) + '</div>';
				}

				if( null != arrintValue.notes && arrintValue.event_sub_type_id != objThisRef.arrstrEventSubTypesNames['EVENT_TYPE_EMAIL_INCOMING'] ) {

					strHtml += ' <br><span class="link" ';

					if( true == objThisRef.boolIsAllowWriteAccessToApplicationSystem && true ==  objThisRef.boolIshasWriteAccessToRequestedModule ) {
						strHtml += ' class="link margin5-top" ';
					}

					strHtml += 'onclick="psi.patterns.loadDialog({ width:625, height:375, strUrl:\'' + objThisRef.exitTags.view_followup_instructions + '&event[id]=' + arrintValue.id +'\', strContentId:\'dashboard_followup_instruction_actions\', title:__( \'Manual Contact Instructions\' ) });">';
					strHtml +=	'<i class="alert-info"></i>' + __( 'Instructions' ) + '</span>';
				} else {
					strHtml += '<br/>';
				}

				strHtmlAllText += strHtml;
				intEventCount ++;
			});
			objParentElement.append( strHtmlAllText );

			intEventCount = 1;
		});
	}

	var initSorting = function( strTableId, strReqSortby, strDefaultSortby, strDefaultSortDirection, isIncompleteInvoice = false ) {

		var $strElementSelector = $( "#" + strTableId ),
			tableHeader;

		if( $strElementSelector.find(".tbl-body").length > 0 ) {
			$strElementSelector = $strElementSelector.find(".tbl-body");
			tableHeader = ".tbl-head li";
		} else {
			tableHeader = "th";
		}

		if( 'undefined' == typeof strReqSortby ) strReqSortby = '';

		if( 'undefined' == typeof strDefaultSortby ) strDefaultSortby = 'priority';

		if( 'undefined' == typeof strDefaultSortDirection ) strDefaultSortDirection = 'DESC';

		var strTabUrl = $('#' + strTableId).attr( 'custom_load_url' );

		if( 'undefined' == typeof strTabUrl || '' == strTabUrl ) {
			return;
		}

		if( '' == strReqSortby || 'undefined' == typeof psi.objDashboard.strSortBy[strTableId] || '' == psi.objDashboard.strSortBy[strTableId] ) {

			$( "#" + strTableId ).find( tableHeader + ".sortable[sort_by='"+strDefaultSortby+"']" ).addClass( 'selected' ).append( "<i class='"+ strDefaultSortDirection.toLowerCase() +"'></i>" );
			psi.objDashboard.strSortDirection[strTableId] = strDefaultSortDirection;
			psi.objDashboard.strSortBy[strTableId] = strDefaultSortby;
		} else {
			$( "#" + strTableId ).find( tableHeader + ".sortable[sort_by='"+psi.objDashboard.strSortBy[strTableId]+"']" ).addClass( 'selected' ).append( "<i class='"+psi.objDashboard.strSortDirection[strTableId].toLowerCase()+"'></i>" );
		}

		if( 2 > $( '#' + strTableId + ' > tbody > tr:not(.hide)' ).length && 2 > $( '#' + strTableId + ' > .tbl-body > .tbl-row:not(.hide)' ).length ) {
			return;
		}

		$('#'+strTableId).find( tableHeader + '.sortable' ).on('click', function () {

			if( 0 < $(this).find('i').length && true == $(this).find('i').hasClass('asc') ) {
				psi.objDashboard.strSortDirection[strTableId] = 'DESC';
			} else {
				psi.objDashboard.strSortDirection[strTableId] = 'ASC';
			}

			var strSortBy = $(this).attr('sort_by');

			if( 'undefined' == typeof strSortBy || '' == strSortBy ) {
				return;
			}

			psi.objDashboard.strSortBy[strTableId] = strSortBy;
			var obj = $(this);

			var subMenuParam = '';
			if ( isIncompleteInvoice ) {
				subMenuParam = '&sub_menu=' + psi.objDashboard.subTabId
			}
			// set table-id on selected tab.
			$( 'div#dashboard_sub_tabs li.js-sub-tab-link.selected' ).data('table-id', strTableId );
			psi.patterns.ajaxRequest( { strElementSelector: '#'+strTableId, url: strTabUrl + '&sort_by=' + psi.objDashboard.strSortBy[strTableId] + '&sort_direction=' + psi.objDashboard.strSortDirection[strTableId] + '&next_page_no=0' + subMenuParam,
				success: function( strResponse ) {
					window.selectedItemTotal = 0;
					if( $strElementSelector.find(".tbl-body").length > 0 ) {
						$strElementSelector.html( strResponse );
					} else {
						if (isIncompleteInvoice) {
							let resToAppend = $(strResponse).find('.incomplete-invoice-container_list_details_table tbody').html();
							$strElementSelector.find('tbody').html( resToAppend );
						} else {
							$strElementSelector.find('tbody').html( strResponse );
						}
					}

					// To update total selected amount in invoice and checks tab
					$('#selected_amount').html( '$0.00' );

					if( 0 < obj.find('i').length ) {
						obj.find('i').removeClass().addClass( psi.objDashboard.strSortDirection[strTableId].toLowerCase() )
					} else {

						obj.siblings().each( function() {
							$(this).removeClass('selected');
							$(this).find('i').remove();
						});
						obj.addClass('selected');
						obj.append( "<i class='asc'></i>" );
					}

					$('#'+strTableId).data( "ajax-in-process", false );


					if ( isIncompleteInvoice ) {
						psi.objDashboard.initPagination( strTableId, 1, true, true );
					} else {
						psi.objDashboard.initPagination( strTableId );
					}

					psi.patterns.removeLoadingImage( { strElementSelector: '#'+strTableId } );

					// Uncheck the bulk select checkbox and remove the message
                    $( '#' + strTableId ).closest( 'b' ).find( 'input[type=checkbox]:first' ).prop( "checked", false );
                    psi.objDashboard.removeAllRecordMessage();
                    $('#max_records_error_msg').remove();
					psi.patterns.bindEssentials();
				}
			});
	  	});
	}

    var loadAllRecords = function( tableId, intPageNumber ) {

        var $strElementSelector = $( "#" + tableId ),
            strTabUrl = $strElementSelector.attr( "custom_load_url" );

        if( $strElementSelector.find(".tbl-body").length > 0 ) {
			$strElementSelector = $strElementSelector.find(".tbl-body");
		}

        if( 'undefined' == typeof strTabUrl || '' == strTabUrl ) {
            return;
        }

        var strQueryString = '';

        if( 'undefined' != typeof psi.objDashboard.strSortBy[tableId] && '' != psi.objDashboard.strSortBy[tableId] ) {
            strQueryString += "&sort_by=" + psi.objDashboard.strSortBy[tableId];
        }

        if( 'undefined' != typeof psi.objDashboard.strSortDirection[tableId] && '' != psi.objDashboard.strSortDirection[tableId] ) {
            strQueryString += "&sort_direction=" + psi.objDashboard.strSortDirection[tableId];
        }

        $strElementSelector.data( "next_page_limit", ( intPageNumber * 30 ) );
        psi.patterns.ajaxRequest({
            strElementSelector: $strElementSelector,
            url: strTabUrl + strQueryString,
            data: $strElementSelector.data(),
            success: function( res ) {

                $strElementSelector.find( ".js-loading-data" ).remove();
                $strElementSelector.append( res );
                if( $( res ).filter( 'tr' ).length >= psi.objDashboard.intPagingSize ) {
                    $strElementSelector.data( "ajax-in-process", false );
                } else {
                    $strElementSelector.data( "ajax-in-process", true );
                }

                // We can delete this data
                $strElementSelector.data( "next_page_limit", 30 );
				$strElementSelector.data( "next_page_no", intPageNumber + 1 );

                psi.objDashboard.selectCheckboxes( tableId );
                psi.patterns.removeLoadingImage( { strElementSelector: $strElementSelector } );
	            psi.patterns.bindEssentials();
            }
        });
    }

	var countAllApprovePaymentRecords = function( tableId, intPageNumber ) {

		var $strElementSelector = $( "#" + tableId ),
			strTabUrl = $strElementSelector.attr( "custom_load_url" );

		if( $strElementSelector.find(".tbl-body").length > 0 ) {
			$strElementSelector = $strElementSelector.find(".tbl-body");
		}

		if( 'undefined' == typeof strTabUrl || '' == strTabUrl ) {
			return;
		}

		$strElementSelector.data( "next_page_limit", ( intPageNumber * 30 ) );

		psi.patterns.ajaxRequest({
			strElementSelector: $strElementSelector,
			url: strTabUrl + '&boolIsSelectAllPaymentsFromDashboard=1',
			data: $strElementSelector.data(),
			success: function( res ) {
				var arrmixResponseData = $.parseJSON( res );
				var intCountPayment = 0;
				var intTota1PaymentAmount = 0;
				var arrApHeaderId = [];
				for( key in arrmixResponseData.arr_ap_header_id ) {
					if ( arrmixResponseData.arr_ap_header_id.hasOwnProperty( key ) ){
						intCountPayment++;
						intTota1PaymentAmount += +parseFloat(arrmixResponseData.arr_ap_header_id[key].total_amount_due).toFixed(2);
						arrApHeaderId.push(arrmixResponseData.arr_ap_header_id[key].ap_header_id);
					}
				}
				$( '#selected_record_count' ).html( intCountPayment );
				$( '#selected_amount' ).html( '$' + parseFloat(intTota1PaymentAmount).toFixed(2) );

				$( '#select_ap_header_ids' ).val( arrApHeaderId );
				$( '#checkAll' ).addClass( 'checkedAll' )
				psi.patterns.removeLoadingImage( { strElementSelector: $strElementSelector } );
				psi.patterns.bindEssentials();

			}
		});
	}
    // Select the checkboxes after pagination, if checkAll checkbox selected
    var selectCheckboxes = function( tableId ) {
    	var intMaxSelectedRecordCount = 100;
    	if( ( true == $( '#' + tableId ).closest('b').find( 'input[type=checkbox]:first' ).prop( "checked" ) ) || ( $( '#' + tableId ).closest('b').find( '#selectAllRecords' ).prop( "checked" ) ) ) {
    		window.selectedItemTotal = 0;
		    if( tableId == 'checks_dashboard_table_data' && $( '#checkAll' ).hasClass( 'checkedAll' ) ) {
			    $( "#" + tableId ).find( "input[type=checkbox]:visible:not(:disabled)" ).prop( 'checked', true );
		    } else if( tableId == 'ar_approval_transactions_table_data' ) {
		    	if( $( '#' + tableId ).hasClass( 'all_record_selected' ) ) {
				    $( "#" + tableId ).find( "input[type=checkbox]:visible:not(:disabled)" ).prop( 'checked', true );
			    }
		    } else {
			    $( "#" + tableId ).find( "input[type=checkbox]:visible:not(:disabled):lt( " + intMaxSelectedRecordCount + " )" ).prop( 'checked', true ).trigger( 'change' );
			    if( tableId == 'invoices_dashboard_table_data' && $( '#checkAll' ).is( ':checked' ) ) {
			    	$( '#checkAll' ).trigger( 'change' );
			    }
		    }

        }
	    if( tableId == 'checks_dashboard_table_data' && $( '#checkAll' ).hasClass( 'checkedAll' ) ) {
		    $( "#" + tableId ).find( "input[type=checkbox]:visible:not(:disabled)" ).prop( 'checked', true );

		    for( var i = 0; i < arrStrUncheckedInvoices.length; i++ ) {
		    	$( '#' + arrStrUncheckedInvoices[i] ).prop( 'checked', false );
		    }
	    }

        var intTotalCount 	= parseInt( $( '.js-sub-tab-link.selected .notification' ).text() );
        if( 0 < $( '.vjs-task-link.selected .notification' ).length ) {
            intTotalCount 	= parseInt( $( '.vjs-task-link.selected .notification' ).text() );
        }

        psi.objDashboard.intSelectedRecordCount = $( "#" + tableId ).find( "input[type=checkbox]:visible:not(:disabled):checked" ).length;
        if( intMaxSelectedRecordCount == psi.objDashboard.intSelectedRecordCount || intTotalCount == psi.objDashboard.intSelectedRecordCount ) {
        	psi.objDashboard.removeAllRecordMessage();
        } else {
        	if( !$( '#checkAll' ).hasClass( 'checkedAll' ) ) {
		        $( '#selected_record_count' ).text( psi.objDashboard.intSelectedRecordCount );
	        }
        }
    }

	var toggleCheckBoxes = function( objCheckBox, strContentClass ) {
		window.selectedItemTotal = 0;
		if( 'invoices_dashboard_table_data' == strContentClass ) {
			var selectedAmt = i18nUtils.getCurrencySymbol().concat( parseFloat(window.selectedItemTotal).toFixed(2) );
		} else {
			var selectedAmt = parseFloat(window.selectedItemTotal).toLocaleString('en-US', { style: 'currency', currency: 'USD' });
		}

		if( 'undefined' == typeof strContentClass || '' == strContentClass ) strContentClass = 'dashboard-table-data';

        var intMaxSelectedRecordCount = 100;
        $('#max_records_error_msg').remove();
        $( "#"+ strContentClass ).find( "input[type=checkbox]:not(:disabled )" ).prop( 'checked', false );

        if( true == objCheckBox.checked ) {
    		window.selectedItemTotal = 0;
	        if( $(objCheckBox).attr('id') == 'checkAll' ) {
		        $( "#"+ strContentClass ).find( "input[type=checkbox]:visible:not(:disabled)" ).prop('checked', objCheckBox.checked );
		        countAllApprovePaymentRecords('checks_dashboard_table_data', 1);
	        } else{
		        $( "#"+ strContentClass ).find( "input[type=checkbox]:visible:not(:disabled):lt( " + intMaxSelectedRecordCount + " )" ).prop('checked', objCheckBox.checked );
	        }
		} else {
	        $( '#checkAll' ).removeClass( 'checkedAll' );
        	$( "#"+ strContentClass ).find( "input[type=checkbox]:visible:not(:disabled)" ).prop('checked', objCheckBox.checked ).trigger('change');
        	window.selectedItemTotal = 0;
	        $('#selected_amount').html( selectedAmt );
        	$('#selected_record_count').html( '0' );
	        $( '#select_ap_header_ids' ).removeAttr( 'value' );
		}

        psi.objDashboard.intSelectedRecordCount = $( "#"+ strContentClass ).find( "input[type=checkbox]:visible:not(:disabled):checked" ).length;
        if( true == objCheckBox.checked ) {
            psi.objDashboard.showAllRecordMessage( strContentClass );
        } else {
            psi.objDashboard.removeAllRecordMessage();
        }
		// updateCounter();
	}

	var updateCounter = function() {
		$('#selected_record_count').html( $( '[id^=ap_header_chkbox_]:checked' ).length );
	}
	// capture last clicked checkbox. This will be used in the below checktoggleCheckBox() function
	$( document ).ready( function() {
		$( '#dashboard_content' ).on( 'mousedown, focus', 'input[type=checkbox]', function() {
			psi.objDashboard.lastClicked = this;
		} );
	} );

	var checktoggleCheckBox = function( strToggleCheckBoxId, strContentClass, ele ) {

		if( strContentClass == 'checks_dashboard_table_data' ) {
			if($(ele).is(":checked") == true ) {
				if( arrStrUncheckedInvoices.indexOf($(ele).attr('id')) !== -1 ) {
					arrStrUncheckedInvoices.splice( arrStrUncheckedInvoices.indexOf($(ele).attr('id')), 1 );
				}
			} else {
				if( $(ele).attr('id') !== undefined ) {
					arrStrUncheckedInvoices.push($(ele).attr('id'));
				}
			}
		}

		if( 'undefined' == typeof strContentClass || '' == strContentClass ) strContentClass = 'dashboard-table-data';
        var intMaxSelectedRecordCount = 100;
        psi.objDashboard.intSelectedRecordCount = $( "#" + strContentClass ).find( "input[type=checkbox]:visible:not(:disabled):checked" ).length;
        $('#max_records_error_msg').remove();
        if( ( $( "#" + strContentClass ).find( "input[type=checkbox]" ).length == psi.objDashboard.intSelectedRecordCount ) || psi.objDashboard.intSelectedRecordCount == intMaxSelectedRecordCount ) {
            $( "#" + strToggleCheckBoxId ).prop( 'checked', true );
            if( psi.objDashboard.intSelectedRecordCount < intMaxSelectedRecordCount ) {
                psi.objDashboard.showAllRecordMessage( strContentClass );
            }
		} else {
            $( "#" + strToggleCheckBoxId ).prop( 'checked', false );
            psi.objDashboard.removeAllRecordMessage();
            if( psi.objDashboard.intSelectedRecordCount > intMaxSelectedRecordCount && strContentClass !== 'checks_dashboard_table_data' ) {
            	$('#max_records_error_msg').remove();
            	$( "#" + strToggleCheckBoxId ).prop( 'checked', true );
            	$( '#' + strContentClass ).before( '<p class="alert error slim" id="max_records_error_msg"><i></i>You cannot select more than ' + intMaxSelectedRecordCount + ' records.</p>' );
            	$("html, body").animate({ scrollTop: $('#dashboard_content').offset().top }, "slow");
            	// Trigger is done, as we need to update the total in invoice tab. [another function by OnChange will call once more after this function]
                $( psi.objDashboard.lastClicked ).trigger( 'change' ).prop( 'checked', false );
            }
		}
	}

    var showAllRecordMessage = function( strTableId ) {

		if( true != psi.objDashboard.boolShowCount ) {
			return;
		}
    	var strCount 		= $( '.js-sub-tab-link.selected .notification' ).text();
        var intTotalCount 	= parseInt( strCount );
        if( 0 < $( '.vjs-task-link.selected .notification' ).length ) {
            strCount 		= $( '.vjs-task-link.selected .notification' ).text();
            intTotalCount 	= parseInt( strCount );
        }

        var intMaxSelectedRecordCount = 100;
        if( 30 >= intTotalCount || intMaxSelectedRecordCount == psi.objDashboard.intSelectedRecordCount || intTotalCount == psi.objDashboard.intSelectedRecordCount ) return;

        // Show message to select more records in the listing
        var strMessage 	 = '<div class="selectall" id="select_bulk_msg">' + __( 'You have selected <strong><span id="selected_record_count">{%d,0}</span> record(s)</strong>.', [ psi.objDashboard.intSelectedRecordCount ] );
        if( '99+' == strCount ) {
	        strMessage 		+= __( 'You can select a maximum of {%d,0} records,', [ intMaxSelectedRecordCount ] );
	        strMessage 		+= __( '<a id="select_bulk_records" href="javascript:void(0);"> Click Here </a> to select the <strong>first {%d,0} records</strong> in this search result.</div>', [ intMaxSelectedRecordCount ] );
        } else {
	        strMessage 		+= __( '<a id="select_bulk_records" href="javascript:void(0);"> Click Here </a> to select <strong>{%d, 0} records</strong> in this search result.</div>', [ intTotalCount ] );
        }

        $( '#' + strTableId ).before( strMessage );

        // Call pagination function to load more records
        $( '#select_bulk_records' ).on( 'click', function() {
            intPageNumber = 4 - ( psi.objDashboard.intSelectedRecordCount / 30 );
            psi.objDashboard.loadAllRecords( strTableId, intPageNumber );
            psi.objDashboard.removeAllRecordMessage();
        } );

    }

    var removeAllRecordMessage = function( strTableId ) {
        $( '#select_bulk_msg' ).remove();
    }

    var initVerticalTab = function() {
		showHideCount();
		$(".sidetabs-menu").off("click").on("click", ".vjs-task-link", function(){

			$(".vjs-task-link").removeClass("selected");

			$(this).addClass("selected");

			var label = $(this).data("label");

			$("[label^='"+label+"']").removeClass('hide').siblings().not('.hide').addClass('hide');
			$("[label^='"+label+"']").siblings().find('table').off('scroll.lazyLoad');
			var eleId = $("[label^='"+label+"']").find('b').attr('id');

			strTableId = $( 'div#dashboard_content .vjs-task-link.selected' ).data( 'table-id' );

			strUrl = $(this).attr("url");

			if( 'undefined' != typeof strTableId && 'undefined' != typeof psi.objDashboard.strSortBy[strTableId] && 'undefined' != typeof psi.objDashboard.strSortDirection[strTableId] ) {
				strUrl = $(this).attr("url") + '&sort_by=' + psi.objDashboard.strSortBy[strTableId] + '&sort_direction=' + psi.objDashboard.strSortDirection[strTableId];
			}

			psi.patterns.ajaxRequest({ strElementSelector: '#'+eleId, url: strUrl });

			setTimeout(
				function() {
					psi.objDashboard.strSubTabModule = $('#dashboard_sub_tabs .js-sub-tab-link.selected').attr('id');
					psi.objDashboard.loadTabCount( $( '.js-task-link.selected' ) );
				}, 100
			);

		});

		var flag = false;

		$(".sidetabs-menu li").each( function() {
			if( 0 < parseInt( $(this).find('span').text() ) && false == flag ) {
				$(this).addClass("selected");
				$(this).trigger('click');
				flag = true;
			}
		});

		if( false == flag ) {
			$(".sidetabs-menu li:first").addClass("selected").trigger('click');
		}

        if( "1" == sessionStorage.getItem("load_verify_docs") ) {
			psi.patterns.showLoadingImage( { strElementSelector: "#alerts_container" } );
			psi.patterns.showLoadingImage( { strElementSelector: "#task_content" } );
            $("#esign_doc_sidetabs").find("li[data-table-id='dashboard_esign_verify_documents']").trigger("click");
        }

	}

	var reloadCurrentTab = function( strTableId, arrintSelectedFieldIds = [] ) {
		var strElementId = $("#"+ strTableId ).closest('b').attr('id');

		if( typeof strElementId == 'undefined' || strElementId == false ) {
		   strElementId = 'dashboard_content';
		}

		var strUrl = $( '#' + strTableId ).attr('custom_load_url');

		if( typeof strUrl == 'undefined' || strUrl == false ) {
		   strUrl = $( '.vjs-task-link.selected' ).attr('url');
		   if( typeof strUrl == 'undefined' || strUrl == false ) {
			   strUrl = $( '.js-sub-tab-link.selected' ).attr('custom_load_url');
		   } else {
			   strElementId = $("[label^='"+ $( '.vjs-task-link.selected' ).data('label') +"']").find('b').attr('id');
		   }

		} else {
				strUrl = strUrl + '&sort_by=' + psi.objDashboard.strSortBy[strTableId] + '&sort_direction=' + psi.objDashboard.strSortDirection[strTableId];
		}

		if( arrintSelectedFieldIds.length > 0 ) {
			strUrl = strUrl + '&selected_field_ids=' + arrintSelectedFieldIds;
		}

		psi.patterns.ajaxRequest( { strElementSelector: '#' + strElementId, url: strUrl } );
		psi.objDashboard.loadTabCount( $( '.js-task-link.selected' ) );
		psi.objDashboard.strSubTabModule = $( '.js-sub-tab-link.selected' ).attr( 'id' );
	}

	var loadverticleTabCount = function(){
		var subTabUrl = $(".sidetabs-menu li.vjs-task-link.selected").attr('url');
	}

	var checkNoteOnRejectPurchaseOrders = function( intApHeaderId ) {

		if( $.isNumeric( intApHeaderId ) ) {
			$( '[name^="purchase_order"]' ).removeAttr( 'checked' );
			$( "#po_" + intApHeaderId ).prop( 'checked', true );
		}

		if( 0 >= $('[name^=purchase_order][type=checkbox]:checked').length ) {
			$( '#dashboard_pos_message_div' ).html( '<p class="alert error slim"><i>! </i> Please select at least one purchase orders for rejection.</p>' ).fadeIn(50);
			return false;
		}

		var arrintSelectedApHeaders = new Array();

		$('[name^=purchase_order][type=checkbox]:checked').each( function() {
			arrintSelectedApHeaders.push( $( this ).val() );
		});

		psi.patterns.ajaxRequest( {
			url: psi.objDashboard.strRejectPurchaseOrders + '&check_required_note_on_rejection=1&ap_headers[]=' + arrintSelectedApHeaders,
			success: function( response ){
				var response = $.parseJSON( response );
				if( 1 == response['is_note_required_on_rejection'] ) {
					$( '.skip_span' ).addClass( 'hide' );
				} else {
					$( '.skip_span' ).removeClass( 'hide' );
				}
				strTitle = __( 'Rejection Reason' );
				psi.patterns.loadOverlay( { width: 340, height: 310, strContentId: 'mod_add_approval_note_popup', sourceDivId: 'frm_add_approval_note_popup', title: strTitle, dialogClass: 'nopad', modal: true } );
				$( '#frm_add_approval_note_popup' ).removeClass( 'hide' );
			}
		} );

	}

	var returnToPreviousStop = function( intApHeaderId ) {

		if( $.isNumeric( intApHeaderId ) ) {
			$( '[name^="purchase_order"]' ).removeAttr( 'checked' );
			$( "#po_" + intApHeaderId ).prop( 'checked', true );
		}

		if( 0 >= $('[name^=purchase_order][type=checkbox]:checked').length ) {
			$( '#dashboard_pos_message_div' ).html( '<p class="alert error slim"><i>! </i> Please select at least one purchase orders for return to previous.</p>' ).fadeIn(50);
			return false;
		}
		var strRequestUrl = psi.objDashboard.strReturnToPrevStop + '&ap_header[id]=' + intApHeaderId + '&is_request_from_dashboard_approvals_pos=1' + '&is_po_return_from_dashboard=1';
		psi.patterns.loadDialog({ width: 700, height: 350, strContentId: 'div_return_routing_stop', strUrl: strRequestUrl, title: 'Select Return Routing Stop' } );

	}

	var rejectPurchaseOrders = function( strElementId ){

		if( 'skip_approval_note_popup' != strElementId ) {
			if( '' == $( '#approval_note' ).val().trim() ) {
				$( '#frm_add_approval_note_popup .alert.error' ).removeClass( 'hide' );
				return false;
			} else {
				$( '#ap_header_logs_approval_note' ).val( $( '#approval_note' ).val() );
			}
		}

		$( '#approval_note' ).val( '' );
		$( '#mod_add_approval_note_popup' ).dialog('close');

		psi.patterns.ajaxRequest( {
			strElementSelector: '#purchase_orders_list_container',
			url: psi.objDashboard.strRejectPurchaseOrders + '&is_new_dashboard=1',
			data: $('#frm_purchase_orders').serialize()
		} );
	}

	var cancelPurchaseOrders = function() {
			$( '#approval_note' ).val( '' );
			$( '#mod_add_approval_note_popup' ).dialog( 'close' );
	}

	return {
			intPageNumber: intPageNumber,
			strSortBy: strSortBy,
			strSortDirection: strSortDirection,
			loadTab: loadTab,
			loadSubTab: loadSubTab,
			loadTabCount: loadTabCount,
			parseTabCount: parseTabCount,
			beforeSendDashboardCallback: beforeSendDashboardCallback,
			init: init,
			initFilter: initFilter,
			initPagination: initPagination,
			bindDataToHtmlToolTip: bindDataToHtmlToolTip,
			prepareHtmlTooltip: prepareHtmlTooltip,
			bindReasonsForContacts: bindReasonsForContacts,
			bindDataReasonsForContacts: bindDataReasonsForContacts,
			loadAllRecords: loadAllRecords,
			selectCheckboxes: selectCheckboxes,
			getCurrentSubTab: getCurrentSubTab,
			toggleCheckBoxes: toggleCheckBoxes,
			checktoggleCheckBox: checktoggleCheckBox,
			reloadCurrentTab: reloadCurrentTab,
			initSorting: initSorting,
			viewAlerts: viewAlerts,
			intPagingSize: intPagingSize,
			boolShowCount: boolShowCount,
			intIsAdministrator: intIsAdministrator,
			initVerticalTab: initVerticalTab,
			loadverticleTabCount: loadverticleTabCount,
			removeAllRecordMessage: removeAllRecordMessage,
			showAllRecordMessage: showAllRecordMessage,
			checkNoteOnRejectPurchaseOrders: checkNoteOnRejectPurchaseOrders,
			rejectPurchaseOrders: rejectPurchaseOrders,
			returnToPreviousStop: returnToPreviousStop,
			cancelPurchaseOrders: cancelPurchaseOrders,
			objCurrentAttachmentWindow: objCurrentAttachmentWindow,
			allSubTabCount: allSubTabCount
	}

}();

psi.objLeadsDashboard = function() {

	var loadApplication = function loadApplication( intApplicationId, strTableId ) {
		psi.patterns.loadLargeDialog( { strUrl: '/?module=application_systemxxx&application[id]=' + intApplicationId, onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) } } );
	}

	var loadLease = function loadLease( intLeaseId, strTableId ) {

		psi.patterns.loadLargeDialog( { strUrl: '/?module=customerxxx&lease[id]=' + intLeaseId, onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) } } );
	}

	var archiveApplications = function ( strFormId, strUrl, strTableId ) {

		if( 0 >= $( '#' + strFormId ).find( 'input:checkbox:checked' ).length ) {
			alert( __( 'Please select at least one record.' ) );
		} else {
			if( 1 == $( '#' + strFormId ).find( 'input:checkbox:checked' ).length ) {

				psi.patterns.loadDialog({ width: 750, height: 500, strUrl: strUrl + '&' + $( '#' + strFormId ).serialize(), strContentId: 'archive_applications', title: __( 'Archive Leads' ), onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) } });

			} else {
				psi.patterns.loadDialog({ width: 965, height: 595, strUrl: strUrl + '&' + $( '#' + strFormId ).serialize(), strContentId: 'archive_applications', title: __( 'Archive Leads' ), onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) } });
			}
		}
	}

	var closeApplications = function ( strFormId, strUrl, strTableId ) {

		if( 0 >= $( '#' + strFormId ).find( 'input:checkbox:checked' ).length ) {
			alert( __( 'Please select at least one record.' ) );
		} else {
			if( 1 == $( '#' + strFormId ).find( 'input:checkbox:checked' ).length ) {
				psi.patterns.loadDialog({ width: 750, height: 500, strUrl: strUrl + '&' + $( '#' + strFormId ).serialize(), strContentId: 'cancel_applications', title: __( 'Cancel Leads' ), onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) } });
			} else {
				psi.patterns.loadDialog({ width: 965, height: 595, strUrl: strUrl + '&' + $( '#' + strFormId ).serialize(), strContentId: 'cancel_applications', title: __( 'Cancel Leads' ), onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) } });
			}
		}
	}

	var muteFollowUps = function ( strFormId, strUrl, strTableId ) {

		if( 0 >= $( '#' + strFormId ).find( 'input:checkbox:checked' ).length ) {
			alert( __( 'Please select at least one record.' ) );
		} else {
			psi.patterns.loadDialog({
				width: 670,
				height: 445,
				strUrl: strUrl + '&' + $( '#' + strFormId ).serialize(),
				strContentId: 'mute_followups_dlg',
				title: __( 'Mute Manual Contacts' ),
				onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ); },
			});
		}
	}

	var createApplicationsEmail = function ( strFormId, strUrl, strTableId ) {

		if( 0 >= $( '#' + strFormId ).find( 'input:checkbox:checked' ).length ) {
			alert( __( 'Please select at least one record.' ) );
		} else {
			/* Message center bulk email for leads >> never contacted, not progressing */
			if( ( strTableId == 'never_contacted_dashboard_table_data' || strTableId == 'dashboard_leads_not_progressing_table' ) && '' != psi.objLeadsDashboard.intMessageCenterId ) {

				var arrintApplicationIds = [];
				var arrintPropertyIds    = [];

				$.each( $( '#' + strFormId ).find( '#' + strTableId + ' input:checkbox:checked' ), function() {
					if ( $(this).prop( 'checked' ) ) {
						arrintApplicationIds.push( $( this ).val() );
						arrintPropertyIds.push( $( this ).data( 'property-id' ) );
					}
				});

				var strRequestData = '&application[ids]=' + $.makeArray( arrintApplicationIds ) + '&report_filter[property_group_ids]=' + $.makeArray( arrintPropertyIds )+ '&is_lead_email=1';
				psi.patterns.showLoadingImage( { strElementSelector: '#'+strTableId } );

				psi.patterns.ajaxRequest( {
					type: 'POST',
					url: psi.MessageCenterEmail.exitTags.ajax_save_scheduled_email_filter + '&return_json_response=true&from_dashboard=true&save_list=true' + '&is_lead_email=1',
					data: strRequestData,
					dataType: 'json',
					success: function( objResponse ) {
						psi.patterns.removeLoadingImage( { strElementSelector: '#'+strTableId } );

						if( true == objResponse.status ) {

							psi.MessageCenterEmail.strListHTML = objResponse.list_html;
							psi.MessageCenterEmail.intTemporaryFilterListId = objResponse.filter_id;
							psi.MessageCenterEmail.boolShowAllFeatures = objResponse.show_all_features;
							psi.MessageCenterEmail.strBlockedRecipients = objResponse.blocked_recipients;
							psi.MessageCenterEmail.isReuseEmail = false;
							psi.MessageCenterEmail.loadComposeMessage( false, 'step-2', false, objResponse.filter_id );

						} else {

							psi.MessageCenterEmail.showMessage( 'error', objResponse.message, 'alert_message' );
						}
					}
				} );

			} else {

				/* for other leads tabs table */
				psi.patterns.loadLargeDialog({ width: 930, height: 650, strUrl: strUrl + '&' + $( '#' + strFormId ).serialize(), strContentId: 'create_applications_email', title: __( 'Create Email' ), onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) }, ckeditor: true });
				GtmTracking.addModalTimestampStart( 'send an email', 'create email' );
			}

		}
	}

	var createApplicationEmail = function ( strFormId, strUrl, strCheckBoxId, strTableId ) {

		$( '#dashboard_content' ).find( 'input[type=checkbox]:checked' ).removeAttr( 'checked' );
		$( '#' + strCheckBoxId ).prop( 'checked', true );

		var arrobjApplications = $( '#' + strFormId ).find( 'input:checked[name="applications[ids][]"]' );
		if( 1 == arrobjApplications.length ) {
			psi.patterns.loadLargeDialog({ width: 930, height: 650, strUrl: strUrl + '&' + $( '#' + strFormId ).serialize(), strContentId: 'create_applications_email', title: __( 'Create Email' ), onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) }, ckeditor: true } );
			GtmTracking.addModalTimestampStart( 'send an email', 'create email' );
		} else {
			alert( __( 'Please select only one record' ) );
		}
	}

	var createApplicationsMessage = function ( strFormId, strUrl, strTableId ) {

		if( 0 >= $( '#' + strFormId ).find( 'input:checkbox:checked' ).length ) {
			alert( __( 'Please select at least one record.' ) );
		} else {
			psi.patterns.loadDialog({ width: 750, height: 500, strUrl: strUrl + '&' + $( '#' + strFormId ).serialize(), strContentId: 'create_applications_message', title: __( 'Create Message' ), onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) }, ckeditor: true } );
			GtmTracking.addModalTimestampStart( 'send a text message', 'create message' );
		}
	}

	var createApplicationMessage = function ( strFormId, strUrl, strCheckBoxId, strTableId ) {

		$( '#dashboard_content' ).find( 'input[type=checkbox]:checked' ).removeAttr( 'checked' );
		$( '#' + strCheckBoxId ).prop( 'checked', true );

		var arrobjApplications = $( '#' + strFormId ).find( 'input:checked[name="applications[ids][]"]' );
		if( 1 == arrobjApplications.length ) {
			psi.patterns.loadDialog({ width: 750, height: 500, strUrl: strUrl + '&' + $( '#' + strFormId ).serialize(), strContentId: 'create_applications_message', title: __( 'Create Message' ), onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) }, ckeditor: true } );
			GtmTracking.addModalTimestampStart( 'send a text message', 'create message' );

		} else {
			alert( __( 'Please select only one record' ) );
		}
	}

	var attemptIntegrationProcess = function ( strAction, intApplicationId, intApplicantId, strTableId ) {

		var strUrl	= strAction + '&application[id]='+ intApplicationId + '&applicant[id]='+ intApplicantId + '&new_dashboard=1';
		psi.patterns.ajaxRequest( { strElementSelector: '#dashboard_content', url: strUrl, success: function() {
			psi.objDashboard.reloadCurrentTab( strTableId )
		}});
	}

	var hideShowEmailMessageButton = function ( strFormId ) {
		var objForm = $( '#' + strFormId );
		$( objForm ).find('#checkAll').prop('checked', false);
		var selectedEventsCount = $( objForm ).find( 'input:checked[name="event[ids][]"]' ).length;
		if( 0 < selectedEventsCount ) {
			$( '#button_set').hide();
			$( '#button_option' ).hide();
			$( '#show_delete' ).show();
		} else {
			$( '#button_set' ).show();
			$( '#button_option' ).show();
			$( '#show_delete' ).hide();
		}
	}

	var dismissContact = function ( strFormId, strUrl, strTableId ) {

		if( 0 >= $( '#' + strFormId ).find( 'input:checkbox:checked' ).length ) {
			alert( __( 'Please select at least one record.' ) );
		} else {

			var boolConfirm = confirm( __( 'Are you sure want to dismiss contact?' ) );

			if( true == boolConfirm ) {

				psi.patterns.ajaxRequest( {
					strElementSelector: '#dashboard_content',
					url: strUrl,
					data: $( '#' + strFormId ).serialize(),
					success: function() {
						psi.objDashboard.reloadCurrentTab( strTableId )
					}
				} );
			}
		}
	}

	var loadResidentInfo = function loadResidentInfo( intLeaseId, intCustomerId, strTableId ) {

		psi.patterns.loadLargeDialog( { strUrl: '/?module=customerxxx&lease[id]=' + intLeaseId + '&customer[id]=' + intCustomerId, onCloseCallback: function() { psi.objDashboard.reloadCurrentTab( strTableId ) } } );
	}

	return {
			loadApplication: loadApplication,
			loadLease: loadLease,
			archiveApplications: archiveApplications,
			closeApplications: closeApplications,
			createApplicationsEmail: createApplicationsEmail,
			createApplicationEmail: createApplicationEmail,
			createApplicationsMessage: createApplicationsMessage,
			createApplicationMessage: createApplicationMessage,
			attemptIntegrationProcess: attemptIntegrationProcess,
			hideShowEmailMessageButton: hideShowEmailMessageButton,
			muteFollowUps: muteFollowUps,
			dismissContact: dismissContact,
			loadResidentInfo: loadResidentInfo
	}

}();

psi.objResidentsDashboard = function() {

	var arrintLeaseIntervalIds = {};

	var init = function() {
		$('#dismiss-contact').on( 'click', function() {
			if( true == boolClickedDismisContact ) {
				return;
			}
			psi.objResidentsDashboard.dismissContact( $(this).data('form'), $(this).data('url'), $(this).data('tab') );
		} );
	}

	var reloadResidentTabs = function ( strContentDiv, strUrl, objForm ) {

		psi.patterns.ajaxRequest( { strElementSelector: '#' + strContentDiv, url: strUrl, data: $( objForm ).serialize() } );

		setTimeout(
				function() {
					psi.objDashboard.loadTabCount( $( '.js-task-link.selected' ) );
				}, 100
		);

		return false;
	}

	var dismissContact = function( strFormId, strUrl, strTabId ) {
		if( 0 >= $( '#' + strFormId ).find( 'input:checkbox:checked' ).length ) {
			alert( __( 'Please select at least one record.' ) );
		} else {
			boolClickedDismisContact = true;
			var boolConfirm = confirm( __( 'Are you sure want to dismiss contact?' ) );

			if( true == boolConfirm ) {

				psi.patterns.ajaxRequest( {
					strElementSelector: '#dashboard_content',
					url: strUrl,
					data: $( '#' + strFormId ).serialize(),
					success: function() {
						psi.objDashboard.reloadCurrentTab( strTabId );
						boolClickedDismisContact = false;
					}
				} );
			}
		}
	}


	return {
		reloadResidentTabs: reloadResidentTabs,
		dismissContact    : dismissContact,
		init              : init
	}
}();

psi.objTrainingDashboard = function( jQuery ) {

	function init( $strViewCompanyUserCourse, $strNonPermissionedModules, $strViewCompanyUserInteractiveCourse, $strCheckCourseCompleted) {

		$trainingDashboardTable = $('#training_dashboard_table_data');

		$trainingDashboardTable.on( 'click', '.js-load_company_user_course', function() {

			if( '' == $strNonPermissionedModules ) {

				var intCompanyUserAssessmentId 	= $(this).data('company_user_assessment_id');
				var intHelpResourceId			= $(this).data('help_resource_id');
				var intCompanyUserId			= $(this).data('company_user_id');
				var boolHasWriteAccess			= $( this ).data( 'check-write-module-access' );
				var strCourseUrl                = '';
				var self                        = $(this);
				var boolFromTrainingDashboard   = false;
				var strLargeDialogTitle         = __( 'Training Course' );

				if( self.hasClass('interactive_course') ) {
					strCourseUrl = $strViewCompanyUserInteractiveCourse + '&company_user_assessment[id]=' + intCompanyUserAssessmentId + '&help_resource_id=' + intHelpResourceId + '&company_user_assessment[company_user_id]=' + intCompanyUserId + '&company_user_assessment[from_training_dashboard]=' + boolFromTrainingDashboard;
					boolFromTrainingDashboard   = true;
					strLargeDialogTitle = __( 'Training Interactive Course' );
					if( self.hasClass('focused_course') ) {
						strLargeDialogTitle = __( 'Training Focused Course' );
					}
				} else {
					strCourseUrl = $strViewCompanyUserCourse + '&company_user_assessment[id]=' + intCompanyUserAssessmentId + '&company_user_assessment[help_resource_id]=' + intHelpResourceId + '&company_user_assessment[company_user_id]=' + intCompanyUserId + '&company_user_assessment[from_training_dashboard]=' + boolFromTrainingDashboard;
				}

				psi.patterns.loadLargeDialog( { strUrl: strCourseUrl,
					title: strLargeDialogTitle,
					strContentId: 'view_user_course',
					beforeSend: function( xhr, opts ) {
						psi.patterns.showLoadingImage( { strElementSelector: '.modal-body' } );
						psi.trainingUserCourses.checkWriteModuleAccessForCourses( xhr, boolHasWriteAccess );
					},
					complete: function() {
						psi.patterns.removeLoadingImage( { strElementSelector: '.modal-body' } );
					},
					onCloseCallback: function() {
						if( self.hasClass('interactive_course') ) {

							psi.objInteractiveCourse.closeInteractiveCourseCookieInterval();

							psi.patterns.ajaxRequest( {
								url: $strCheckCourseCompleted,
								data: { 'help_resource_id': intHelpResourceId, 'company_user_assessment_id': intCompanyUserAssessmentId },
								complete: function() {
									psi.objDashboard.reloadCurrentTab( 'training_dashboard_table_data' )
								}
							} );
						} else {
							psi.objDashboard.reloadCurrentTab( 'training_dashboard_table_data' ) }
						}
				} );
			} else {
				var strModuleName = 'helpxxx' == $strNonPermissionedModules ? 'Help / Support > Help ' : 'Help / Support > Browse Training Courses';
				$('#error_alert').removeClass('hide').html("<p id='error_alert' class='alert warning slim'><i></i>You are unable to open this course because your user lacks access to the <em class='bold'>"+strModuleName+"</em> Section, please request access from your Administrator.</p>");
			}
		});
	}

	return {
		init: init
	}

}( jQuery );

psi.objApprovalPrivacyDashboard = function() {
	var init = function () {
		$.each( $( ".other-description-content" ), function() {
			let intReviewRequestId = $(this).data('request_id');
			$( ".other-description-" + intReviewRequestId ).psiTooltip({
				trigger: 'hover',
				positions: 'right',
				width: 'auto',
				contentSelector: $( ".other-type-tooltip-" + intReviewRequestId ),
				items: ".other-description-" + intReviewRequestId,
				open: function (event, ui) {
					$( '.ui-tooltip' ).addClass( 'others-tooltip' );
				}
			});
		});
	}
	var sendToEntrataRequest = function ( intRequestId, strSelectorId, strErrMsgId, strUrlSendToEntrata ) {
		if( intRequestId ) {
			$( ".tip" ).remove();
			$("#"+intRequestId+" .btn-group.open").removeClass("open");
			psi.patterns.ajaxRequest( {
				strElementSelector: "#" + strSelectorId,
				url: strUrlSendToEntrata + "&review_request[id]=" + intRequestId ,
				success: function(transport) {
					var response = transport.data;
					psi.patterns.removeLoadingImage({ strElementSelector: "#" + strSelectorId });
					if( true == response.success ) {
						psi.objDashboard.reloadCurrentTab( strSelectorId );
						intTotalCount 	= parseInt( $( '.vjs-task-link.selected .notification' ).text() );
						if( 1 <= intTotalCount ) { $( '.vjs-task-link.selected .notification' ).text( intTotalCount - 1); }
					}else{
						$('#' + strErrMsgId).html('<p class="alert error slim"><i></i>'+response.error_msg+'</p>').show().fadeOut(5000);
					}
				}
			} );
		}
	}

	var declineRequest = function ( intDataRequestId, customerName, strSelectorId, strErrMsgId, strUrlDeclinePrivacyRequest ) {
		psi.patterns.ajaxRequest( {
			url: strUrlDeclinePrivacyRequest + "&review_request[id]=" + intDataRequestId + "&review_request[customer_name]=" + customerName,
			strElementSelector: '#' + strSelectorId,
			success: function( transport ) {
				var response = transport.data;
				psi.patterns.removeLoadingImage({ strElementSelector: '#' + strSelectorId });
				if( true == response.success ) {
					psi.objDashboard.reloadCurrentTab( strSelectorId );
					intTotalCount 	= parseInt( $( '.vjs-task-link.selected .notification' ).text() );
					if( 1 <= intTotalCount ) { $( '.vjs-task-link.selected .notification' ).text( intTotalCount - 1); }
				}else{
					$('#' + strErrMsgId).html('<p class="alert error slim"><i></i>'+response.error_msg+'</p>').show().fadeOut(10000);
				}
			}
		} );
	}

	var showArchiveRequestPopup = function ( intDataRequestId, strRequestType, strDownloadedOn, strUrlArchiveRequest, strContentId ) {
		var strUrl = strUrlArchiveRequest + '&request_type='+strRequestType+'&downloaded_on=' + strDownloadedOn + '&request_id='+intDataRequestId;

		psi.patterns.loadOverlay( {
			strContentId: strContentId,
			showHeader: false,
			strUrl: strUrl,
			width: 400,
			height: 300
		} );
	}

	var downloadReport = function ( strUrlDownloadRequestReport ) {
		$( '.download-report' ).on( 'click', function() {
			try {
				var intRequestId = $( this ).data( 'request' );
				if( intRequestId ) {
					psi.patterns.ajaxRequest( {
						strElementSelector: "#dashboard_privacy_pending_requests",
						url: strUrlDownloadRequestReport + "&request[id]=" + intRequestId ,
						success: function(transport) {
							var response = transport.data;
							psi.patterns.removeLoadingImage({ strElementSelector: "#dashboard_privacy_pending_requests" });
							if( true === response.success ) {
								const aElement = document.createElement("a");
								$('#dashboard_privacy_pending_requests').append(aElement);
								aElement.setAttribute("style", "display: none");
								const blob = new Blob([response.contents], {type: "octet/stream"});
									var url = window.URL.createObjectURL(blob);
									aElement.setAttribute("href", url);
									aElement.setAttribute("download", response.fileName);
									aElement.click();
									window.URL.revokeObjectURL(url);
									psi.objDashboard.reloadCurrentTab( 'dashboard_privacy_pending_requests' );
								} else{
									$('#pending_request_message_div').html('<p class="alert error slim"><i></i>'+response.message+'</p>').show().fadeOut(5000);
								}
							}
						} )
				}
			} catch( err ) {
					$('#pending_request_message_div').html( "<i></i>" + err.toString() + "." ).show().fadeOut(5000);
				}
		});
	}

	var archiveReport = function ( strUrlDownloadRequestReport, strFormData ) {
		$( '#archive_download_form' ).submit(function(){
			psi.patterns.showLoadingImage({
				strElementSelector: "#archive_download_form"
			});

			psi.patterns.ajaxRequest({
				strElementSelector: '#archive_field',
				url: strUrlDownloadRequestReport,
				data: strFormData,
				dataType : 'json',
				success : function( transport ) {
					var response = transport.data;
					psi.patterns.removeLoadingImage({ strElementSelector: "#archive_download_form" });
					if( true === response.success ) {
						if( undefined !== response.contents ) {
							const aElement = document.createElement("a");
							$('#dashboard_privacy_pending_requests').append(aElement);
							aElement.setAttribute("style", "display: none");
							const blob = new Blob([response.contents], {type: "octet/stream"});
							var url = window.URL.createObjectURL(blob);
							aElement.setAttribute("href", url);
							aElement.setAttribute("download", response.fileName);
							aElement.click();
							window.URL.revokeObjectURL(url);
						}

						$( '#archive_download_request' ).dialog( 'close' );
						psi.objDashboard.reloadCurrentTab( 'dashboard_privacy_pending_requests' );
						intTotalCount 	= parseInt( $( '.vjs-task-link.selected .notification' ).text() );
						if( 1 <= intTotalCount ) { $( '.vjs-task-link.selected .notification' ).text( intTotalCount - 1); }
					} else{
						$('#archive_request_message_div').html('<p class="alert error slim"><i></i>'+response.message+'</p>').show().fadeOut(5000);
					}
				}
			});

			return false;
		});
	}

	var closeArchivePopup = function ( strArchivePopupId ) {
		$( '#' + strArchivePopupId ).dialog( 'close' );
	}
	return {
		init: init,
		sendToEntrataRequest: sendToEntrataRequest,
		declineRequest: declineRequest,
		showArchiveRequestPopup: showArchiveRequestPopup,
		downloadReport: downloadReport,
		closeArchivePopup: closeArchivePopup,
		archiveReport: archiveReport
	}

}();
