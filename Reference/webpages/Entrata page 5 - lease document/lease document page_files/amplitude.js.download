// Amplitude V2 Tracking Script for AJAX-Based Applications
// update any key in USER_PROPERTIES from tpl files
class AmplitudeAnalytics {
    constructor(config) {
        this.config = {
            apiKey: config.apiKey,
            userId: config.userId,
            userProperties: config.userProperties,
            productName: config.productName,
            sessionReplaySampleRate: config.sessionReplaySampleRate || 1,
            elementInteractions: config.elementInteractions || false
        };
        this.ampInstance = null;
    }

    updateUserProperty(key, value) {
        if (this.config.userProperties.hasOwnProperty(key)) {
            this.config.userProperties[key] = (value !== null && value !== undefined) ? value : "";

            // Add this block to update Amplitude when instance exists
            if (this.ampInstance) {
                let identify = new amplitude.Identify();
                identify.set(key, value);
                this.ampInstance.identify(identify);
            }
        } else {
            console.warn(`Key ${key} does not exist in userProperties.`);
        }
    }

    // Add new method to update multiple user properties
    updateUserProperties(properties) {
        if (!properties || typeof properties !== 'object') {
            console.warn('Invalid properties object provided');
            return;
        }

        // Update local config
        Object.entries(properties).forEach(([key, value]) => {
            if (this.config.userProperties.hasOwnProperty(key)) {
                this.config.userProperties[key] = (value !== null && value !== undefined) ? value : "";
            } else {
                console.warn(`Key ${key} does not exist in userProperties.`);
            }
        });

        // Update Amplitude if initialized
        if (this.ampInstance) {
            let identify = new amplitude.Identify();
            Object.entries(properties).forEach(([key, value]) => {
                if (this.config.userProperties.hasOwnProperty(key)) {
                    identify.set(key, value);
                }
            });
            this.ampInstance.identify(identify);
        }
    }

    // Load Amplitude Analytics SDK
    loadAnalyticsSDK() {
        const script = document.createElement("script");
        script.src = `https://cdn.amplitude.com/script/${this.config.apiKey}.js`;
        script.async = true;
        script.onload = () => this.loadEngagementPlugin();
        script.onerror = (error) => console.error("Failed to load Amplitude Analytics SDK:", error);
        document.head.appendChild(script);
    }

     // Load Engagement Plugin
     loadEngagementPlugin() {
        const script = document.createElement("script");
        script.src = `https://cdn.amplitude.com/script/${this.config.apiKey}.engagement.js`;
        script.async = true;
        script.onload = () => this.initAmplitude();
        script.onerror = (error) => console.error("Failed to load Engagement Plugin:", error);
        document.head.appendChild(script);
    }

    // Initialize Amplitude with tracking settings
    initAmplitude() {
        try {
            this.ampInstance = window.amplitude.createInstance();

            // Add Engagement Plugin
            if(window.engagement) {
                this.ampInstance.add(window.engagement.plugin());
            }

            // Session replay should be initialized after instance creation
            if (window.sessionReplay) {
                const sessionReplayTracking = window.sessionReplay.plugin({
                    sampleRate: this.config.sessionReplaySampleRate
                });
                this.ampInstance.add(sessionReplayTracking);
            }

            // Initialize with better configuration options
            this.ampInstance.init(this.config.apiKey, this.config.userId, {
                autocapture: {
                    elementInteractions: this.config.elementInteractions,
                    pageViews: true  // Enable automatic page view tracking
                },
                // logLevel: 'WARN',
                minIdLength: 1,
                trackingOptions: {
                    ipAddress: true,
                    platform: true,
                    language: true
                }
            });

            this.ampInstance.setUserId(this.config.userId); // set user id
            this.setUserProperties(); // set user properties
            this.setupAutoTracking(); // Track clicks
            this.setupEventHooks(); // Updated to use event hooks
        } catch (err) {
            console.error("Error during Amplitude initialization:", err);
        }
    }

    // Set user properties
    setUserProperties() {
        let identify = new amplitude.Identify();
        for (const [key, value] of Object.entries(this.config.userProperties)) {
            identify.set(key, value);
        }
        this.ampInstance.identify(identify); // Apply the new properties
    }

    // Improved event hooks with error handling
    setupEventHooks() {
        if (!this.ampInstance || typeof this.ampInstance.track !== 'function') {
            console.error('Invalid Amplitude instance provided');
            return;
        }

        const originalTrackEvent = this.ampInstance.track.bind(this.ampInstance);
        this.ampInstance.track = (eventType, eventProperties = {}, ...args) => {
            try {
                // Add common properties
                const enrichedProperties = {
                    ...eventProperties,
                    PRODUCT_NAME: this.config.productName,
                    timestamp: Date.now(),
                    page_url: window.location.href,
                    page_title: document.title
                };

                originalTrackEvent(eventType, enrichedProperties, ...args);
            } catch (error) {
                console.error('Error tracking event:', error);
            }
        };
    }

    // Track clicks
    setupAutoTracking = (() => {
        let initialized = false; // Prevent duplicate listeners

        return () => {
            if (initialized) return;
            initialized = true;

            document.addEventListener("click", (event) => {
                const target = event.target.closest("a, button");
                if (target) {
                    this.setUserProperties();
                    const eventOptions = { time: Date.now() };
                    this.ampInstance.track("Click", {
                        text: target.innerText.trim(),
                        element_id: target.id || "",
                        url: window.location.href,
                        PRODUCT_NAME: this.config.productName
                    }, eventOptions);
                }
            });

            if (window.jQuery) {
                $(document).on("ajaxComplete", () => {
                    const self = this;
                    $(document).off("click", "a, button").on("click", "a, button", function() {
                        self.setUserProperties();
                        const eventOptions = { time: Date.now() };
                        self.ampInstance.track("Click", {
                            text: $(this).text().trim(),
                            element_id: this.id || "",
                            url: window.location.href,
                            PRODUCT_NAME: self.config.productName
                        }, eventOptions);
                    });
                });
            }
        };
    })();

    init() {
        document.addEventListener("DOMContentLoaded", () => this.loadAnalyticsSDK());
    }
}

// Example Usage:
/*
// Initialize Amplitude Analytics
const amplitudeConfig = {
    apiKey: 'your-api-key-here',
    userId: 'user123',
    userProperties: {
        cid: "cid",
        property: "property_name",
        department: "department_name",
        product_name : "product_name",
        product_options : "product_options",
        is_administrator: 'y', // y or n
        is_employee: 'y', // y or n
        release_track : "release_track",
        cloud_flare_trace_id: "cloud_flare_trace_id"
    },
    productName: 'Entrata',
    sessionReplaySampleRate: 0.25,  // 25% of sessions will be recorded
    elementInteractions: false
};

const analytics = new AmplitudeAnalytics(amplitudeConfig);
analytics.init();

// Update a single user property
analytics.updateUserProperty('department', 'software');

// Update multiple user properties at once
analytics.updateUserProperties({
        cid: "cid",
        property: "property_name",
        department: "department_name",
        product_name : "product_name",
        product_options : "product_options",
        is_administrator: 'y', // y or n
        is_employee: 'y', // y or n
        release_track : "release_track",
        cloud_flare_trace_id: "cloud_flare_trace_id"
    });

// Note: The class will automatically track:
// - Click events on buttons and links
// - Dialog openings via psi.patterns
// - All events will include product name, timestamp, and page information
*/
