var objConnection = '';
var strLeasingAgentName = '';
var strLeasingAgentFirstName = '';
var intCurrentLeasingAgentId = '';
var boolIsAllowChats = true;
var boolIsAllowTexting = true;
var intAutoHidePopupAfter = 300;
var objJidUserNameAssociations = {};
var objNumberOfLeasingAgentsForChatRooms = {};
const MESSAGE_AGGREGATOR_WHATSAPP = 3;
const MESSAGE_AGGREGATOR_SMS = 2;
const MESSAGE_AGGREGATOR_WECHAT = 4;
const MICROSECONDS_24_HOURS = 86400000;
const MICROSECONDS_48_HOURS = 172920000;
const MILLISECONDS_1_5_SECONDS = 1500;
const MSG_STATUS_PENDING = 'pending';
const MSG_STATUS_SENT = 'sent';
const MSG_STATUS_FAILED = 'failed';
var objActionItems = '';
var intChatRequestMaxTime = 180; // 3 mins
var intMaxVisibleNotifications = 5;
var objCallbackReturnToActiveChats = '';
var arrobjUnclaimedMessage = [];
var arrmixIntervals = [];
var arrmixAddToChatIntervals = [];
var strMinutes = 1;
var strSeconds = 30;
var intMaxAgentsAllowedInConversation = 3;
var arrintIntervalIds = [];

var objChatPanel = function( options ) {
	var sessionInterval;
	var arrSelectedProperties;
	var strChatIcon = '<svg viewBox="0 0 32 32" class="entrata-svg-icon fill- default"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#';
	function init( options ) {
		objChatPanel.strUserChatRooms = [];
		objChatPanel.arrChatRoomsToTransfer = [];
		objChatPanel.boolIsFromLogout = false;
		objChatPanel.boolIsTransferChat = false;
		objChatPanel.boolIsChatTransferred = false;
		objChatPanel.boolIsFromAvailabilitytoggle = false;
		objChatPanel.boolIsEndChat                = false;
		objChatPanel.intCurrentUncheckedProperty  = false;
		intLogoutCheckTimeoutInterval = setInterval( function() {
			checkForActiveChatsBeforeLogout();
		}, 2000 );
		bindLogoutEvent();

		$( this.entrata_class ).on( 'click', '.js-launch-chat', function() {

			var $objPanel = $( '.chat-panel' );
			var $ObjInnerPanel = $( '#chat-inner-content' );

			$objPanel.toggleClass( 'open' );
			$( '.flex-entrata-wrapper' ).toggleClass( 'chat-panel-open' );
			$( '.flex-entrata-wrapper .table-header' ).css( "width", "" );
			objChatPanel.setSessionStorage( 'is_open_chat_panel', 1 );

			setTimeout( function() {
				if( $objPanel.hasClass( 'open' ) ) {
					$ObjInnerPanel.fadeIn();
					objChatPanel.setSessionStorage( 'is_open_chat_panel', 1 );
					if( !$( '.chat-panel' ).hasClass( 'chat_loaded' ) ) {
						loadInnerContent( true );
					}
				} else {
					$ObjInnerPanel.fadeOut();
					objChatPanel.setSessionStorage( 'is_open_chat_panel', 0 );
				}
			}, 100 );
		} );

		$( "#available-toggle-switch" ).on( "click", function() {
			if( $( ".js-hide-button" ).is( ":visible" ) ) {
				$( ".js-hide-button" ).hide();
			} else {
				$( ".js-hide-button" ).show();
			}
		} );

		$(document).on('click', '#add-agent', function() {
			var arrLeasingAgentIds = [];
			var strChatRoomJid = sessionStorage.getItem( 'current_active_chat_room' );
			var objElement = $( "#" + strChatRoomJid + ' .js-conversation-history ' );

			$('#online_leasing_agents').find('input[type=checkbox]:checked').each(function(){
				arrLeasingAgentIds.push($(this).val());
			});
			var strLeasingAgentIds = arrLeasingAgentIds.join(',');

			if( null !== strLeasingAgentIds ) {
				var strSerializedData = $( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).find('#serialized_data').val();
				var strLeasingAgents = $( '.active-chat-messages .' + strChatRoomJid ).find('.current-leasing-agents').html();
				var arrmixData = JSON.parse(strSerializedData);
				if( strLeasingAgents == '' ) {
					arrmixData.current_leasing_agents = strLeasingAgentName;
				} else if( strLeasingAgents.search( 'You' ) ) {
					arrmixData.current_leasing_agents = strLeasingAgents.replace( 'You', strLeasingAgentName );
				}

				objEntrataXmppChat.addToChatRequest( strLeasingAgentIds, strChatRoomJid, 'add_to_chat', JSON.stringify( arrmixData ) );
				objElement.find( '#leasing_agent_list' ).addClass('hide');
				objElement.find( '#leasing_agent_list' ).css('display', 'none');
				objElement.find('.conversation-messages' ).attr( 'style', 'max-height:calc(~100vh - 450px) !important;' );
				objElement.find( '#leasing_agent_list' ).find('#online_leasing_agents').find('input[type=checkbox]:checked').prop('checked', false );
			}
		} );

		$(document).on('click', '#js-cancel-add-agent-link', function() {
			var objElement = $(this).parents( '.js-conversation-history ' );
			objElement.find( '#leasing_agent_list' ).addClass('hide');
			objElement.find( '#leasing_agent_list' ).css('display', 'none');
			objElement.find( '#leasing_agent_list' ).find('#online_leasing_agents').find('input[type=checkbox]:checked').prop('checked', false );
			objElement.find('.conversation-messages' ).attr( 'style', 'max-height:calc(100vh - 450px) !important;' );
		} );

		$( document )
			.on( 'click', '#chat-transfer-offline', function() {
				var boolIsHistoricalAccess = $( this ).data( "historical_access" );
				objChatPanel.boolIsTransferChat = true;
				transferOrEndChat( objChatPanel.boolIsFromLogout, boolIsHistoricalAccess );
			} )
			.on( 'click', '#availableToggle #add_to_chat', function() {
				$( '#transfer-chat-container' ).addClass( 'hide' );
				$( '#available-leasing-agents' ).removeClass( 'hide' );
			} )
			.on( 'click', '#availableToggle #end_chat', function() {
				$.each( objChatPanel.strUserChatRooms, function( index, strChatRoom ) {
					EntrataChatPanel.endChat( strChatRoom, true );
				} );
				objChatPanel.boolIsEndChat = true;
				$( "#availableToggle" ).dialog( "close" );
				updateChatSessionData();
			} )
			.on( 'click', '#availableToggle #cancel_transfer_chat', function() {
				$( "#availableToggle" ).dialog( "close" );
			})
			.on( 'click', '#availableToggle #transfer_chat', function() {
				if( true == $(this).hasClass('disabled') ) {
					return;
				}
				var isHistoricalAccess = $( this ).data( "historical_access" );
				objChatPanel.boolIsTransferChat = true;
				var strLeasingAgents = $('#availableToggle #leasing_agents_information').val();
				var arrLeasingAgents = JSON.parse( strLeasingAgents );
				var arrSelectedUsers = [];
				$('.company-users-container input:checked').each(function(){
					arrSelectedUsers.push( parseInt( $(this).val() ) );
				});
				if( 0 < arrSelectedUsers.length ) {
					transferOrEndChat( objChatPanel.boolIsFromLogout, isHistoricalAccess, arrLeasingAgents, arrSelectedUsers );
					updateChatSessionData();
				}
			} )
			.on( 'change', '#available-leasing-agents input[type=checkbox]', function() {
				if( 0 < $('#available-leasing-agents').find('input[type=checkbox]:checked').length ) {
					$('#availableToggle #transfer_chat').removeClass('disabled');
				} else {
					$('#availableToggle #transfer_chat').addClass('disabled');
				}
			} )
			.on( 'change', '#online_leasing_agents input[type=checkbox]', function() {
				var objElement = $(this).parents( '.js-conversation-history' );
				if( 0 < $('#online_leasing_agents').find('input[type=checkbox]:checked').length ) {
					objElement.find( '#leasing_agent_list #add-agent' ).removeClass('disable-links');
				} else {
					objElement.find( '#leasing_agent_list #add-agent' ).addClass('disable-links');
				}
			});

		$('#chat-inner-content').on( 'change', '.js-actiontype', function() {
			var strVal = $(this).val();
			var objElm = $( this ).parents('.js-chat_box');
			var strChatRoom = $(objElm).attr('id');
			var intPropertyId = $('.sms-text-messages').find( '.' + strChatRoom ).data('property_id');
			$( "#sms-text-section #" + strChatRoom + " .js-conversation-history .conversation-messages" ).attr( 'style', 'max-height:calc(100vh - 660px) !important;' );
			$(".js-actiontype-field").hide();
			if( strVal == 'attach_to_lead' ) {
				var options	= {
					rowOnClick: function( objRow ) {
						objElm.find('#wechat_application_id').val( objRow.application_id );
						objElm.find('#wechat_applicant_id').val( objRow.applicant_id );
						objElm.find('#wechat_applicant_name').val( objRow.name_first + " " + objRow.name_last );
					},
					propertyIds: intPropertyId,
					dataBlobType: DATA_BLOB_TYPE_LEASE_LEADS
				};
				$( this ).parents('.js-chat_box').find('#wechat_applicant_name').fastLookup(options);
				$( this ).parents('.js-chat_box').find(".js-attach_to_lead").removeClass( 'hide' );
				$( this ).parents('.js-chat_box').find(".js-attach_to_resident").addClass( 'hide' );
			}
			if( strVal == 'attach_to_resident' ) {
				var options = {
					rowOnClick: function( objRow ) {
						objElm.find('#wechat_customer_id').val( objRow.customer_id );
						objElm.find('#wechat_lease_id').val( objRow.lease_id );
						objElm.find("#wechat_lease_customer_name").val(objRow.name_first + " " + objRow.name_last);
					},
					propertyIds: intPropertyId,
					dataBlobType: DATA_BLOB_TYPE_LEASE_CUSTOMERS
				};
				$( this ).parents('.js-chat_box').find('#wechat_lease_customer_name').fastLookup(options);
				$( this ).parents('.js-chat_box').find(".js-attach_to_resident").removeClass( 'hide' );
				$( this ).parents('.js-chat_box').find(".js-attach_to_lead").addClass( 'hide' );
			}
			$( this ).parents('.js-chat_box').find(".js-" + strVal).fadeIn();
		} );

		$('#chat-inner-content')
		.on( 'click', '.js-close-chat-panel', function(){
			$('.chat-panel').toggleClass('open');
			$('#chat-inner-content').fadeOut();
			$('.flex-entrata-wrapper').toggleClass('chat-panel-open');
			objChatPanel.setSessionStorage( 'is_open_chat_panel', 0 );
		} )
		.on( 'click', '.sms-text-messages .text-section', function( event ){
			var strChatRoom = $(this).data('chat-room');
			var intNotificationId = $( this ).data( 'message-id' );
			var strElement = event.target.nodeName;
			var intPropertyId = $( this ).data( 'property_id' );
			var intCustomerId = $( this ).data( 'customer-id' );
			var intApplicantId = $( this ).data( 'applicant-id' );
			var intApplicationId = $( this ).data( 'application-id' );

			if( ( 'use' == strElement || 'svg' == strElement ) && 'entrata-svg-icon fill- large' != event.target.classList.value ) {
				return;
			}

			if( $( '#chat_popup_' + strChatRoom ).length ) {
				objChatPanel.removeNotification( $( '#chat_popup_' + strChatRoom ) );
			}

			if( MESSAGE_AGGREGATOR_WECHAT == parseInt( $( this ).data( 'message-aggregator-id' ) ) ) {
				var strWeChatId = $( this ).data( 'wechat-open-id' );
				EntrataChatPanel.showMessageAction( strWeChatId, strChatRoom );
				EntrataChatPanel.loadWeChatTemplates( strChatRoom );
			}

			if( MESSAGE_AGGREGATOR_SMS == parseInt( $( this ).data( 'message-aggregator-id' ) ) ) {
				/* On Page load if we get session chatRoom, then we are handling check WrapUpTimeInterval after getting response of 'handleWrapUpTimeInterval' function*/
				var strActiveChatRoom = sessionStorage.getItem( 'current_active_sms_chat_room' );
				//check attribute is not present to avoid duplicate call
				var attributeElement = $( this ).attr( 'data-is-chat-accepted' );
				if( null == strActiveChatRoom && "undefined" != typeof attributeElement && 'false' == attributeElement ) {
					$( this ).attr( "data-is-chat-accepted", 'true' );
					objChatPanelSmsTemplate.handleWrapUpTimeInterval( strChatRoom );
				}
			}

			if( MESSAGE_AGGREGATOR_WHATSAPP == parseInt( $( this ).data( 'message-aggregator-id' ) ) ) {
				/* On Page load if we get session chatRoom, then we are handling check WrapUpTimeInterval after getting response of 'handleWrapUpTimeInterval' function*/
				var strActiveChatRoom = sessionStorage.getItem( 'current_active_sms_chat_room' );
				//check attribute is not present to avoid duplicate call
				var attributeElement = $( this ).attr( 'data-is-chat-accepted' );
				if( null == strActiveChatRoom && "undefined" != typeof attributeElement && 'false' == attributeElement ) {
					$( this ).attr( "data-is-chat-accepted", 'true' );
					objChatPanelWhatsappTemplate.handleWrapUpTimeInterval( strChatRoom );
				}
				objChatPanelWhatsappTemplate.loadWhatsAppTemplates( strChatRoom, intPropertyId, intCustomerId, intApplicantId );
			}

			$( this ).find( '.text-message-status' ).text( '' );
			$( this ).find( '.text-message-status' ).removeClass( 'pad5' );

			if( $( this ).hasClass( 'unread' ) ) {
				EntrataChatPanel.updateSmsNotification( intNotificationId, null, null, null, true );
			}

			$(".sms-text-messages").addClass("hide");
			$( this ).removeClass( 'unread' );
			$("#holla-back-section").removeClass("hide");
			$( '.chat-text-area' ).val('');

			if( false == $( "#" + strChatRoom + ' .js-conversation-history' ).find( '.we_chat_template' ).hasClass( 'hide' ) ) {
				$( "#" + strChatRoom + ' .js-conversation-history' ).find( '.we_chat_template' ).addClass( 'hide' );
			}

			if( false == $( "#" + strChatRoom + ' .js-conversation-history' ).find( '.whatsapp_template' ).hasClass( 'hide' ) ) {
				$( "#" + strChatRoom + ' .js-conversation-history' ).find( '.whatsapp_template' ).addClass( 'hide' );
			}

			$( '#sms-text-section #' + strChatRoom ).removeClass( 'hide' );
			if( false == $(this).hasClass('loaded') ) {
				$('#sms-text-section #' + strChatRoom + ' .conversation-messages').html('');
				loadPreviousTextMessages( $( this ), strChatRoom, $( this ).data( 'application-id' ), true );
				var strMyChatRooms = sessionStorage.getItem( 'my_chat_rooms' );
				var arrMyChatRooms = ( null == strMyChatRooms || '' == strMyChatRooms ) ? [] : strMyChatRooms.split( ',' );
				if( -1 == $.inArray( strChatRoom, arrMyChatRooms ) ) {
					arrMyChatRooms.push( strChatRoom );
				}
				objChatPanel.setSessionStorage( 'my_chat_rooms', arrMyChatRooms.join() );
				$( '#sms-text-section #' + strChatRoom ).removeClass( 'hide' );
				$(this).addClass('my-room');
				$(this).addClass('loaded');
			} else {
				scrollConversationPage( strChatRoom );
			}

			if( true == objChatPanel.isLeasingCenterSmsChat ) {
				objChatPanel.lcChatInProgress( strChatRoom );
			} else {
				objEntrataXmppChat.acceptChat( strChatRoom );
			}
			objChatPanel.setSessionStorage( 'current_active_sms_chat_room', strChatRoom );
			objChatPanel.updateChatNoficationCount();
			EntrataChatPanel.deleteOtherUsersNotifications( strChatRoom, false );

			if( 0 < $('#sms-text-section #' + strChatRoom + ' #we_chat_templates').length ) {
				$('#sms-text-section #' + strChatRoom + ' .chat-text-area').show();
			}

			if( 0 < $('#sms-text-section #' + strChatRoom + ' #whatsapp_templates').length ) {
				$('#sms-text-section #' + strChatRoom + ' .chat-text-area').show();
			}

		} )
		.on( 'click', '.profile' , function() {
			loadApplication( $( this ).data( 'application-id' ), $( this ).data( 'customer_id' ), $( this ).data( 'lease_id' ), $( this ).data( 'campaign_target_id' ) );
		} )
		.on("click", '#sms-text-tab', function(){
			$( '.panel-title' ).text( $( this ).data( 'panel-title' ) );
			$("#sms-text-tab").addClass("selected");
			$("#chats-tab").removeClass("selected");
			$( '#all-chats' ).addClass("hide");
			$("#sms-text-section").removeClass("hide");
			$("#holla-back-section").addClass("hide");
			if( true == $( '#view-selected-properties' ).hasClass( 'hide' ) ) {
				$( '#sms-text-section .js-conversation-history .conversation-messages' ).removeClass( 'text-message-logged-in-properties' ).addClass( 'text-message' );
			} else {
				$( '#sms-text-section .js-conversation-history .conversation-messages' ).removeClass( 'text-message' ).addClass( 'text-message-logged-in-properties' );
			}

			objChatPanel.setSessionStorage( 'current_active_tab', 'sms-text-tab' );
		})
		.on( 'click', '#chats-tab', function(){
			$("#sms-text-tab").removeClass("selected");
			$("#chats-tab").addClass("selected");
			$( '#all-chats' ).removeClass( 'hide' );
			$("#sms-text-section").addClass("hide");
			$("#holla-back-section").addClass("hide");
			objChatPanel.setSessionStorage( 'current_active_tab', 'chats-tab' );
			if( true == $( '#view-selected-properties' ).hasClass( 'hide' ) ) {
				$( '#resume-chat-section .js-conversation-history .conversation-messages' ).removeClass( 'chats-logged-in-properties' );
			} else {
				$( '#resume-chat-section .js-conversation-history .conversation-messages' ).addClass( 'chats-logged-in-properties' );
			}
		} )
		.on('click', '.all-online-chats #unclaimed_chats-tab', function(){
			$( '.tabs-menu li' ).removeClass( 'selected' );
			$( this ).addClass( 'selected' );
			$(".chat-messages-container").addClass("hide");
			$("#unclaimed-chats").removeClass("hide");
			objChatPanel.setSessionStorage( 'current_active_sub_tab', 'unclaimed_chats-tab' );
		})
		.on('click', '.all-online-chats #active-chats-tab', function(){
			$( '.tabs-menu li' ).removeClass( 'selected' );
			$( this ).addClass( 'selected' );
			$(".chat-messages-container").addClass("hide");
			$("#active-chats").removeClass("hide");
			objChatPanel.setSessionStorage( 'current_active_sub_tab', 'active-chats-tab' );
		})
		.on('click', '.all-online-chats #expire-chats-tab', function(){
			$( '.tabs-menu li' ).removeClass( 'selected' );
			$( this ).addClass( 'selected' );
			$(".chat-messages-container").addClass("hide");
			$("#expired-chats").removeClass("hide");
			objChatPanel.setSessionStorage( 'current_active_sub_tab', 'expire-chats-tab' );
		})
		.on('click', '.all-online-chats #ongoing-property-chats-tab', function() {
			$('.chat-messages-container').addClass('hide');
			$('.online-chats-tab').removeClass('selected');
			$('#ongoing-property-chats').removeClass('hide');
			$(this).addClass('selected');
			objChatPanel.setSessionStorage( 'current_active_sub_tab', 'ongoing-property-chats-tab' );
		})
		.on('click', '#select-all-property', function() {

			if( true == $(this).prop('checked') ) {
				$('#chat-inner-content .chat-messages').removeClass('hide');
				updatePropertiesSessionStorage( 'all', 'add' );
			} else {
				if( true == $('#chat-inner-content #available-toggle-switch').find('input').val() ) {
					showMessage( 'error', 'Please select at least one property or make yourself Unavailable for chat.', 'chat_panel_msg' );
					return false;
				}
				$('#chat-inner-content .chat-messages').addClass('hide');
				updatePropertiesSessionStorage( 'all', 'remove' );
			}
			$('#chat-inner-content #property-container .property').prop( 'checked', $(this).prop('checked') );
			clearTimeout( objChatPanel.sessionInterval );
			objChatPanel.sessionInterval = setTimeout( function(){ updateChatSessionData();
}, 3000 );
			updateChatNoficationCount();
		})
		.on('click', '#property-container .property', function() {
			if( 0 == $('#chat-inner-content').find('#chat-properties input[type=checkbox]:checked').length ) {
				showMessage( 'error', 'Please select at least one property or make yourself Unavailable for chat.', 'chat_panel_msg' );
				return false;
			}
			if( false == $(this).prop('checked') ) {
				var objChatContainer = $('#chat-inner-content .active-chat-messages .chat-messages[data-property_id=' + $(this).val() + ']' );
				objChatPanel.intCurrentUncheckedProperty = $(this).val();
				if( 0 < objChatContainer.length ) {
					checkForActiveChats( objChatContainer, $(this).val() );
				} else {
					$('#chat-inner-content #select-all-property').prop('checked', false );
					updatePropertiesSessionStorage( $( this ).val(), 'remove' );
					clearTimeout( objChatPanel.sessionInterval );
					objChatPanel.sessionInterval = setTimeout( function(){ updateChatSessionData();
}, 3000 );
				}
				$('#chat-inner-content #select-all-property').prop('checked', false );
				$('#chat-inner-content .chat-messages[data-property_id=' + $(this).val() + ']' ).addClass('hide');
				$('#chat-inner-content .text-section[data-property_id=' + $(this).val() + ']' ).addClass('hide');
				updatePropertiesSessionStorage( $(this).val(), 'remove' );
			} else {
				$('#chat-inner-content .chat-messages[data-property_id=' + $(this).val() + ']' ).removeClass('hide');

				if( $('#chat-inner-content #chat-properties input[type=checkbox]').length == $('#chat-inner-content #chat-properties input[type=checkbox]:checked').length ) {
					$('#chat-inner-content #select-all-property').prop('checked', true);
				}
				$('#chat-inner-content .text-section[data-property_id=' + $(this).val() + ']' ).removeClass('hide');
				updatePropertiesSessionStorage( $(this).val(), 'add' );
				clearTimeout( objChatPanel.sessionInterval );
				objChatPanel.sessionInterval = setTimeout( function(){ updateChatSessionData();
}, 3000 );
			}

			updateChatNoficationCount();
		})
		.on('click', '#view-props-arrow', function() {
			if( true == $('#view-selected-properties').hasClass('hide') ) {
				$('#view-selected-properties').removeClass('hide');
				if( 200 < $('#chat-properties').height() ) {
					$('#chat-properties').css({'height':'auto', 'max-height':'200px', 'overflow':'scroll', 'overflow-x':'hidden'});
				}
				if( true == $( '#sms-text-tab' ).hasClass( 'selected' ) ) {
					$( '#sms-text-section .js-conversation-history .conversation-messages' ).removeClass( 'text-message' ).addClass( 'text-message-logged-in-properties' );
				}
				if( true == $( '#chats-tab' ).hasClass( 'selected' ) ) {
					$( '#resume-chat-section .js-conversation-history .conversation-messages' ).addClass( 'chats-logged-in-properties' );
				}
			} else {
				$('#view-selected-properties').addClass('hide');
				if( true == $( '#sms-text-tab' ).hasClass( 'selected' ) ) {
					$( '#sms-text-section .js-conversation-history .conversation-messages' ).removeClass( 'text-message-logged-in-properties' ).addClass( 'text-message' );
				}
				if( true == $( '#chats-tab' ).hasClass( 'selected' ) ) {
					$( '#resume-chat-section .js-conversation-history .conversation-messages' ).removeClass( 'chats-logged-in-properties' );
				}
			}
		})
		.on('click', '#log-in-chat-button', function() {
			chatLogin();
		})
		.on('click', '#available-toggle-switch', function() {
			toggleAvailability( $(this) );
		});

		var strUrl = '/?module=entrata_chat_panelxxx&action=check_availability';

		if( true == objChatPanel.isLeasingCenterSmsChat ) {
			strUrl = strUrl + '&is_leasing_center_sms_chat=1';
		}

		psi.patterns.ajaxRequest( {
			type: 'POST',
			url: strUrl,
			dataType: 'json',
			success: function( objResponse ) {

				if( false == objResponse.data.allow_chats && false == objResponse.data.allow_texting ) {
					$('.js-launch-chat').parents('.action-icon').remove();
					return;
				}

				if( false == objResponse.data.allow_chats ) {
					$('#chat-inner-content').find('#chats-tab,#unclaimed-chats-tab,#unclaimed-chats,#active-chats-tab,#active-chats,.panel-title').remove();
					$('#sms-text-tab').trigger('click');
					boolIsAllowChats = false;
				}

				objChatPanel.setSessionStorage( 'is_allow_texting', 1 );
				if( false == objResponse.data.allow_texting ) {
					$( '#chat-inner-content' ).find( '#sms-text-section,#sms-text-tab' ).remove();
					boolIsAllowTexting = false;
					objChatPanel.setSessionStorage( 'is_allow_texting', 0 );
				}

				if( undefined === objResponse.data.is_available_for_chat || false == objResponse.data.is_available_for_chat ) {
					objChatPanel.setSessionStorage( 'is_available_for_chat', 0 );
				} else {
					objChatPanel.setSessionStorage( 'is_available_for_chat', 1 );
				}

				if( false == objChatPanel.isLeasingCenterSmsChat ) {
					var boolIsAvailableForChat = sessionStorage.getItem( 'is_available_for_chat' );

					if( 0 == boolIsAvailableForChat ) {
						$( '.js-launch-chat' ).html( strChatIcon + 'chat-disabled-icon"></use></svg>' );
					} else {
						if( 0 < $('#unclaimed-chats .unclaimed-chat').length ) {
							$( '.js-launch-chat' ).html( strChatIcon + 'chat-incoming-icon"></use></svg>' );
						} else {
							$( '.js-launch-chat' ).html( strChatIcon + 'chat-enabled-icon"></use></svg>' );
						}
					}
				}

				if( true == objChatPanel.isLeasingCenterSmsChat ) {
					$( '.js-launch-chat' ).html( strChatIcon + 'chat-disabled-icon"></use></svg>' );
				}
			}
		} );

		var boolIsOpenChatPanel = 0;

		if( false == objChatPanel.isLeasingCenterSmsChat && document.querySelector('.js-launch-chat') !== null ) {
			boolIsOpenChatPanel = sessionStorage.getItem( 'is_open_chat_panel' );
		} else if( true == objChatPanel.isLeasingCenterSmsChat ) {
			boolIsOpenChatPanel = 1;
		}

		if( 1 == boolIsOpenChatPanel ) {
			$(document).find('.js-launch-chat').trigger('click');
		} else if( false == $( '.chat-panel' ).hasClass( 'chat_loaded' ) ) {
			loadInnerContent( true );
		}

		window.onbeforeunload = function( event ) {
			$.each( arrmixIntervals, function( index, strChatRoom ) {
				clearInterval( arrmixIntervals[strChatRoom] );
			});

			$.each( arrmixAddToChatIntervals, function( index, strChatRoom ) {
				clearInterval( arrmixAddToChatIntervals[strChatRoom] );
			});
		}
	}

	function setSessionStorage( strKey, strValue ) {

		sessionStorage.setItem( strKey, strValue );
	}

	function loadInnerContent( boolIsPageReLoaded = false ) {
		$('#chat-panel-container').hide();

		psi.patterns.ajaxRequest( {
			type: 'POST',
			dataType: 'json',
			beforeSend: function() {
				psi.patterns.showLoadingImage( {strElementSelector: '.chat-panel'} );
			},
			url: '/?module=entrata_chat_panelxxx&action=load_chat',
			success: function( objResponse ) {

				var intConnectionInterval = setInterval( function() {
					if( 'undefined' != typeof objEntrataXmppChat && 'undefined' != typeof objEntrataXmppChat.getConnection() ) {
						clearInterval( intConnectionInterval );
						psi.patterns.removeLoadingImage( { strElementSelector: '.chat-panel' } );
					}
				}, 1000 );

				if( true == objResponse.data.hasOwnProperty( 'screen' ) && 'login' == objResponse.data.screen ) {
					$('#chat-inner-content').html( objResponse.data.content );
					if( 500 < $('#chat-properties').height() ) {
						$('#chat-properties').css({'height':'auto', 'max-height':'500px', 'overflow':'scroll', 'overflow-x':'hidden'});
					}
					$( '.js-launch-chat' ).html( strChatIcon + 'chat-disabled-icon"></use></svg>' );
					$('#chat-panel-container').show();
				} else {
					$('#chat-inner-content #view-selected-properties').html( objResponse.data.properties_layout_html );
					if( false == boolIsAllowChats ) {
						$('#chat-inner-content').find('#chats-tab,#unclaimed-chats-tab,#unclaimed-chats,#active-chats-tab,#active-chats,.panel-title').remove();
						$('#sms-text-tab').trigger('click');
					}

					if( false == boolIsAllowTexting ) {
						$('#chat-inner-content').find('#sms-text-section,#sms-text-tab').remove();
					}

					objChatPanel.setSessionStorage( 'chat_selected_properties', objResponse.data.selected_properties );

					var strNumberOfLeasingAgentsForChatRooms = sessionStorage.getItem('chatroom_leasing_agents_count');
					if( null != strNumberOfLeasingAgentsForChatRooms ) {
						objNumberOfLeasingAgentsForChatRooms = $.parseJSON( strNumberOfLeasingAgentsForChatRooms );
					}

					parseChat( objResponse.data.content );

					$( '.chat-panel' ).addClass( 'chat_loaded' );
					if( $('#chat-inner-content #chat-properties input[type=checkbox]').length == $('#chat-inner-content #chat-properties input[type=checkbox]:checked').length ) {
						$('#chat-inner-content #select-all-property').prop('checked', true);
					}

					var objAvailabilityToggleSwitch = $('#chat-inner-content #available-toggle-switch');
					if( "true" == objResponse.data.is_available || true == objResponse.data.is_available ) {
						objAvailabilityToggleSwitch.removeClass('off').addClass('on');
						objAvailabilityToggleSwitch.find('input').val(1);
						objAvailabilityToggleSwitch.find('span').html(__('Yes'));
						$('#chat-inner-content #chat-panel-inner-container').removeClass('hide');
					} else {
						$('#chat-inner-content #chat-panel-inner-container').addClass('hide');
					}

					if( '' != objActionItems ) {
						objActionItems.openTab.click();
						objActionItems.clickElement.click();
						objActionItems.showChat( objActionItems.chatRoomId );
					}

					objActionItems = '';
					objChatPanel.arrSelectedProperties = objResponse.data.selected_properties.split(',');
					$('#chat-panel-container').show();
					if( 200 < $('#chat-properties').height() ) {
						$('#chat-properties').css({'height':'auto', 'max-height':'200px', 'overflow':'scroll', 'overflow-x':'hidden'});
					}
				}
				var strCurrentActiveTab = sessionStorage.getItem('current_active_tab');
				var strCurrentActiveSubRoom = sessionStorage.getItem( 'current_active_sub_tab' );
				var strCurrentActiveSmsChatRoom = sessionStorage.getItem( 'current_active_sms_chat_room' );
				var strCurrentActiveChatRoom = sessionStorage.getItem( 'current_active_chat_room' );
				var strMyChatRooms = sessionStorage.getItem('my_chat_rooms');
				var arrMyChatRooms = ( null == strMyChatRooms || '' == strMyChatRooms ) ? [] : strMyChatRooms.split( ',' );
				$.each( arrMyChatRooms, function(index, strChatRoom ) {
					var objElm = $('.active-chat-messages .' + strChatRoom );
					if( 0 < objElm.length ) {
						$('.active-chat-messages .' + strChatRoom).find('.resume-chat-button').trigger('click');
						$('#active-chats #' + strChatRoom).find('.back-to-active-chats').trigger('click');
					}
				} );

				if( null != strCurrentActiveTab ) {
					$('#' + strCurrentActiveTab).trigger('click');
				}

				if( null != strCurrentActiveSubRoom ) {
					$('#' + strCurrentActiveSubRoom).trigger('click');
				}

				if( false === boolIsPageReLoaded && null != strCurrentActiveSmsChatRoom ) {
					$( '.sms-text-messages .' + strCurrentActiveSmsChatRoom ).trigger( 'click' );
				}

				if( null != strCurrentActiveChatRoom ) {
					$('.unclaimed-chat-messages .' + strCurrentActiveChatRoom).find('.start-chat-button').trigger('click');
					$('.active-chat-messages .' + strCurrentActiveChatRoom).find('.resume-chat-button').trigger('click');
				}

				var strJidUsernameAssociations = sessionStorage.getItem('jid_username_association');
				if( null != strJidUsernameAssociations ) {
					objJidUserNameAssociations = $.parseJSON( strJidUsernameAssociations )
				}
			}
		} );
	}

	function initChat() {
		$("#end-chat").on("click", function(){
			$("#resume-chat-section").addClass("hide");
			$("#active-chats").removeClass("hide");
		});
	}

	function initText() {
		$("#back-to-texts").on("click", function(){
			$("#sms-text-section").removeClass("hide");
			$("#holla-back-section").addClass("hide");
		});
	}

	function loadPreviousTextMessages( objThisElement, strChatRoomJid, intApplicationId ) {
		var intMessageAggregatorId = $( ".sms-text-messages" ).find( "." + strChatRoomJid ).attr( "data-message-aggregator-id" );
		var intApplicantId = $( ".sms-text-messages" ).find( "." + strChatRoomJid ).attr( "data-applicant-id" );
		var intCustomerId = $( ".sms-text-messages" ).find( "." + strChatRoomJid ).attr( "data-customer-id" );
		var intPropertyId = $( ".sms-text-messages" ).find( "." + strChatRoomJid ).attr( "data-property_id" );

		// Fetch past chat history for Lead/Resident OR campaign using intMessageAggregatorId
		var objData = {
			'application_id': intApplicationId,
			'message_aggregator_id': intMessageAggregatorId,
			'applicant_id': intApplicantId,
			'customer_id': intCustomerId,
			'property_id': intPropertyId
		};

		if( 'smsc' === strChatRoomJid.split( '_' )[0] ) {
			objData = {
				'campaign_target_id': strChatRoomJid.split( '_' )[3],
				'message_aggregator_id': intMessageAggregatorId,
				'property_id': intPropertyId
			};
		}

		psi.patterns.showLoadingImage( {
			strElementSelector: "#" + strChatRoomJid
		} );

		psi.patterns.ajaxRequest( {
			url: '/?module=sms_chatxxx&action=load_previous_messages',
			data: objData,
			success: function( objResult ) {
				$('#sms-text-section').find('#' + strChatRoomJid ).find('.js-conversation-history .conversation-messages').html('');
				psi.patterns.removeLoadingImage( {
					strElementSelector: "#" + strChatRoomJid
				} );

				if( 0 === Object.keys( objResult.data ).length ) {
					$( objThisElement ).removeClass( "js-load-messages" ).addClass( "js-load-previous-messages" );
					// If previous chat data not found then load the template to initiate the chat by Property Manager
					var intMessageAggregatorId = $( ".sms-text-messages" ).find( "." + strChatRoomJid ).attr( "data-message-aggregator-id" );
					if( MESSAGE_AGGREGATOR_WHATSAPP == intMessageAggregatorId ) {
						loadChatAggregator( strChatRoomJid, intMessageAggregatorId, 0, false, true );
						objThisElement.addClass( 'loaded' );
					} else {
						return true;
					}
				} else {
					var intIsStopMessage = 0;
					loadPreviousTextMessages.boolIsStopped = false;
					var strLastMessage = '';
					var intCountIterations = 0;
					var intMessageTime = 0;
					var boolIsChatSessionExpired = false;
					var intMessageAggregatorId = 2;
					var boolIsWhatsAppTemplateMessage = false;
					var strMessage = '';
					var intTime    = '';
					var boolIsFromProspect = '';
					var strSenderName = '';
					$.each( objResult.data, function( intIndex, objItem ) {
						var strClass = "entrata";
						intMessageAggregatorId = 2;
						strSenderName = objItem.sender_name;
						if( null != objItem.message_aggregator_id ) {
							strClass += ' messageAggregator_' + objItem.message_aggregator_id;
						}
						strMessage = objItem.msg;
						intTime = objItem.time;
						boolIsFromProspect = objItem.is_from_prospect;
						var strMessageId = objItem.id;
						var boolIsStopMessage = false;
						strLastMessage = strMessage;
						intCountIterations++;

						// TODO : need to remove once time is send from PP side
						if( null === intTime ) {
							intTime = getCurrentUtcTime();
						}

						if( 1 == intIsStopMessage ) {
							boolIsStopMessage = true;
							intIsStopMessage = 0;
						}

						if( true == boolIsFromProspect ) {
							var strApplicantName = $( objThisElement ).data( 'applicant-name' ).split( ' ' );
							strSenderName = __( '{%s,0}: ', [strApplicantName[0]] );
							if( 0 < $( objThisElement ).data( 'applicant-name' ).search( 'SMS' ) ) {
								strSenderName = __( '{%s,0}: ', [$( objThisElement ).data( 'applicant-name' ).split( 'SMS' )[0]] );
							}
							if( 0 < $( objThisElement ).data( 'applicant-name' ).search( 'WHATSAPP' ) ) {
								strSenderName = __( '{%s,0}: ', [$( objThisElement ).data( 'applicant-name' ).split( 'WHATSAPP' )[0]] );
							}

							strClass = "user";
							loadPreviousTextMessages.boolIsStopped = false;
							if( null != strMessage && "stop" === strMessage.toLowerCase() ) {
								intIsStopMessage = 1;
							}
						}

						if( false == $( "#" + strChatRoomJid + ' .js-conversation-history' ).find( '.we_chat_template' ).hasClass( 'hide' ) ) {
							$( "#" + strChatRoomJid + ' .js-conversation-history' ).find( '.we_chat_template' ).addClass( 'hide' );
						}

						if( false == $( "#" + strChatRoomJid + ' .js-conversation-history' ).find( '.whatsapp_template' ).hasClass( 'hide' ) ) {
							$( "#" + strChatRoomJid + ' .js-conversation-history' ).find( '.whatsapp_template' ).addClass( 'hide' );
						}

						if( MESSAGE_AGGREGATOR_WECHAT == objItem.message_aggregator_id ) {
							intMessageAggregatorId = objItem.message_aggregator_id;
							$( ".sms-text-messages" ).find( "." + strChatRoomJid ).attr( "data-message-aggregator-id", objItem.message_aggregator_id );
						}

						if( MESSAGE_AGGREGATOR_WHATSAPP == $( ".sms-text-messages" ).find( "." + strChatRoomJid ).attr( "data-message-aggregator-id" ) ) {
							intMessageAggregatorId = MESSAGE_AGGREGATOR_WHATSAPP;
						}

						if( MESSAGE_AGGREGATOR_WHATSAPP == objItem.message_aggregator_id ) {
							boolIsWhatsAppTemplateMessage = ('true' == objItem.is_whatsapp_template_message);
						}

						boolIsChatSessionExpired = ( MESSAGE_AGGREGATOR_WHATSAPP == intMessageAggregatorId && true == objItem.chat_session_expired );

						/* intMessageTime is used to manage session depending on who initiated the chat(Prospect or Leasing agent)*/
						if( true == boolIsFromProspect || MESSAGE_AGGREGATOR_WECHAT == objItem.message_aggregator_id ) {
							intMessageTime = intTime;
						}

						var options = {
							strMessage: strMessage,
							strChatRoomJid: strChatRoomJid,
							strClass: strClass,
							intTime: intTime,
							strMessageId: strMessageId,
							isStopMessage: boolIsStopMessage,
							intMessageAggregatorId: objItem.message_aggregator_id,
							isUpdatedTimer: false,
							strPropertyName: objItem.property_name,
							is_from_prospect: boolIsFromProspect,
							sender:objItem.sender_full_name,
							msg_status:objItem.msg_status
						};
						EntrataChatPanel.postMessageInConversationDiv( options, false );
					} );

					var strDateTimeLabel   = EntrataChatPanel.calculateTime( intTime );
					objThisElement.find( '.text-alert-message' ).html( __( '{%s,0} <span class="text-message">{%s,1}</span>', [strSenderName, objChatPanel.truncateChatMessage( strMessage )] ) );
					objThisElement.find( '.messaged-time' ).html( __( '{%s,0}', [strDateTimeLabel] ) );

					loadChatAggregator( strChatRoomJid, intMessageAggregatorId, intMessageTime, boolIsWhatsAppTemplateMessage, boolIsChatSessionExpired );

					if( true === loadPreviousTextMessages.boolIsStopped ) {
						$( "#" + strChatRoomJid ).find( ".endConversation,.enterSmsMessage" ).remove();
						EntrataChatPanel.updateSmsNotification( '', strChatRoomJid, false, true );
						objEntrataChat.updateChatCount();
					}

					if( 0 < strLastMessage.search( "ou have successfully opted out" ) || 0 < strLastMessage.search( "'ve opted out of" ) ) {
						$( "#" + strChatRoomJid ).find( ".chat-actions .chat-text-area" ).css( 'display','none' );
						$( "#" + strChatRoomJid ).find( ".chat-actions .js-send-tools" ).css( 'display','none' );
						EntrataChatPanel.updateSmsNotification( '', strChatRoomJid, false, true );
					}

					objThisElement.addClass('loaded');
				}
			}
		} );
	}

	function loadChatAggregator( strChatRoomJid, intMessageAggregatorId, intMessageTime, boolIsWhatsAppTemplateMessage, boolIsChatSessionExpired ) {
		var ChatAggregator = EntrataChatPanel.loadAggregator({
			strChatRoomJid: strChatRoomJid,
			intMessageAggregatorId: intMessageAggregatorId,
			intTime:intMessageTime,
			isTemplateMessage: boolIsWhatsAppTemplateMessage,
			isChatSessionTimeout: boolIsChatSessionExpired,
		});

		ChatAggregator.processMessage();
	}

	function parseChat( arrmixChatMessages ) {
		var strUnclaimedChatNode = '';
		var strActiveChatNode = '';
		var strExpiredChatNode = '';
		var strAllActiveChatNode = '';
		var strSmsTextNode = '';
		var intUnclaimedChatCount = 0;
		var intActiveChatCount = 0;
		var intAllActiveChatCount = 0;
		var intSmsTexCount = 0;
		var strMyChatRooms = sessionStorage.getItem('my_chat_rooms');
		var arrMyChatRooms = ( null == strMyChatRooms || '' == strMyChatRooms ) ? [] : strMyChatRooms.split( ',' );

		if( true == arrmixChatMessages.hasOwnProperty( 'unclaimed_chats' ) ) {
			$.each( arrmixChatMessages.unclaimed_chats, function( index, arrmixData ) {
				var strHideClass = '';

				if( false == checkIfPropertyExists( arrmixData.property_id.toString() ) ) {
					strHideClass = 'hide';
				} else {
					intUnclaimedChatCount++;
				}
				arrobjUnclaimedMessage[arrmixData.chat_room] = arrmixData;
				strUnclaimedChatNode = createUnclaimedNode( arrmixData, strHideClass, arrmixData.is_from_add_to_chat );
				$( '.unclaimed-chat-messages' ).prepend( strUnclaimedChatNode );
				var intCurrentTime = new Date().getTime();
				var intChatTime = new Date( arrmixData.chat_initialize_time ).getTime();

				var intSeconds = Math.floor( ( intCurrentTime - intChatTime ) / 1000 );
				var intMinutes = Math.floor( ( ( intCurrentTime - intChatTime ) / 1000) / 60 );
				var intTime = Math.floor(90 - ( intMinutes * 60 + intSeconds ));
				countDown( arrmixData.chat_room, intTime, arrmixData.is_from_add_to_chat, arrmixData.selected_leasing_agents );
			} );
		}
		if( true == arrmixChatMessages.hasOwnProperty( 'active_chats' ) ) {
			$.each( arrmixChatMessages.active_chats, function( index, arrmixData ) {
				var strHideClass = '';
				if( false == checkIfPropertyExists( arrmixData.property_id.toString() ) ) {
					strHideClass = 'hide';
				} else {
					intActiveChatCount++;
				}
				strActiveChatNode += createActiveChatNode( arrmixData, strHideClass );
			} );
		}

		if( true == arrmixChatMessages.hasOwnProperty( 'expired_tab' ) ) {
			$.each( arrmixChatMessages.expired_tab, function( index, arrmixData ) {
				var strHideClass = '';
				if( false == checkIfPropertyExists( arrmixData.property_id.toString() ) ) {
					strHideClass = 'hide';
				}
				createExpiredChatNode( arrmixData, strHideClass );
			} );
		}

		if( true == arrmixChatMessages.hasOwnProperty( 'all_active_chats' ) ) {
			$.each( arrmixChatMessages.all_active_chats, function( index, arrmixData ) {
				var strHideClass = '';
				if( false == checkIfPropertyExists( arrmixData.property_id.toString() ) ) {
					strHideClass = 'hide';
				} else {
					intAllActiveChatCount++;
				}
				strAllActiveChatNode += createOngoingPropertyChatNode( arrmixData, strHideClass );
			} );
		}

		if( true == arrmixChatMessages.hasOwnProperty('sms_text') ) {

			$.each( arrmixChatMessages.sms_text, function( index, arrmixData ) {

				var strHideClass = '';
				if( false == checkIfPropertyExists( arrmixData[0].property_id.toString() ) ) {
					strHideClass = 'hide exclude';
				}

				if( true == $('.sms-text-messages .my-texts').hasClass('selected') ) {
					strHideClass = 'hide';
				}

				//To avoid create duplicate chatRoom creation after attaching potential lead with existing lead/resident
				if( 0 < $( '.sms-text-messages .text-section[data-chat-room=' + arrmixData[0].chat_room + ']' ).length ) {
					return;
				}

				strSmsTextNode = createSmsTextNode( arrmixData[0], strHideClass );
				var objChatConversationElm = EntrataChatPanel.buildSmsConversationElement( arrmixData[0].chat_room, arrmixData[0], true );
				objChatConversationElm.appendTo( '#sms-text-section' );
				$( '.sms-text-messages' ).append( strSmsTextNode );
				if( MESSAGE_AGGREGATOR_WHATSAPP == arrmixData[0].message_aggregator_id ) {
					objChatPanelWhatsappTemplate.loadNotificationDetails( arrmixData[0].chat_room );
				}

				if( MESSAGE_AGGREGATOR_SMS == arrmixData[0].message_aggregator_id ) {
					objChatPanelSmsTemplate.loadNotificationDetails( arrmixData[0].chat_room );
				}
				var objElm = $( '.sms-text-messages .' + arrmixData[0].chat_room );
				loadPreviousTextMessages( objElm, arrmixData[0].chat_room, arrmixData[0].application_id );
				$( '.sms-text-messages .' + arrmixData[0].chat_room ).addClass( 'loaded' );
			} );

			if( 0 < arrMyChatRooms.length ) {
				$.each( arrMyChatRooms, function(index, strChatRoom ) {
					var objElm = $('.sms-text-messages .' + strChatRoom );
					if( 0 < objElm.length ) {
						var objElm = $( '.sms-text-messages .' + strChatRoom );
						loadPreviousTextMessages( objElm, strChatRoom, objElm.data( 'application-id' ) );
					}
				} );
			}
		}

		$( '.active-chat-messages' ).prepend( strActiveChatNode );
		$( '.ongoing-property-chat-messages' ).prepend( strAllActiveChatNode );

		$.each( arrMyChatRooms, function(index, strChatRoom ) {
			var objElm = $('.unclaimed-chat-messages .' + strChatRoom );
			if( 0 < objElm.length ) {
				strActiveChatNode = createActiveChatNode( arrmixChatMessages.unclaimed_chats[strChatRoom],'');
				$( '.active-chat-messages' ).prepend( strActiveChatNode );
				objElm.remove();
				clearInterval( arrmixIntervals[strChatRoom] );
				clearInterval( arrmixAddToChatIntervals[strChatRoom] );
			}
		} );

		if( 0 == sessionStorage.getItem( 'is_available_for_chat' ) ) {
			$( '.js-launch-chat' ).html( strChatIcon + 'chat-disabled-icon"></use></svg>' );
		} else {
			if( 0 == intUnclaimedChatCount || 0 == intActiveChatCount ) {
				$( '.js-launch-chat' ).html( strChatIcon + 'chat-enabled-icon"></use></svg>' );
			}

			if( 0 < intUnclaimedChatCount ) {
				$( '.js-launch-chat' ).html( strChatIcon + 'chat-incoming-icon"></use></svg>' );
			}
		}

		objChatPanel.updateChatNoficationCount();
	}

	function truncateChatMessage( strMessage ) {
		if( null == strMessage ) {
			return strMessage;
		}
		var strStrippedMessage = strMessage.replace( /(<([^>]+)>)/ig, '' );
		return ( 'undefined' == typeof strStrippedMessage || strStrippedMessage.length > 48 ) ? `${strStrippedMessage.substring( 0, 48 )}...` : strStrippedMessage;
	}

	function createActiveChatNode( arrmixData, strHideClass ) {
		EntrataChatPanel.buildConversationDetails( arrmixData.chat_room, arrmixData, false );
		var strMessage = '';
		var strDateTime = arrmixData.chat_initialize_time;
		var strHideGroup = 'hide';
		var strLeasingAgents = '';

		if( 'undefined' != typeof arrmixData.current_leasing_agents && '' != arrmixData.current_leasing_agents ) {
			strLeasingAgents = ' You, ' + arrmixData.current_leasing_agents;
			strHideGroup = '';
		}

		var	strGroupChat = '<span><svg viewBox="0 0 32 32" class="entrata-svg-icon fill- default"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#people-icon"></use></svg></span><span class=" pad5-top pad5-left current-leasing-agents">' + strLeasingAgents + '</span>';

		var strHtml = '<div class="margin20-top white nopad">' + '           <div class=" unclaimed-chat chat-messages ' + arrmixData.chat_room + '  ' + strHideClass + ' " data-chat-room="' + arrmixData.chat_room + '" data-property_id = "' + arrmixData.property_id + '" data-unique-id="' + arrmixData.unique_id + '" data-chat-initialize-time="' + arrmixData.chat_initialize_time + '             " data-application-id="' + arrmixData.application_id + '" data-applicant-name="' + arrmixData.applicant_name + '" data-property-name="' + arrmixData.property_name + '" data-event-id="' + arrmixData.event_id + '"> ' + '                <div class="title-card">' + '                   <div class="clearfix text-content resume-chat-button chats-loaded" data-chat-room-id="' + arrmixData.chat_room + '" data-application-id="' + arrmixData.application_id + '">' + '                     <h4 class="title bold text-dark-gray margin5-bottom"> ' + '                        <a class="profile margin5-right" data-application-id="' + arrmixData.application_id + '"><svg viewBox="0 0 32 32" class="entrata-svg-icon fill-blue large"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#guest-card-icon"></use></svg></a>' + arrmixData.applicant_name + '                        <span class="font10 nobold right">' + '                          <span class="text-green bold font10 chat-message-status highlight-green round-corners hide" style="padding:5px;">' + __( 'New' ) + '' + '                          </span>&nbsp; <svg viewBox="0 0 32 32" class="entrata-svg-icon fill- large"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#arrow-right-sm-icon"></use></svg>' + '                        </span>' + '                     </h4>' + '                     <p class="sub-text nomargin clearfix">' + '                       <span class="left italic"> ' + arrmixData.property_name + ' </span> ' + '                       <span class="group-chat-agents right ' + strHideGroup + '">' + strGroupChat + '</span> ' + '                      </p>' + '                     <p class=" latest-msg font12">' + strMessage + '</p>' + '                   </div>' + '                   <hr class="margin20-top margin15-bottom">' + '                </div>' + '        <input type="hidden" id="serialized_data" value = \'' + JSON.stringify(arrmixData) + '\'/>' + '           </div>';
		'         </div>';

		return strHtml;
	}

	function createExpiredChatNode( arrmixData, strHideClass, boolIsFromActive ) {

		if( 'undefined' == typeof boolIsFromActive ) {
			boolIsFromActive = false;
		}

		var strUsers = '<svg viewBox="0 0 32 32" class="entrata-svg-icon fill- default"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#person-icon"></use></svg>';
		var strTitle = 'Single Chat';
		if( 1 < arrmixData.users ) {
			strUsers = '<svg viewBox="0 0 32 32" class="entrata-svg-icon fill- default"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#people-icon"></use></svg>';
			var strTitle = 'Group Chat';
		}

		var strChatInitializeTime = new Date( arrmixData.chat_initialize_time * 1000 );

		var strHtml = '<div class="expired-chats chat-messages ' + arrmixData.chat_room + arrmixData.event_id + '-expired ' + strHideClass + ' margin20-top white nopad " data-property_id="' + arrmixData.property_id + '" data-chat-room="' + arrmixData.chat_room + '" data-event-id="' + arrmixData.event_id + '"> ' + '                <div class="title-card">' + '                   <div class="clearfix text-content" >' + '                     <h4 class="title bold text-dark-gray margin5-bottom"> ' + '                        <a class="profile margin5-right" data-application-id="' + arrmixData.application_id + '"><svg viewBox="0 0 32 32" class="entrata-svg-icon fill-blue large"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#guest-card-icon"></use></svg></a>' + '                        <span>' + arrmixData.applicant_name + '</span>' + '                        <span class="font10 nobold right">' + '                          <span class="text-green bold font10 chat-message-status highlight-green round-corners hide" style="padding:5px;">' + __( 'New' ) + '' + '                          </span>&nbsp; ' + strChatIcon + 'arrow-right-sm-icon"></use></svg>' + '                        </span>' + '                    </h4>' + '                    <p class="sub-text nomargin clearfix">' + '                       <span class="left italic">' + arrmixData.property_name + '</span>' + '                       <span class="right margin10-right lineheight-16" title="' + strTitle + '">' + strUsers + '</span>' + '                    </p>' + '                    <div class="expired-chats-multiple margin5-top">' + '                       <p class="seperate-expired-chats pointer" data-event-id="' + arrmixData.event_id + '" >' + __( 'Chat initiated on: {%t,0,DATETIME_ALPHA_MEDIUM}', [strChatInitializeTime] ) + '</p>' + '                    </div>' + '                   </div>' + '                   <hr class="margin15-bottom">' + '                </div>' + '           </div>';

		if( boolIsFromActive ) {
			$( '.expired-chat-messages' ).prepend( strHtml );
		} else {
			$( '.expired-chat-messages' ).append( strHtml );
		}

		buildExpiredChatConversation( arrmixData, boolIsFromActive );
	}

	function buildExpiredChatConversation( arrmixData, boolIsFromActive ) {
		var strChatConversation = '<div id="' + arrmixData.event_id + '" class="chat-history hide"></div>';

		if( 0 < $( '#expired-chat-conversations #' + arrmixData.chat_room + '-expired' ).length ) {
			var objNode = $( '#expired-chat-conversations #' + arrmixData.chat_room + '-expired' );
			objNode.find( '.js-conversation-history' ).prepend( strChatConversation );
		} else {
			var objExpiredConversationElement = $( '#expired_chat_template' ).clone();

			$( objExpiredConversationElement ).attr( 'id', arrmixData.chat_room + '-expired' );
			$( objExpiredConversationElement ).find( '.js-conversation-history' ).html( strChatConversation );
			$( objExpiredConversationElement ).find( '.chat-recipient' ).text( arrmixData.applicant_name );
			$( objExpiredConversationElement ).find( '.property-name' ).text( arrmixData.property_name );
			$( objExpiredConversationElement ).find( '.profile' ).attr( 'data-application-id', arrmixData.application_id );

			$( objExpiredConversationElement ).appendTo( '#expired-chat-conversations' );
		}
	}

	function createOngoingPropertyChatNode( arrmixData, strHideClass ) {
		EntrataChatPanel.buildConversationDetails( arrmixData.chat_room, arrmixData, false );
		var strMessage = '';
		var strType = '';
		var strHideJoin = '';
		if( 2 < arrmixData.current_leasing_agents.split(',').length ) {
			strHideJoin = 'hide';
		}
		var strHtml = '<div class="card-container white nopad pad10-top pad5-bottom chat-messages ' + strHideClass + ' " id="' + arrmixData.chat_room + '" data-property_id = "' + arrmixData.property_id + '">' + '        <div class="title-card">' + '          <div class="clearfix text-content">' + '            <h4 class="title bold text-dark-gray nomargin margin5-bottom">' + arrmixData.applicant_name + ' <span class="italic text-green bold right font12">' + strType + ' &nbsp;&nbsp;<a class="profile" data-application-id="' + arrmixData.application_id + '"><svg viewBox="0 0 32 32" class="right entrata-svg-icon fill-blue large"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#guest-card-icon"></use></svg></span></a></h4>' + '            <p class="font14 sub-text nomargin margin15-bottom">' + arrmixData.property_name + '</p>' + '           <div class="join-chat-button ' + strHideJoin + '" data-chat-room-id="' + arrmixData.chat_room + '" data-message-id="' + arrmixData.message_id + '"><a class="js-hide-button left button small-blue">' + __('Join Chat') + '</a></div> ' + '           <div class="right" style="margin-top:12px;"><span><svg viewBox="0 0 32 32" class="entrata-svg-icon fill- default group-icon"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#people-icon"></use></svg><span><span style="float:right;padding-top:4px;padding-left:6px;" class="current-leasing-agents italic">' + arrmixData.current_leasing_agents + '</span></div>' + '          </div>' + '        </div>' + '        <input type="hidden" id="serialized_data" value = \'' + JSON.stringify(arrmixData) + '\'/>' + '      </div>';

		return strHtml;
	}

	function createUnclaimedNode( arrmixData, strHideClass, boolIsFromAddToChat, strAgentsToAddToChat ) {
		var strMessage = '';
		var strDateTime = arrmixData.chat_initialize_time;
		EntrataChatPanel.buildConversationDetails( arrmixData.chat_room, arrmixData, true );

		if( 0 < $( '.unclaimed-chat-messages' ).find('.' + arrmixData.chat_room).length ) {
			$( '.unclaimed-chat-messages' ).find( '.' + arrmixData.chat_room ).remove();
		}

		var strHtml = '<div class="card-container white nopad pad10-top pad5-bottom unclaimed-chat chat-messages ' + arrmixData.chat_room + '  ' + strHideClass + ' " data-chat-room="' + arrmixData.chat_room + '" data-property_id = "' + arrmixData.property_id + '" data-unique-id="' + arrmixData.unique_id + '" data-chat-initialize-time="' + arrmixData.chat_initialize_time + '" data-application-id="' + arrmixData.application_id + '          " data-applicant-name="' + arrmixData.applicant_name + '" data-is-from-add-to-chat="' + boolIsFromAddToChat + '" data-leasing-agents-to-add="' + strAgentsToAddToChat + '" data-property-name="' + arrmixData.property_name + '" data-event-id="' + arrmixData.event_id + '"> ' + '             <div class="title-card">' + '                 <div class="clearfix text-content">' + '                     <h4 class="title bold text-dark-gray nomargin margin5-bottom">' + arrmixData.applicant_name + '<a class="profile" data-application-id="' + arrmixData.application_id + '"><svg viewBox="0 0 32 32" class="right entrata-svg-icon fill-blue large"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#guest-card-icon"></use></svg></a></h4>' + '                     <p class="font14 sub-text nomargin margin10-bottom">' + arrmixData.property_name + ' </p>' + '                      <div class="lineheight-24 ">' + '                       <span class="chat-time italic font11">Chat Expires in <span class="chat-time-detail"></span></span>' + '                       <div class="start-chat-button margin10-top" data-chat-room-id="' + arrmixData.chat_room + '">' + '                           <a class="js-hide-button text-white margin5-right button blue small"> ' + __('Start Chat') + '</a>' + '                       </div>' + '                      </div>' + '                 </div>' + '             </div>' + '        <input type="hidden" id="serialized_data" value = \'' + JSON.stringify(arrmixData) + '\'/>' + '          </div>';

		return strHtml;
	}

	function countDown( strChatRoomJid, intTime, boolIsFromAddToChat, strSelectedLeasingAgents ) {
		var objElm = $( "." + strChatRoomJid + " .chat-time" );
		if( true == boolIsFromAddToChat ) {
			countDownForAddToChat( strChatRoomJid, intTime, strSelectedLeasingAgents );
			return;
		}
		arrmixIntervals[strChatRoomJid] = setInterval( function() {
			// if the time is 0 then end the counter
			if( 0 >= intTime ) {
				EntrataChatPanel.endChatFromProspect( strChatRoomJid );

				if( $( '#chat_popup_' + strChatRoomJid ).length ) {
					objChatPanel.removeNotification( $( '#chat_popup_' + strChatRoomJid ) );
				}

				psi.patterns.ajaxRequest( {
					url: '/?module=entrata_chat_panelxxx&action=update_notification',
					data: { 'user_chat_room': strChatRoomJid }
				} );
				objChatPanel.updateChatNoficationCount();
				return;
			}
			var strMinutes = Math.floor( intTime / 60 );
			if( strMinutes < 10 ) strMinutes = "0" + strMinutes;
			var strSeconds = intTime % 60;
			if( strSeconds < 10 ) strSeconds = "0" + strSeconds;
			var strText = strMinutes + ':' + strSeconds;
			if( 60 >= intTime ) {
				objElm.addClass( 'text-red' );
			}
			objElm.find( '.chat-time-detail' ).html( strText );
			intTime--;
		}, 1000 );
	}

	function countDownForAddToChat( strChatRoomJid, intTime, strSelectingLeasingAgent ) {
		var objElm = $( "." + strChatRoomJid + " .chat-time" );
		arrmixAddToChatIntervals[strChatRoomJid] = setInterval(function( ) {
			// if the time is 0 then end the counter
			if( 0 >= intTime ) {
				if( 0 < $('.unclaimed-chat-messages .unclaimed-chat.' + strChatRoomJid ).length ) {
					var strSerializedData = $('.unclaimed-chat.' + strChatRoomJid ).find('#serialized_data').val();
					var arrmixData = JSON.parse( strSerializedData );
					var strAllActiveChatNode = objChatPanel.createOngoingPropertyChatNode( arrmixData, false );
					$( '.ongoing-property-chat-messages' ).prepend( strAllActiveChatNode );
					$('.unclaimed-chat-messages .unclaimed-chat.' + strChatRoomJid ).remove();
				}
				objChatPanel.updateChatNoficationCount();
				clearInterval( arrmixAddToChatIntervals[strChatRoomJid] );
				psi.patterns.ajaxRequest( {
					url: '/?module=entrata_chat_panelxxx&action=update_add_chat_expiration',
					data: { 'user_chat_room': strChatRoomJid, 'company_users_info': strSelectingLeasingAgent }
				} );
			}
			var intMinutes = Math.floor( intTime / 60 );
			if ( intMinutes < 10 ) intMinutes = "0" + intMinutes;
			var intSeconds = intTime % 60;
			if ( intSeconds < 10 ) intSeconds = "0" + intSeconds;
			var strText = intMinutes + ':' + intSeconds;
			if( 60 >= intTime ) {
				objElm.addClass( 'text-red' );
			}
			objElm.find( '.chat-time-detail' ).html( strText );
			intTime--;
		}, 1000);
	}

	function addCountDownTimer( strChatRoomId, strChatCreatedTime, strSelectLeasingAgents ) {
		var intCurrentTime = new Date().getTime();
		var intChatTime = new Date( strChatCreatedTime ).getTime();

		var strSeconds = Math.floor ( ( intCurrentTime - intChatTime ) / 1000 );
		var strMinutes = Math.floor( ( ( intCurrentTime - intChatTime ) / 1000) / 60 );
		var intTime = Math.floor( 90 - ( strMinutes * 60 + strSeconds ) );
		objChatPanel.countDownForAddToChat( strChatRoomId, intTime, strSelectLeasingAgents );
	}

	function loadProfile( intApplicationId ) {
		var intTime = 0;
		if( 0 < $( "body" ).find( ".modal-large" ).length ) {
			intTime = 500;
			psi.patterns.closeLargeDialog();
		}

		setTimeout( function() {
			psi.patterns.loadLargeDialog( {
				title: __('Guestcard Details'),
				strUrl: '?module=application_systemxxx&application[id]=' + intApplicationId
			} );
		}, intTime );
	}

	function createSmsTextNode( arrmixData, strHideClass ) {
		var strMessage = '';
		var strDateTime = '';
		var strStatus = '';
		var strRecipient = '';

		if( false == arrmixData.is_from_prospect ) {
			strRecipient = __('You: ');
		} else {
			if( true == arrmixData.hasOwnProperty( 'applicant_name' ) && null != arrmixData.applicant_name ) {
				var strApplicantName = arrmixData.applicant_name.split( ' ' );
				strRecipient = __( '{%s,0}: ', [strApplicantName[0]] );
				if( 0 < arrmixData.applicant_name.search( 'SMS' ) ) {
					strRecipient = __( '{%s,0}: ', [arrmixData.applicant_name.split( 'SMS' )[0]] );
				}
				if( 0 < arrmixData.applicant_name.search( 'WHATSAPP' ) ) {
					strRecipient = __( '{%s,0}: ', [arrmixData.applicant_name.split( 'WHATSAPP' )[0]] );
				}
			}
		}

		if( true == arrmixData.hasOwnProperty( 'message_receipt' ) && 'unread' == arrmixData.message_receipt ) {
			arrmixData.status = 'new';
		}

		var strReadClass = '';

		if( 'new' == arrmixData.status ) {
			strReadClass = 'unread';
		}

		strMessage = strRecipient + '<span class="text-message">' + truncateChatMessage( arrmixData.message ) + '</span>';
		var intTime = arrmixData.chat_initialize_time;
		var strDateTimeLabel   = EntrataChatPanel.calculateTime( intTime );
		var strStatus = '', strClassPad = '';

		if( 'new' == arrmixData.status ) {

			strStatus = __( 'New' );

			strClassPad = 'pad5';

		};

		var strChatIcon = '';
		switch( parseInt( arrmixData.message_aggregator_id ) ) {
			case MESSAGE_AGGREGATOR_WHATSAPP:
				strChatIcon = '<svg viewBox="0 0 32 32" class="entrata-svg-icon fill- default message-svg-icon" style="width: 25px;height: 25px;padding-top: 2px;"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#whatsapp-icon"></use></svg> ';
				break;

			case MESSAGE_AGGREGATOR_WECHAT:
				strChatIcon = '<svg viewBox="0 0 32 32" class="entrata-svg-icon fill- default message-svg-icon" style="width: 25px;height: 25px;padding-top: 2px; "><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#we-chat-icon"></use></svg> ';
				break;

			default:
				strChatIcon = '<svg viewBox="0 0 32 32" class="entrata-svg-icon fill- default message-svg-icon" style="width: 25px;height: 25px;padding-top: 2px;"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#chat-icon"></use></svg> ';
				break;

		}

		var strHtml = '<div class="text-node-' + arrmixData.chat_room + '">' + '           <span id="new-text-section" class="' + strReadClass + ' text-section pointer new-text-section ' + arrmixData.chat_room + ' ' + strHideClass + '" data-message-id="' + arrmixData.message_id + '" data-chat-room="' + arrmixData.chat_room + '" data-property_id = "' + arrmixData.property_id + '" data-applicant-name="' + arrmixData.applicant_name + '" data-property-name="' + arrmixData.property_name + '" data-application-id = "' + arrmixData.application_id + '" data-customer-id = "' + arrmixData.customer_id + '" data-applicant-id = "' + arrmixData.applicant_id + '"' + '            data-message-aggregator-id = "' + arrmixData.message_aggregator_id + '" data-expires-on="' + ( new Date( ( new Date( arrmixData.expires_on) ).toUTCString() ).getTime() / 1000) + '" data-lease-id="' + arrmixData.lease_id + '"data-wechat-open-id="' + arrmixData.wechat_open_id + '" >' + '               <div><h4 class="title bold text-dark-gray margin5-bottom"> ' + strChatIcon + '<span class="text-message-applicant-name">' + arrmixData.applicant_name + '</span>' + ' <span class="font10 nobold right">' + __( '<span class="messaged-time italic">{%s,0}</span>', [strDateTimeLabel] ) + ' &nbsp;' + '                   <span class="text-green bold font10 highlight-green round-corners text-message-status ' + strClassPad + '"> ' + strStatus + '</span> &nbsp; ' + '                    <svg viewBox="0 0 32 32" class="entrata-svg-icon fill- large"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#arrow-right-sm-icon"></use></svg>' + '                    </span>' + '                </h4>' + '           <p class="font12 margin5-bottom italic">' + arrmixData.property_name + '</p>' + '           <div class="margin10-bottom font12 text-alert-message">' + strMessage + '</div>' + '           <hr class="margin20-top margin15-bottom"></div>' + '           </span>' + '          </div>'

		return strHtml;
	}

	function buildConversion( arrData, objElm ) {
		$.each( arrData, function( index, data ) {
			var strChatBubble = getChatBubbleMessage( data );
			objElm.find('.js-conversation-history').prepend( strChatBubble );
		});
	}

	function getChatBubbleMessage( data ) {

		var strReport = '';
		var strMarginClass = 'right margin20-right';
		var strChatBubbleClass = 'chat-entrata';
		if( true == data.is_initiated_by_agent ) {
			strMarginClass = 'margin20-left';
			strChatBubbleClass = 'chat-bubble';
			//strReport = '<div class="align-right js-delivery-report"><i class="check-circle-lightgray"></div>';
		}

		var strChatBubble = '<div class="clearfix" id="' + data.message_id + '"><div class="' + strChatBubbleClass + '"><div class="body chat-body">' + data.message + '</div>' + strReport + '</div><div class="clearfix"></div></div><div class="clearfix"><div class="' + strMarginClass + ' font10 italic chat-date-time">' + __( 'Messaged: {%t,0,TIME_SHORT}', [data.chat_initialize_time] ) + '</div></div>';

		return strChatBubble;
	}

	function chatLogin() {
		if( 0 == $('#chat-inner-content #property-container .property:checked').length ) {
			$('#chat-inner-content #property-selection-checkboxes #error-msg').removeClass('hide').show().delay(3000).fadeOut(2000);
			return;
		}
		psi.patterns.ajaxRequest( {
			type: 'POST',
			url: '/?module=entrata_chat_panelxxx&action=chat_login',
			data: $('#form-chat-properties').serialize(),
			dataType: 'json',
			beforeSend: function() {
				psi.patterns.showLoadingImage( {strElementSelector: '.chat-panel'} );
			},
			success: function( objResponse ) {
				psi.patterns.removeLoadingImage( {strElementSelector: '.chat-panel'} );
				if( false == objResponse.status ) {
					$('#chat-inner-content #property-selection-checkboxes #error-msg').removeClass('hide').show().delay(3000).fadeOut(2000);
				} else {
					$('#chat-inner-content').html( objResponse.data.content );
					objChatPanel.setSessionStorage( 'chat_selected_properties', objResponse.data.property_ids );
					objChatPanel.setSessionStorage( 'is_available_for_chat', 1 );
					loadInnerContent(true);
				}
				EntrataChatPanel.initChatRequests();
				objEntrataXmppChat.setAvailableForChat( true );
				objEntrataXmppChat.setIsUserOnline( true );
			}
		} );
	}

	function toggleAvailability( objElm ) {

		if( '' == objConnection ) {
			return true;
		}

		var boolIsAvailable = ( true == objElm.hasClass('off') ) ? 1 : 0;
		if( 0 == boolIsAvailable ) {
			var objActiveChatDiv = $(".active-chat-messages .chat-messages:not('.hide')" );
			objChatPanel.boolIsFromAvailabilitytoggle = true;
			objChatPanel.setSessionStorage( 'chat_selected_properties', '' );
			if( 0 < objActiveChatDiv.length ) {
				$( '.js-launch-chat' ).html( strChatIcon + 'chat-disabled-icon"></use></svg>' );
				checkForActiveChats( objActiveChatDiv );
			} else {
				setUserAvailabilityStatus( boolIsAvailable );
			}
		} else {
			setUserAvailabilityStatus( boolIsAvailable );
		}
	}

	function updatePropertiesSessionStorage( mixPropertyId, strAction ) {
		var strChatSelectedProperties = sessionStorage.getItem( 'chat_selected_properties' );
		var arrSelectedProperties = ( null == strChatSelectedProperties || '' == strChatSelectedProperties ) ? [] : strChatSelectedProperties.split( ',' );

		switch( strAction ) {
			case 'add':
				if( 'all' == mixPropertyId ) {
					arrSelectedProperties = [];
					$('#chat-inner-content').find('#property-container .property').each(function() {
						arrSelectedProperties.push($(this).val());
					});
				} else if( -1 == $.inArray( mixPropertyId, arrSelectedProperties ) ) {
					arrSelectedProperties.push( mixPropertyId );
				}
				break;
			case 'remove':
				if( 'all' == mixPropertyId ) {
					arrSelectedProperties = [];
				} else {
					arrSelectedProperties = arrSelectedProperties.filter( function( value, index, arr ) {
						return value != mixPropertyId;
					} );
				}
				break;
		}

		objChatPanel.setSessionStorage( 'chat_selected_properties', arrSelectedProperties.join() );
	}

	function updateChatSessionData() {
		var boolIsSendRequest = false;
		var arrNewCheckedProperties = [];
		$('#chat-inner-content').find('#chat-properties input[type=checkbox]:checked').each( function(){
			arrNewCheckedProperties.push($(this).val());
		});

		if( 0 !== $(arrNewCheckedProperties).not(objChatPanel.arrSelectedProperties).length || 0 !== $(objChatPanel.arrSelectedProperties).not(arrNewCheckedProperties).length ) {
			boolIsSendRequest = true;
		}

		if( true == boolIsSendRequest ) {
			psi.patterns.ajaxRequest( {
				type: 'POST',
				url: '/?module=entrata_chat_panelxxx&action=update_chat_session_data&is_available=1',
				dataType: 'json',
				data: $('#form-chat-properties').serialize(),
				success: function( objResponse ) {
					objChatPanel.arrSelectedProperties = objResponse.data.selected_properties.split(',');
					objChatPanel.setSessionStorage( 'chat_selected_properties', objResponse.data.selected_properties );
				}
			} );
		}
	}

	function checkIfPropertyExists( intPropertyId ) {
		var strChatSelectedProperties = sessionStorage.getItem( 'chat_selected_properties' );
		var arrSelectedProperties = ( null == strChatSelectedProperties || '' == strChatSelectedProperties ) ? [] : strChatSelectedProperties.split( ',' );
		if( -1 == $.inArray( intPropertyId, arrSelectedProperties ) ) {
			return false;
		}
		return true;
	}

	function updateChatNoficationCount( boolIsNewMessage = false ) {
		var strNotification = '<span class="notification"></span>';
		var intNewChatCount = $(".unclaimed-chat-messages .chat-messages:not('.hide')").length;
		var intMyChatCount = $( ".active-chat-messages .chat-messages.unread" ).length;
		var intChatCount = intMyChatCount + intNewChatCount;
		var intSmsTextCount = $(".sms-text-messages .text-section.unread:not('.hide')").length;

		if( 0 >= $( '.unclaimed-chat-messages' ).length && 0 >= $( '.sms-text-messages' ).length ) {
			return false;
		}

		if( 0 == intChatCount ) {
			$('#chats-tab').find( '.notification' ).remove();
		}

		if( 0 == intNewChatCount ) {
			$( '#unclaimed_chats-tab' ).find( '.notification' ).remove();
		}

		if( 0 == intMyChatCount ) {
			$( '#active-chats-tab' ).find( '.notification' ).remove();
		}

		if( 0 == intSmsTextCount ) {
			$('#sms-text-tab').find( '.notification' ).remove();
		}

		if( 0 == sessionStorage.getItem( 'is_available_for_chat' ) ) {
			$( '.js-launch-chat' ).html( strChatIcon + 'chat-disabled-icon"></use></svg>' );
		} else if( 0 < intChatCount || 0 < intSmsTextCount || true == boolIsNewMessage ) {
			$( '.js-launch-chat' ).html( strChatIcon + 'chat-incoming-icon"></use></svg>' );
		} else {
			$( '.js-launch-chat' ).html( strChatIcon + 'chat-enabled-icon"></use></svg>' );
		}

		if( 0 < intNewChatCount ) {
			if( $('#unclaimed_chats-tab').find( '.notification' ).length ) {
				$('#unclaimed_chats-tab .notification').html( intNewChatCount );
			} else {
				$( '#unclaimed_chats-tab' ).find( 'a' ).append( '<span class="notification">' + intNewChatCount + '</span>' );
			}
		}

		if( 0 < intMyChatCount ) {
			if( $('#active-chats-tab').find( '.notification' ).length ) {
				$('#active-chats-tab .notification').html( intMyChatCount );
			} else {
				$( '#active-chats-tab' ).find( 'a' ).append( '<span class="notification">' + intMyChatCount + '</span>' );
			}
		}

		if( 0 < intChatCount ) {
			if( $('#chats-tab').find( '.notification' ).length ) {
				$('#chats-tab .notification').html( intChatCount );
			} else {
				$('#chats-tab').find( 'a' ).append( '<span class="notification">' + intChatCount + '</span>' );
			}
		}

		if( 0 < intSmsTextCount ) {
			if( $('#sms-text-tab').find( '.notification' ).length ) {
				$('#sms-text-tab .notification').html( intSmsTextCount );
			} else {
				$('#sms-text-tab').find( 'a' ).append( '<span class="notification">' + intSmsTextCount + '</span>' );
			}
		}
	}

	function addFlexWrapper() {
		if( '.' == this.entrata_class ) {
			this.entrata_class = '';
		}

		$( 'body' + this.entrata_class ).addClass( 'flex-entrata-wrapper' );

		$( '.flex-entrata-wrapper' ).append(
			'<div class="chat-panel"></div>'
		);

		$( '#chat-inner-content' ).appendTo( $( '.chat-panel' ) ).removeClass( 'hide' );
	}

	function deleteAndUpdateNotificationEntry( strChatRoom ) {

		objChatPanel.deleteChatNotificationEntry( [strChatRoom] );
	}

	// This function will delete the entry from notifications table
	function deleteChatNotificationEntry( arrstrChatRooms ) {

		psi.patterns.ajaxRequest( {
			url: '/?module=entrata_chat_panelxxx&action=delete_notification',
			data: { 'chat_rooms': arrstrChatRooms }
		} );
		return;
	}

	function updateNotificationAfterAttach( intCampaignTargetId, intApplicationId, intCustomerId, intPropertyId ) {
		var strCurrentActiveChatRoom = sessionStorage.getItem( 'current_active_sms_chat_room' );
		psi.patterns.ajaxRequest( {
			url: '/?module=entrata_chat_panelxxx&action=update_notification_after_attach',
			data: { 'campaign_target_id': intCampaignTargetId, 'application_id': intApplicationId, 'customer_id': intCustomerId, 'property_id': intPropertyId, 'chat_room': strCurrentActiveChatRoom },
			success: function( objResponse ) {
				var strActiveChatRoom = sessionStorage.getItem( 'current_active_sms_chat_room' );
				if( strActiveChatRoom == objResponse.data.old_chat_room ) {
					objChatPanel.setSessionStorage( 'current_active_sms_chat_room', objResponse.data.new_chat_room );
				}

				if( $( "#dashboard_unknown_leads_actions" ).length > 0 ) {
					$("#dashboard_unknown_leads_actions").dialog("close");
				}

				objChatPanel.reloadMessage();
			}
		} );
		return;
	}

	function reloadMessage() {
		$('.sms-text-messages').empty().removeClass('hide');
		$('#sms-text-section').find('.active_chat_conversations').remove();
		$( '.unclaimed-chat-messages' ).empty();
		$( '.active-chat-messages' ).empty();
		$('.ongoing-property-chat-messages').empty();
		$('.sms-text-messages').append( '<hr class="margin15-bottom" id="sms-text-options-hr">' );
		objChatPanel.loadInnerContent();
	}

	function setLeasingAgentName( $strName ) {
		strLeasingAgentName = $strName;
	}

	function setLeasingAgentFirstName( $strName ) {
		strLeasingAgentFirstName = $strName;
	}

	function setCurrentLeaseAgentId( intId ) {
		intCurrentLeasingAgentId = intId;
	}

	function showMessage( strMessageType, strMessage, strLocation) {
		var strMessageDiv = strLocation || 'alert_message';
		$('#' + strMessageDiv).html('<p class="alert ' + strMessageType + ' slim"><i></i>' + strMessage + '</p>');
		$('#' + strMessageDiv).show().delay(5000).fadeOut();
	}

	function scrollConversationPage( strChatRoomId ) {
		var objElm = $( "#" + strChatRoomId + ' .js-conversation-history .conversation-messages' );
		if( !objElm[0] ) return true;
		objElm[0].scrollTop = objElm[0].scrollHeight;
		return true;
	}

	function loadApplication( intApplicationId, intCustomerId, intLeaseId, intCampaignTargetId ) {
		var intTime = 0;
		if( 0 < $( "body" ).find( ".modal-large" ).length ) {
			intTime = 500;
			psi.patterns.closeLargeDialog();
		}

		if( undefined !== intApplicationId && undefined == intLeaseId && null !== intApplicationId ) {
			setTimeout( function() {
				psi.patterns.loadLargeDialog( {
					title: __( 'Lead/Applicant Information' ),
					strUrl: '/?module=application_systemxxx&application[id]=' + intApplicationId
				} );
			}, intTime );
		} else if( ( undefined !== intCustomerId && undefined !== intLeaseId ) && ( null !== intCustomerId && null !== intLeaseId ) ) {
			setTimeout( function() {
				psi.patterns.loadLargeDialog( {
					title: __( 'Resident Information' ),
					strUrl: '/?module=customerxxx&lease[id]=' + intLeaseId + '&customer[id]=' + intCustomerId
				} );
			}, intTime );
		} else if( undefined !== intCampaignTargetId && null !== intCampaignTargetId ) {
			psi.patterns.loadDialog( {
				title: __( "Review Unknown Lead" ),
				strContentId: "dashboard_unknown_leads_actions",
				strUrl: '/?module=dashboard_leads_unknown_leadxxx&action=review_dashboard_unknown_SMS_lead_actions&campaign_target[id]=' + intCampaignTargetId,
				width: 900,
				height: 600,
				onCloseCallback: function() {
					if( jQuery.type( psi.objDashboard ) == "object" ) {
						psi.objDashboard.reloadCurrentTab( 'dashboard_leads_potential_leads_table' );
					}
				}
			} );
		} else {
			setTimeout( function() {
				psi.patterns.loadLargeDialog( {
					title: __( 'Guestcard Details' ),
					strUrl: '?module=application_systemxxx&application[id]=' + intApplicationId
				} );
			}, intTime );
		}
	}

	function setUserAvailabilityStatus( boolIsAvailable ) {

		if( true == $('#available-toggle-switch' ).hasClass('do-not-refresh') ) {
			$('#available-toggle-switch' ).removeClass('do-not-refresh');
			objEntrataXmppChat.setAvailableForChat( true );
			objEntrataXmppChat.setIsUserOnline( true );
			return;
		}
		psi.patterns.ajaxRequest({
			type: 'POST',
			url: '/?module=entrata_chat_panelxxx&action=update_chat_session_data&is_available=' + boolIsAvailable,
			beforeSend: function() {
				psi.patterns.showLoadingImage( {strElementSelector: '.chat-panel'} );
			},
			success: function( objResponse ) {
				psi.patterns.removeLoadingImage( {strElementSelector: '.chat-panel'} );
				objChatPanel.setSessionStorage( 'is_available_for_chat', boolIsAvailable );

				if( 0 == boolIsAvailable ) {
					$('#chat-inner-content #chat-panel-inner-container').addClass('hide');
					$( '.js-launch-chat' ).html( strChatIcon + 'chat-disabled-icon"></use></svg>' );
					objEntrataXmppChat.setAvailableForChat( false );
					objEntrataXmppChat.setIsUserOnline( false );
				} else {
					$( '.js-launch-chat' ).html( strChatIcon + 'chat-enabled-icon"></use></svg>' );
					$('.sms-text-messages').empty().removeClass('hide');
					$('#sms-text-section').find('.active_chat_conversations').remove();
					$( '.unclaimed-chat-messages' ).empty();
					$( '.active-chat-messages' ).empty();
					$('.ongoing-property-chat-messages').empty();
					$('.expired-chat-messages').empty();

					$('.sms-text-messages').append( '<hr class="margin15-bottom" id="sms-text-options-hr">' );
					objChatPanel.loadInnerContent();
					objEntrataXmppChat.setAvailableForChat( true );
					objEntrataXmppChat.setIsUserOnline( true );
				}
			}
		});
	}

	function checkForActiveChats( objChatContainer ) {
		objChatPanel.arrChatRoomsToTransfer = [];
		objChatPanel.arrOngoingChatRooms    = [];
		var boolIsTransferRequired          = false;
		objChatContainer.each( function() {
			if( 2 > EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( $(this).data('chat-room') ) ) {
				objChatPanel.arrChatRoomsToTransfer.push( $( this ).data( 'chat-room' ) );
				boolIsTransferRequired = true;
			} else {
				objChatPanel.arrOngoingChatRooms.push( $( this ).data( 'chat-room' ) );
			}
		} );
		if( false == boolIsTransferRequired ) {
			$.each( objChatPanel.arrOngoingChatRooms, function( index, value ) {
				$('#resume-chat-section #' + value + ' .endChat').trigger('click');
				$('#ongoing-property-chats #' + value ).remove();
				delete objChatPanel.strUserChatRooms[value];
			} );
			if( true == objChatPanel.boolIsFromAvailabilitytoggle ) {
				setUserAvailabilityStatus( 0 );
				objChatPanel.boolIsFromAvailabilitytoggle = false;
			} else if( true == objChatPanel.boolIsFromLogout ) {
				setTimeout( function() {
					sessionStorage.clear();
					window.location = '/?module=authentication&action=logout';
				}, 500 );
			}
			updateChatSessionData();
		} else {
			boolIsFromHistoricalAccess = 0;
			if( "undefined" !== typeof objElement && true === objElement.hasClass( "js-active_chat" ) && "show_historical_properties" === objElement.attr( "id" ) ) {
				boolIsFromHistoricalAccess = 1;
			}

			psi.patterns.loadDialog( {
				width: 600,
				height: 275,
				title: __('Chat Availability'),
				strContentId: 'availableToggle',
				strUrl: '/?module=entrata_chat_panelxxx&action=view_transfer_chat&is_historical_access=' + boolIsFromHistoricalAccess,
				data: { active_chats: objChatContainer.length, chat_rooms: objChatPanel.arrChatRoomsToTransfer.join(',') },
				onCloseCallback: function() {
					var intActiveChats = $(".active-chat-messages .chat-messages:not('.hide')" ).length;
					objChatPanel.setSessionStorage( 'is_open_chat_panel', 0 );
					if( ( true == objChatPanel.boolIsTransferChat && true == objChatPanel.boolIsFromLogout && true == objChatPanel.boolIsChatTransferred ) || ( true == objChatPanel.boolIsFromLogout && objChatPanel.boolIsEndChat ) ) {
						sessionStorage.clear();
						$( '#available-toggle-switch' ).removeClass('on').addClass( 'off' );
						window.location = '/?module=authentication&action=logout';
					} else if( true == objChatPanel.boolIsFromAvailabilitytoggle && true == objChatPanel.boolIsEndChat ) {
						setUserAvailabilityStatus( 0 );
					} else if( 0 < objChatContainer.length && false == objChatPanel.boolIsChatTransferred && false == objChatPanel.intCurrentUncheckedProperty ) {
						if( false == $( '#available-toggle-switch' ).hasClass( 'on' ) ) {
							$( '.js-launch-chat' ).html( strChatIcon + 'chat-enabled-icon"></use></svg>' );
							$( '#available-toggle-switch' ).addClass('do-not-refresh');
							$( '#available-toggle-switch' ).trigger('click');
						}
					} else if( false != objChatPanel.intCurrentUncheckedProperty && false == objChatPanel.boolIsEndChat && false == objChatPanel.boolIsChatTransferred ){
						$('#chat-properties').find('input[type=checkbox][value=' + objChatPanel.intCurrentUncheckedProperty + ']' ).trigger('click');
						objChatPanel.intCurrentUncheckedProperty = false;
					}
					objChatPanel.boolIsFromAvailabilitytoggle = false;
					objChatPanel.boolIsEndChat                = false;
					objChatPanel.boolIsFromLogout = false;
					objChatPanel.boolIsTransferChat = false;
					objChatPanel.boolIsChatTransferred = false;
				}
			} );
		}
	}

	function transferOrEndChat( boolIsFromLogout, boolIsHistoricalAccess, arrstrLeasingAgents, arrSelectedUsers ) {
		psi.patterns.showLoadingImage( {
			strElementSelector: "#availableToggle"
		} );

		var intTransferCount = 0,
			intNonTransferCount = 0,
			arrstrTransferChatRoomDetails = {},
			strChatTime = '';

		psi.patterns.ajaxRequest( {
			url: '/?module=entrata_notificationxxx&action=get_current_time',
			success: function( strResponse ) {
				var arrResult = JSON.parse( strResponse );
				strChatTime = arrResult.data;
			}
		} );

		var arrintCompanyUserIds = [];
		$.each( arrstrLeasingAgents, function( strChatRoom, arrstrLeasingAgentJids ) {
			var objChatCard = $( '.active-chat-messages .' + strChatRoom );
			var strChatFileName = localStorage.getItem( strChatRoom ),
				strApplicantName = objChatCard.data( "applicant-name" ),
				arrstrChatRoomDetails = strChatRoom.split( '_' );

			var strPropertyName = objChatCard.data( "property-name" );
			var intEventId = objChatCard.data( "event-id" );
			var strChatInitializeTime = strChatTime;
			var boolIsTransferChatRoom = false;
			if( 2 > EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( strChatRoom ) ) {
				objChatPanel.arrChatRoomsToTransfer.push( strChatRoom );
				boolIsTransferChatRoom = true;
			} else {
				objChatPanel.arrOngoingChatRooms.push( strChatRoom );
			}
			var objReason = {
				application_id: arrstrChatRoomDetails[3],
				cid: arrstrChatRoomDetails[1],
				chat_room: strChatRoom,
				leasing_agent_name: strLeasingAgentName,
				applicant_name: strApplicantName,
				file_name: strChatFileName,
				property_name: strPropertyName,
				event_id: intEventId,
				chat_initialize_time: strChatInitializeTime,
				property_id: objChatCard.data( "property_id" ),
				transfer_chat: true,
			};
			if( true == arrstrLeasingAgentJids['can_transfer'] && true == boolIsTransferChatRoom) {
				var arrLeasingAgentJidsToTransfer = [];
				for( var key in arrstrLeasingAgentJids ) {
					if( -1 < $.inArray( parseInt( key ), arrSelectedUsers ) ) {
						arrLeasingAgentJidsToTransfer.push( arrstrLeasingAgentJids[key] );
					}
				}
				objReason.selected_leasing_agents = arrLeasingAgentJidsToTransfer;
				if( 0 < Object.keys( arrstrLeasingAgentJids ).length && true == objEntrataXmppChat.transferChat( strChatRoom, arrstrLeasingAgentJids, objReason ) ) {
					arrintCompanyUserIds = [];
					$.each( arrstrLeasingAgentJids, function( mixResult, strUserJid ) {
						if( 'can_transfer' !== mixResult ) {
							arrintCompanyUserIds.push( Number( mixResult ) );
						}
					} );

					arrstrTransferChatRoomDetails[strChatRoom] = {
						company_user_ids: arrintCompanyUserIds,
						applicant_name: strApplicantName,
						property_name: strPropertyName,
						event_id: intEventId
					};
					intTransferCount++;

					sessionStorage.removeItem( "current_active_chat_room" );

					EntrataChatPanel.endChat( strChatRoom, false );
					objChatPanel.deleteAndUpdateNotificationEntry( strChatRoom );
				} else {
					EntrataChatPanel.endChat( strChatRoom, true );
				}
			} else if( false == arrstrLeasingAgentJids['can_transfer'] ) {
				EntrataChatPanel.endChat( strChatRoom, true );
			}
		} );
		if( 0 < objChatPanel.arrOngoingChatRooms.length ) {
			$.each( objChatPanel.arrOngoingChatRooms, function( index, value ) {
				$( '#resume-chat-section #' + value + ' .endChat' ).trigger( 'click' );
			} );
		}
		if( 0 !== intTransferCount ) {
			insertTransferNotifications( arrstrTransferChatRoomDetails );
		}

		$( "#availableToggle" ).dialog( "close" );
		if( "undefined" === typeof boolIsHistoricalAccess || 0 === boolIsHistoricalAccess ) {
			var strChatSelectedProperties = sessionStorage.getItem( 'chat_selected_properties' );
			if( (null == strChatSelectedProperties || '' == strChatSelectedProperties) ) {
				setUserAvailabilityStatus( 0 );
			}
		}
		objChatPanel.boolIsChatTransferred = true;
		$( "#availableToggle" ).dialog( "close" );

		return true;
	}

	function insertTransferNotifications( arrstrChatRoomDetails ) {

		psi.patterns.ajaxRequest( {
			url: '/?module=entrata_chat_panelxxx&action=insert_transfer_notifications',
			data: { chat_room_details: arrstrChatRoomDetails },
			success: function( response ) {
				objEntrataXmppChat.setAvailableForChat( ( true == $( '#available-toggle-switch' ).hasClass('off') ) );
				objEntrataXmppChat.setIsUserOnline( ( true == $( '#available-toggle-switch' ).hasClass('off') ) );
			}
		} );
	}

	function handleTransferErrorMessage( strErrorMsg ) {
		psi.patterns.removeLoadingImage( {
			strElementSelector: "#availableToggle"
		} );
		$( ".transfer-chat-message" ).html( '<p class="alert warning"><i></i>' + strErrorMsg + '</p>' );
		$( ".js-transfer-option" ).remove();
	}

	function bindLogoutEvent() {
		var objUserActions = $( "div#header div#cached-header" ).find("div#user");
		$('.js-logout').removeAttr('href');
		$('.js-logout').addClass('js-chat-logout');
		objUserActions.find( "ul li" ).on( "click", ".js-chat-logout", function( event ) {
			objChatPanel.boolIsFromLogout = true;
			event.preventDefault();

				var strMySmsChatRooms = sessionStorage.getItem( 'my_chat_rooms' );
				var intActiveChats = $( ".active-chat-messages .chat-messages:not('.hide')" ).length;
				if( ( true == objChatPanel.hasOwnProperty( 'strUserChatRooms' ) && 1 > objChatPanel.strUserChatRooms.length ) || 0 == intActiveChats ) {

					if( '' != strMySmsChatRooms && null != strMySmsChatRooms && "undefined" == typeof strMySmsChatRooms ) {
						var arrStrMySmsChatRooms = strMyChatRooms.split(',');
						$.each( arrStrMySmsChatRooms, function( strIndex, strChatRoom ) {
							EntrataChatPanel.endSmsChat( strChatRoom, true );
						} );
					}
					$('#available-toggle-switch').trigger( 'click' );
					if( $(this).hasClass( 'js-chat-logout' ) ) {
						setTimeout( function() {
							sessionStorage.clear();
							window.location = '/?module=authentication&action=logout';
						}, 500 );
					} else {
						enableOrDisableHistoricalProperties( true );
					}
				} else {
					var objActiveChatDiv = $(".active-chat-messages .chat-messages:not('.hide')" );
					checkForActiveChats( objActiveChatDiv );
				}

		});
	}

	function checkForActiveChatsBeforeLogout() {
		var objUserActions = $( "div#header div#cached-header" ).find("div#user");
		var objLogoutOption = objUserActions.find( "ul" ).find( "li a.js-chat-logout" ),
			objHistoricalAccess = objUserActions.find( "ul" ).find( "li a#show_historical_properties" );
		var strOngoingSmsChats = sessionStorage.getItem( 'my-chat-rooms' );
		if( ( 0 < objChatPanel.strUserChatRooms.length ) || ( '' != strOngoingSmsChats && null != strOngoingSmsChats ) ) {
			if( false === objLogoutOption.hasClass( 'js-active_chat' ) ) {
				objLogoutOption.addClass( "js-active_chat" );
			}
			if( false === objHistoricalAccess.hasClass( 'js-active_chat' ) ) {
				objHistoricalAccess.addClass( "js-active_chat" );
			}
		} else {
			if( true === objLogoutOption.hasClass( 'js-active_chat' ) ) {
				objLogoutOption.removeClass( "js-active_chat" );
			}
			if( true === objHistoricalAccess.hasClass( 'js-active_chat' ) ) {
				objHistoricalAccess.removeClass( "js-active_chat" );
			}
		}
		return true;
	}

	function handleInitiateResidentChat( options  ) {
		var objThis = this;
		var intCustomerId = options.intCustomerId,
			intPropertyId = options.intPropertyId,
			intLeaseId = options.intLeaseId,
			intMessageAggregatorId = options.intMessageAggregatorId,
			strElementSelector = options.strElementSelector,
			strErrorSelector = options.strErrorSelector;

		var strWeChatOpenId = options.strWeChatOpenId;
		var intCid = objEntrataXmppChat.strEntratChatRoomJid.split( '_' )[1];
		var strUrl = '/?module=sms_chatxxx&action=start_chat_from_resident_profile';

		psi.patterns.showLoadingImage( {
			strElementSelector: strElementSelector
		} );

		psi.patterns.ajaxRequest( {
			url: strUrl,
			data: { 'customer_id': intCustomerId, 'property_id': intPropertyId, 'lease_id': intLeaseId, 'message_aggregator_id': intMessageAggregatorId, 'wechat_open_id': strWeChatOpenId },
			success: function( objResponse ) {
				if( false === objResponse.data.success ) {
					$( '#smsChatErrorMessage' ).remove();
					var strErrorMessage = '<p id="smsChatErrorMessage" class="alert error slim">' + objResponse.data.message + '</p>';
					$( strErrorSelector ).html( strErrorMessage );
					$( strErrorSelector ).show().delay( 7000 ).fadeOut();
					psi.patterns.removeLoadingImage( {
						strElementSelector: strElementSelector
					} );
				} else {
					$( '#smsChatErrorMessage' ).remove();
					var strChatRoomJid = "sms_" + intCid + "_" + intPropertyId + "_" + objResponse.data.message.customer_id;

					setTimeout( function() {
						if( 0 < $( "#" + strChatRoomJid ).length ) {
							objChatPanel.showChat( {chat_room_jid: strChatRoomJid, application_id: objResponse.data.message.application_id, target_tab: $( '#sms-text-tab' ), message_aggregator_id: intMessageAggregatorId } );

							if( 'function' === typeof options.onSuccess ) {
								options.onSuccess();
							}
						}

						psi.patterns.removeLoadingImage( {
							strElementSelector: strElementSelector
						} );
					}, 3000 );

					if( 'function' === typeof options.onSuccess ) {
						options.onSuccess();
					}
				}
			}
		} );
	}

	function handleInitiateLeadChat( options ) {
		var intApplicantId = options.intApplicantId,
			intApplicationId = options.intApplicationId,
			intPropertyId = options.intPropertyId,
			strElementSelector = options.strElementSelector,
			strErrorSelector = options.strErrorSelector,
			intCustomerId = options.intCustomerId,
			intMessageAggregatorId = MESSAGE_AGGREGATOR_SMS;

		var boolIsWeChat           = ( true == options.boolIsWeChat ) ? true : false;
		var strWechatOpenId        = options.wechat_open_id;
		if( options.hasOwnProperty( 'intMessageAggregatorId' ) ) {
			intMessageAggregatorId = options.intMessageAggregatorId;
		}

		var intCid = objEntrataXmppChat.strEntratChatRoomJid.split( '_' )[1];
		var strChatRoomJid = "sms_" + intCid + "_" + intPropertyId + "_" + intCustomerId;
		var strUrl = '/?module=sms_chatxxx&action=start_chat_from_lead_profile';

		if( undefined != options.intCampaignTargetId ) {
			strChatRoomJid = "smsc_" + options.intCid + "_" + intPropertyId + "_" + options.intCampaignTargetId;

			strUrl = '/?module=sms_chatxxx&action=start_chat_from_potential_lead_dashboard'
		}

		if( 0 < $( "#" + strChatRoomJid ).length ) {
			objChatPanel.showChat( {
				chat_room_jid: strChatRoomJid,
				target_tab: $( '#sms-text-tab' ),
				message_aggregator_id: intMessageAggregatorId
			} );

			if( "function" == typeof options.onSuccess ) {
				options.onSuccess();
			}
		} else {
			var strDataAttributre = {
				'message_aggregator_id': intMessageAggregatorId,
				'applicant_id': intApplicantId,
				'application_id': intApplicationId,
				'property_id': intPropertyId,
				'is_wechat': boolIsWeChat,
				'wechat_open_id': strWechatOpenId,
				'customer_id': intCustomerId
			};
			if( undefined != options.intCampaignTargetId ) {
				strDataAttributre = { 'campaign_target_id': options.intCampaignTargetId, 'message_aggregator_id': intMessageAggregatorId };
			}
			psi.patterns.showLoadingImage( {
				strElementSelector: strElementSelector
			} );
			psi.patterns.ajaxRequest( {
				url: strUrl,
				data: strDataAttributre,
				success: function( objResponse ) {
					if( false === objResponse.data.success ) {
						$( '#smsChatErrorMessage' ).remove();
						var strErrorMessage = '<p id="smsChatErrorMessage" class="alert error slim">' + objResponse.data.message + '</p>';
						$( strErrorSelector ).html( strErrorMessage );
						$( strErrorSelector ).show().delay( 7000 ).fadeOut();
						psi.patterns.removeLoadingImage( {
							strElementSelector: strElementSelector
						} );
					} else {
						setTimeout( function() {
							$( '#smsChatErrorMessage' ).remove();
							if( "function" == typeof options.onSuccess ) {
								options.onSuccess();
							}
							objChatPanel.showChat( {
								chat_room_jid: strChatRoomJid,
								application_id: intApplicationId,
								target_tab: $( '#sms-text-tab' ),
								message_aggregator_id: intMessageAggregatorId
							} );

							psi.patterns.removeLoadingImage( {
								strElementSelector: strElementSelector
							} );
						}, 3000 );
					}
				}
			});
		}
	}

	function handleInitiateChatFromEntrata( options ) {
		var intApplicantId = options.intApplicantId,
			intApplicationId = options.intApplicationId,
			intPropertyId = options.intPropertyId,
			strElementSelector = options.strElementSelector,
			strErrorSelector = options.strErrorSelector;

		var boolIsWeChat           = ( true == options.boolIsWeChat ) ? true : false;
		var strWechatOpenId        = options.strWeChatOpenId;

		var intMessageAggregatorId = MESSAGE_AGGREGATOR_SMS;
		if( options.hasOwnProperty( 'intMessageAggregatorId' ) ) {
			intMessageAggregatorId = options.intMessageAggregatorId;
		}

		var intCid = objEntrataXmppChat.strEntratChatRoomJid.split( '_' )[1];
		var strChatRoomJid = "sms_" + intCid + "_" + intPropertyId + "_" + intApplicationId;

		var strUrl = '/?module=sms_chatxxx&action=start_chat_from_lead_profile'
		if( undefined != options.intCampaignTargetId ) {
			strChatRoomJid = "smsc_" + options.intCid + "_" + intPropertyId + "_" + options.intCampaignTargetId;

			strUrl = '/?module=sms_chatxxx&action=start_chat_from_potential_lead_dashboard'
		}
		if( 0 < $( "#" + strChatRoomJid ).length ) {
			objChatPanel.showChat( {chat_room_jid: strChatRoomJid, target_tab: $( '#sms-text-tab' )} );

			if( "function" == typeof options.onSuccess ) {
				options.onSuccess();
			}
		} else {
			var strDataAttributre = { 'applicant_id': intApplicantId, 'application_id': intApplicationId, 'property_id': intPropertyId, 'is_wechat': boolIsWeChat, 'wechat_open_id': strWechatOpenId, 'message_aggregator_id': intMessageAggregatorId };
			if( undefined != options.intCampaignTargetId ) {
				strDataAttributre = { 'campaign_target_id': options.intCampaignTargetId };
			}
			psi.patterns.showLoadingImage( {
				strElementSelector: strElementSelector
			} );
			psi.patterns.ajaxRequest( {
				url: strUrl,
				data: strDataAttributre,
				success: function( objResponse ) {
					if( false === objResponse.data.success ) {
						$( '#smsChatErrorMessage' ).remove();
						var strErrorMessage = '<p id="smsChatErrorMessage" class="alert error slim">' + objResponse.data.message + '</p>';
						$( strErrorSelector ).html( strErrorMessage );
						$( strErrorSelector ).show().delay( 7000 ).fadeOut();
						psi.patterns.removeLoadingImage( {
							strElementSelector: strElementSelector
						} );
					} else {
						setTimeout( function() {
							$( '#smsChatErrorMessage' ).remove();
							if( "function" == typeof options.onSuccess ) {
								options.onSuccess();
							}
							sessionStorage.setItem( 'current_active_sms_chat_room', strChatRoomJid );
							sessionStorage.setItem('current_active_tab', 'sms-text-tab' );
							$('.sms-text-messages').empty().removeClass('hide');
							$('#sms-text-section').find('.active_chat_conversations').remove();
							$( '.unclaimed-chat-messages' ).empty();
							$( '.active-chat-messages' ).empty();
							$('.sms-text-messages').append( '<hr class="margin15-bottom" id="sms-text-options-hr">' );
							objChatPanel.loadInnerContent();
							if( false == $('.chat-panel').hasClass('open') ) {
								$( '.chat-panel' ).toggleClass( 'open' );
								$( '.flex-entrata-wrapper' ).toggleClass( 'chat-panel-open' );
								$( '.flex-entrata-wrapper .table-header' ).css( "width", "" );
								$('#chat-inner-content').fadeIn();
								objChatPanel.setSessionStorage( 'is_open_chat_panel', 1 );
							}
							psi.patterns.removeLoadingImage( {
								strElementSelector: strElementSelector
							} );
						}, 3000 );
					}
				}
			});
		}
		return true;
	}

	function showChat( options ) {
		if( $( '#chat_popup_' + options.chat_room_jid ).length ) {
			objChatPanel.removeNotification( $( '#chat_popup_' + options.chat_room_jid ) );
		}

		if( false == $( '.chat-panel' ).hasClass( 'chat_loaded' ) && false == $( '.chat-panel' ).hasClass( 'open' ) ) {
			objActionItems = {
				clickElement: $( "." + options.chat_room_jid ),
				chatRoomId: options.chat_room_jid,
				openTab: options.target_tab,
				showChat: function( options ) {
					var objConversationElement = $( '#' + options.chat_room_jid );
					objConversationElement.siblings().addClass( "hide" );
					objConversationElement.removeClass( "hide" );
				}
			};

			$('.entrata-header-container .js-launch-chat').click();
		}

		if( $( '.chat-panel' ).hasClass( 'chat_loaded' ) && !$( '.chat-panel' ).hasClass( 'open' ) ) {
			$('.entrata-header-container .js-launch-chat').click();
			objChatPanel.openChat( options );
		}

		if( $( '.chat-panel' ).hasClass( 'chat_loaded' ) && $( '.chat-panel' ).hasClass( 'open' ) ) {
			objChatPanel.openChat( options );
		}
	}

	function openChat( options ) {
		$( "." + options.chat_room_jid ).attr( 'data-message-aggregator-id', options.message_aggregator_id );
		$( "." + options.chat_room_jid ).removeClass( 'loaded' );
		options.target_tab.click();
		setTimeout( () => {
			$( "." + options.chat_room_jid ).click();
			var objConversationElement = $( '#' + options.chat_room_jid );
			objConversationElement.siblings().addClass( "hide" );
			objConversationElement.removeClass( "hide" );
		}, 1000 )
	}

	function displayChatNotification( objMsg ) {
		if( true == $('#available-toggle-switch').hasClass( 'off' ) ) {
			return true;
		}

		if( true === $( "#" + objMsg.chat_room ).is(":visible") ) {
			return true;
		} else if( 0 < $( "#chat_popup_" + objMsg.chat_room ).length ) {
			$( "#chat_popup_" + objMsg.chat_room ).find( ".nAlertText" ).text( objMsg.message );
			return true;
		}

		var intAutoHideAfter = ( 'undefined' != typeof objMsg.message ) ? parseInt( objMsg.message.auto_hide_after ) : '';
		var strContainer = objChatPanel.buildChatPopup( objMsg );

		$( strContainer )
			.appendTo( '.js-notifications .nAlertWrapper' )
			.delay( 2000 )
			.animate( { right: "+=360" }, 400, function() {
				// auto remove notification
				var objNotification = $( this );
				if( intMaxVisibleNotifications > objNotification.index() && true === $.isNumeric( intAutoHideAfter ) ) {
					setTimeout( function() {
						objChatPanel.removeNotification( objNotification );
					}, intAutoHideAfter * 1000 );
				}
			} );

	}

	function displayOnGoingChatNotification( strChatRoomId, strSenderName, strMessage ) {
		if( true === $( "#" + strChatRoomId ).is(":visible") ) {
			return true;
		}
		var strContainer = '';
		if( 0 == $('#chat_popup_' + strChatRoomId ).length ) {
			var strContainer = objChatPanel.buildChatPopup( {chat_room: strChatRoomId, applicant_name: strSenderName}, strMessage );
			$( strContainer )
				.appendTo( '.js-notifications .nAlertWrapper' )
				.delay( 2000 )
				.animate( { right: "+=360" }, 400 );
		} else {
			$('#chat_popup_' + strChatRoomId ).find( "span.nAlertText " ).text( strMessage );
		}
	}

	function displayNotification( objMsg, boolIsChat ) {
		if( false == objChatPanel.checkIfPropertyExists( objMsg.message.description.property_id.toString() ) ) {
			return true;
		}

		if( true === $( "#" + objMsg.message.description.chat_room ).is(":visible") ) {
			return true;
		} else if( 0 < $( "#chat_popup_" + objMsg.message.description.chat_room ).length ) {
			$( "#chat_popup_" + objMsg.message.description.chat_room ).find( ".nAlertText" ).text( objMsg.message.description.message );
			$( "#chat_popup_" + objMsg.message.description.chat_room ).find( ".applicantName" ).text( objMsg.message.description.applicant_name );
			return true;
		}

		var intAutoHideAfter = ( 'undefined' != typeof objMsg.message ) ? parseInt( objMsg.message.auto_hide_after ) : '';
		var strContainer = '';

		if( true === boolIsChat ) {
			strContainer = objChatPanel.buildChatPopup( objMsg );
		} else {
			strContainer = objChatPanel.buildNotificationPopup( objMsg );
		}

		$( strContainer )
			.appendTo( '.js-notifications .nAlertWrapper' )
			.delay( 2000 )
			.animate( { right: "+=360" }, 400, function() {
				// auto remove notification
				var objNotification = $( this );
				if( intMaxVisibleNotifications > objNotification.index() && true === $.isNumeric( intAutoHideAfter ) ) {
					setTimeout( function() {
						objChatPanel.removeNotification( objNotification );
					}, intAutoHideAfter * 1000 );
				}
			} );

		if( ( 'undefined' !== typeof objMsg.message ) && ( '' !== objMsg.message.callback_function ) ) {
			$( ' #company_user_notification_' + objMsg.unique_id ).find( ".nMessage" ).click( function() {
				eval( objMsg.message.callback_function );
			} );
		}
	}

	function buildChatPopup( options, strMessage ) {
		var strBodyMessage = __("Unclaimed Chat");
		var strClassName = 'chat-notification-popup';

		if( 'undefined' != typeof strMessage ) {
			strBodyMessage = strMessage;
			strClassName = 'chat-notification-popup-live';
		}

		var strContainer = '<div id="chat_popup_' + options.chat_room + '" class="nAlert chat_' + options.chat_room + '" data-auto_hide_after="' + 300 + '" data-chat-room-jid="' + options.chat_room + '" > \
										<div class="left text ' + strClassName + '"> \
										<span class="bold"> ' + options.applicant_name + ' </span><br> \
										<span class="nAlertText highlight-request">' + strBodyMessage + '</span> \
									</div> \
									<div class="snoozeWrapper right"> \
										<p class="link ignore option1">' + __("Ignore") + '</p> \
									</div> \
								</div>';

		return strContainer;
	}

	function buildRequestToJoinChatPopUp( options, strMessage ) {

		var strContainer = '<div id="chat_popup_' + options.chat_room + '" class="nAlert chat_' + options.chat_room + '" data-auto_hide_after="' + 300 + '" data-chat-room-jid="' + options.chat_room + '" > \
										<div class="left text add-to-chat-popup-live"> \
										<span class="bold"> ' + options.sender_name + ' </span><br> \
										<span class="nAlertText highlight-request">' + strMessage + '</span> \
									</div> \
									<div class="snoozeWrapper right"> \
										<p class="link ignore option1">' + __("Ignore") + '</p> \
									</div> \
								</div>';

		return strContainer;
	}

	function buildNotificationPopup( options ) {
		var strHideClass = ( true === $( "#myStatus" ).hasClass( "on" ) ) ? '' : 'hide ';

		var boolIsChatStarted = ( true == $( "#new-text-section.text-section." + options.message.description.chat_room ).hasClass( "my-room" ) ) ? true : false;
		var strDisplayMessage = __( 'Unclaimed Text' );
		var strTextColorClass = 'highlight-request';

		if( true === boolIsChatStarted ) {
			strDisplayMessage = options.message.description.message;
			strTextColorClass = 'text-gray';
		} else if( true === options.message.description.is_transferred_sms ) {
			strDisplayMessage = __( 'Text Conversation - Transferred' );
			strTextColorClass = 'text-gray';
		}

		var strClass = options.tags.shift();

		var strContainer = '<div id="chat_popup_' + options.message.description.chat_room + '" class="nAlert chat_' + options.message.description.chat_room + ' ' + strHideClass + '" data-auto_hide_after="' + intAutoHidePopupAfter + '" data-chat-room-jid="' + options.message.description.chat_room + '" data-applicant-id="' + options.message.description.applicant_id + '" data-sms-chat="1" data-unique-id="' + options.message.description.unique_id + '" > \
									<div class="left text text-message-notification-popup"> \
										<span class="bold applicantName">' + options.message.description.applicant_name + '</span><br> \
										<span class="nAlertText ' + strTextColorClass + '">' + strDisplayMessage + '</span> \
									</div> \
									<div class="snoozeWrapper right"> \
										<p class="link ignore option1">' + __("Ignore") + '</p> \
									</div> \
								</div>';

		return strContainer;
	}

	function removeNotification( obj, boolIsSnooze ) {
		obj.animate( { opacity: '0' }, 600, function() {
			obj.animate( { height: '0px' }, 300, function() {
				// Load next hidden Notification message and bind auto close event, if not already bind
				var objNextNotification = $( '.nAlertWrapper .nAlert:nth-child( ' + ( intMaxVisibleNotifications + 1 ) + ' ):not(.notification_close_binded)' );
				var intAutoHideAfter = parseInt( objNextNotification.data( 'auto_hide_after' ) );
				if( -1 != objNextNotification.index() && true === $.isNumeric( intAutoHideAfter ) ) {
					objNextNotification.addClass( 'notification_close_binded' );
					setTimeout( function() {
						objChatPanel.removeNotification( objNextNotification );
					}, intDuration );
				}
				obj.remove();
			} );
		} );
	}

	function showResumeChat( strChatRoomJid ) {
		if( $( '#chat_popup_' + strChatRoomJid ).length ) {
			objChatPanel.removeNotification( $( '#chat_popup_' + strChatRoomJid ) );
		}

		if( !$( '.chat-panel' ).hasClass( 'chat_loaded' ) && !$( '.chat-panel' ).hasClass( 'open' ) ) {
			objActionItems = {
				clickElement: $( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).find( '.resume-chat-button' ),
				chatRoomId: strChatRoomJid,
				openTab: $( '#chats-tab' ),
				showChat: function( strChatRoomJid ) {
					$( '#active-chats-tab' ).click();
				}
			};

			$('.entrata-header-container .js-launch-chat').click();
		}

		if( $( '.chat-panel' ).hasClass( 'chat_loaded' ) && !$( '.chat-panel' ).hasClass( 'open' ) ) {
			$('.entrata-header-container .js-launch-chat').click();
			$( '#chats-tab' ).click();
			$( '#active-chats-tab' ).click();
			$( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).find( '.resume-chat-button' ).click();
		}

		if( $( '.chat-panel' ).hasClass( 'chat_loaded' ) && $( '.chat-panel' ).hasClass( 'open' ) ) {
			$( '#chats-tab' ).click();
			$( '#active-chats-tab' ).click();
			$( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).find( '.resume-chat-button' ).click();
		}
	}

	function acceptUnclaimedChat( strChatRoomJid ) {
		if( $( '#chat_popup_' + strChatRoomJid ).length ) {
			objChatPanel.removeNotification( $( '#chat_popup_' + strChatRoomJid ) );
		}

		if( !$( '.chat-panel' ).hasClass( 'chat_loaded' ) && !$( '.chat-panel' ).hasClass( 'open' ) ) {
			objActionItems = {
				clickElement: $( '.unclaimed-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).find( '.start-chat-button' ),
				chatRoomId: strChatRoomJid,
				openTab: $( '#chats-tab' ),
				showChat: function( strChatRoomJid ) {}
			};

			$('.entrata-header-container .js-launch-chat').click();
		}

		if( $( '.chat-panel' ).hasClass( 'chat_loaded' ) && !$( '.chat-panel' ).hasClass( 'open' ) ) {
			$('.entrata-header-container .js-launch-chat').click();
			$( '#chats-tab' ).click();
			$( '.unclaimed-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).find( '.start-chat-button' ).click();
		}

		if( $( '.chat-panel' ).hasClass( 'chat_loaded' ) && $( '.chat-panel' ).hasClass( 'open' ) ) {
			$( '#chats-tab' ).click();
			$( '.unclaimed-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).find( '.start-chat-button' ).click();
		}
	}

	function removeSmsChatRequest( objMessage ) {

		var strFrom = objMessage.getAttribute( 'from' );
		var strTo = objMessage.getAttribute( 'to' );
		var objBodyElement = objMessage.getElementsByTagName( 'body' );
		var objOptions = $.parseJSON( $( "<div/>" ).html( Strophe.getText( objBodyElement[0] ) ).text() );
		var intUniqueId = objOptions.unique_id;
		var strChatRoomJid = objOptions.chat_room_jid;
		var strNick = strFrom.split( '/' )[1];
		var strToNick = strTo.split( '/' )[1];

		if( strNick !== objEntrataXmppChat.getConnection().authcid ) {
			// Remove chat request notification from other user screen
			$( "#chat_popup_" + strChatRoomJid ).remove();
			$( "#" + strChatRoomJid ).remove();
		}
	}

	function lcChatInProgress( strChatRoomId ) {
		psi.patterns.ajaxRequest( {
			url: '/?module=sms_chatxxx&action=leasing_center_chat_in_progress&chat_room=' + strChatRoomId,
			success: function( objResult ) {}
		} );
	}

	function lcEndChat( strChatRoomId ) {
		psi.patterns.ajaxRequest( {
			url: '/?module=sms_chatxxx&action=leasing_center_end_chat&chat_room=' + strChatRoomId,
			success: function( objResult ) {}
		} );
	}

	return {
		init: init,
		parseChat: parseChat,
		initChat: initChat,
		initText: initText,
		addFlexWrapper: addFlexWrapper,
		chatLogin: chatLogin,
		createExpiredChatNode: createExpiredChatNode,
		loadInnerContent: loadInnerContent,
		checkIfPropertyExists: checkIfPropertyExists,
		updateChatNoficationCount: updateChatNoficationCount,
		updatePropertiesSessionStorage: updatePropertiesSessionStorage,
		toggleAvailability: toggleAvailability,
		updateChatSessionData: updateChatSessionData,
		createUnclaimedNode: createUnclaimedNode,
		createOngoingPropertyChatNode: createOngoingPropertyChatNode,
		checkIfPropertyExists: checkIfPropertyExists,
		deleteAndUpdateNotificationEntry: deleteAndUpdateNotificationEntry,
		deleteChatNotificationEntry: deleteChatNotificationEntry,
		updateNotificationAfterAttach: updateNotificationAfterAttach,
		reloadMessage: reloadMessage,
		setLeasingAgentName: setLeasingAgentName,
		setLeasingAgentFirstName: setLeasingAgentFirstName,
		setCurrentLeaseAgentId: setCurrentLeaseAgentId,
		truncateChatMessage: truncateChatMessage,
		createSmsTextNode: createSmsTextNode,
		buildConversion: buildConversion,
		getChatBubbleMessage: getChatBubbleMessage,
		scrollConversationPage: scrollConversationPage,
		loadApplication: loadApplication,
		handleInitiateResidentChat: handleInitiateResidentChat,
		handleInitiateLeadChat: handleInitiateLeadChat,
		handleInitiateChatFromEntrata: handleInitiateChatFromEntrata,
		showChat: showChat,
		openChat: openChat,
		displayNotification: displayNotification,
		displayChatNotification: displayChatNotification,
		buildChatPopup: buildChatPopup,
		buildRequestToJoinChatPopUp: buildRequestToJoinChatPopUp,
		buildNotificationPopup: buildNotificationPopup,
		removeNotification: removeNotification,
		acceptUnclaimedChat: acceptUnclaimedChat,
		showResumeChat: showResumeChat,
		displayOnGoingChatNotification: displayOnGoingChatNotification,
		showMessage: showMessage,
		removeSmsChatRequest: removeSmsChatRequest,
		setSessionStorage: setSessionStorage,
		lcChatInProgress: lcChatInProgress,
		lcEndChat: lcEndChat,
		loadPreviousTextMessages: loadPreviousTextMessages,
		createActiveChatNode: createActiveChatNode,
		countDown: countDown,
		countDownForAddToChat: countDownForAddToChat,
		addCountDownTimer: addCountDownTimer
	};
}();

var EntrataChatPanel = {
	init: function() {
		var objThis = this;
		// To restrict user to click on chat-node immediate on page load & connection establishment
		psi.patterns.showLoadingImage( {strElementSelector: '.sms-text-messages'} );
		$( document )
			.on( "onConnect", function( event ) {
				objConnection = event.originalEvent.detail;
				if( 1 == sessionStorage.getItem( 'is_available_for_chat' ) ) {
					objEntrataXmppChat.setAvailableForChat( true );
					objEntrataXmppChat.setIsUserOnline( true );
					EntrataChatPanel.initChatRequests();
				}
				var strCurrentActiveChatRoom = sessionStorage.getItem( 'current_active_chat_room' );
				var strCurrentActiveTab = sessionStorage.getItem('current_active_tab');
				var strCurrentActiveSubRoom = sessionStorage.getItem( 'current_active_sub_tab' );
				var strCurrentActiveSmsChatRoom = sessionStorage.getItem( 'current_active_sms_chat_room' );

				var strMyChatRooms = sessionStorage.getItem('my_chat_rooms');
				var arrMyChatRooms = ( null == strMyChatRooms || '' == strMyChatRooms ) ? [] : strMyChatRooms.split( ',' );

				if( null != strCurrentActiveChatRoom ) {
					$('.unclaimed-chat-messages .' + strCurrentActiveChatRoom).find('.start-chat-button').trigger('click');
					$('.active-chat-messages .' + strCurrentActiveChatRoom).find('.resume-chat-button').trigger('click');
				}

				$.each( arrMyChatRooms, function(index, strChatRoom ) {
					var objElm = $('.active-chat-messages .' + strChatRoom );
					if( 0 < objElm.length ) {
						$('.active-chat-messages .' + strChatRoom).find('.resume-chat-button').trigger('click');
						$('#active-chats #' + strChatRoom).find('.back-to-active-chats').trigger('click');
					}
				} );

				if( null != strCurrentActiveSmsChatRoom ) {
					$('.sms-text-messages .' + strCurrentActiveSmsChatRoom).trigger('click');
				}

				if( null != strCurrentActiveTab ) {
					sessionStorage.setItem('current_active_tab', strCurrentActiveTab );
				} else if( null != strCurrentActiveSubRoom ) {
					sessionStorage.setItem('current_active_sub_tab', strCurrentActiveSubRoom );
				} else if( null != strCurrentActiveSmsChatRoom ) {
					sessionStorage.setItem('current_active_sms_chat_room', strCurrentActiveSmsChatRoom );
				}

				// To restrict user to click on chat-node immediate on page load & connection establishment
				psi.patterns.removeLoadingImage( {strElementSelector: '.sms-text-messages'} );
			} )
			.on( "onMessage", function( event ) {
				if( false == boolIsAllowTexting ) {
					return false;
				}
				if( -1 == (event.originalEvent.detail.tags).indexOf( "SMS_CHAT" ) ) {
					return false;
				}
				objThis.processOnMessage( event.originalEvent.detail );
			} )
			.on( "onChat", function( event ) {
				if( false == boolIsAllowChats ) {
					return false;
				}
				objThis.processOnChat( event.originalEvent.detail );
			} )
			.on( "onReceipt", function( event ) {
				objThis.processOnReceipt( event.originalEvent.detail );
			} )
			.on( "onRequest", function( event ) {
				if( false == boolIsAllowChats ) {
					return false;
				}

				objThis.processOnRequest( event.originalEvent.detail );
			} )
			.on( "onAvailable", function( event ) {
				// Process with message details event.originalEvent.detail
			} )
			.on( "onJoinChat", function( event ) {
				// Process with message details event.originalEvent.detail
			} )
			.on( "onRemoveRequest", function( event ) {
				objThis.processRemoveChatRequest( event.originalEvent.detail );
			} )
			.on( "composing.chatstates", function( event, strChatRoom ) {
				var strUsername = strChatRoom.split( '/' )[1];
				if( strUsername === objEntrataXmppChat.getJid().split( '@' )[0] ) {
						return true;
					}
				objThis.showOrHideComposeMessage( strChatRoom, false, objJidUserNameAssociations[strUsername] );
			} )
			.on( "paused.chatstates", function( event, strChatRoom  ) {
				objThis.showOrHideComposeMessage( strChatRoom, true );
			} )
			.on( "active.chatstates", function( event ) {
				// Process with message details event.originalEvent.detail
			} )
			.on( 'blur', '.chat-text-area', function() {
				var chatRoom = $( this ).parents( '.js-chat_box' ).attr( 'id' );
				objEntrataXmppChat.sendPaused( chatRoom );
			} );
	},
	showOrHideComposeMessage: function( strChatRoom, boolIsHide, strUsername ) {
		var strChatRoomId = Strophe.getNodeFromJid( strChatRoom );
		var objConversationNode = $( '#active-chats' ).find( '#' + strChatRoomId ).find( '.js-conversation-history .responder' );

		if( true == boolIsHide ) {
			objConversationNode.addClass( 'hide-state' );
		} else {
			$( '#active-chats' ).find( '#' + strChatRoomId ).find( '.js-conversation-history .responder .chat-composing-sate' ).html( strUsername + ' is typing' );
			if( false == objConversationNode.hasClass( 'hide-state' ) ) {
				$( '#active-chats' ).find( '#' + strChatRoomId ).find( '.js-conversation-history .responder' ).get(0).scrollIntoView();
			}
			objConversationNode.removeClass( 'hide-state' );
		}
	},
	processOnRequest: function( objMessage ) {
		if( true == objMessage.hasOwnProperty( 'transfer_chat' ) && true == objMessage.transfer_chat ) {
			var currentLeasingAgentJid = objEntrataXmppChat.getJid().split( '@' )[0];
			if( -1 == $.inArray( currentLeasingAgentJid, objMessage.selected_leasing_agents  ) ) {
				var objCurrentLeasingAgentsNode = $( '.ongoing-property-chat-messages #' + objMessage.chat_room ).find( '.current-leasing-agents' );
				if( undefined !== objCurrentLeasingAgentsNode ) {
					var strCurrentLeasingAgents = objCurrentLeasingAgentsNode.html();
					var arrstrCurrentLeasingAgents = strCurrentLeasingAgents.split( ',' ).filter( n => n );
					arrstrCurrentLeasingAgents = arrstrCurrentLeasingAgents.filter( function( value, index, arr ) {
						return value.trim() != objMessage.leasing_agent_name;
					} );
					EntrataChatPanel.saveChatRoomWithNumberOfLeasingAgents( objMessage.chat_room, arrstrCurrentLeasingAgents.length );
					strCurrentLeasingAgents = arrstrCurrentLeasingAgents.join( ',' );
					objCurrentLeasingAgentsNode.html( strCurrentLeasingAgents );
					if( 0 == arrstrCurrentLeasingAgents.length ) {
						$( '.ongoing-property-chat-messages #' + objMessage.chat_room + ' .group-icon').hide();
					}
				}
				return;
			}
		}
		var objThis = this;
		var strChatRoomJid = objMessage.chat_room;

		var strHideClass = '';

		if( false == objChatPanel.checkIfPropertyExists( objMessage.property_id.toString() ) ) {
			return true;
		}

		var objDate = new Date();
		objMessage.chat_initialize_time = objDate.toLocaleDateString() + ' ' + objDate.toLocaleTimeString();

		arrobjUnclaimedMessage[strChatRoomJid] = objMessage;
		if( 0 < $('.ongoing-property-chat-messages #' + strChatRoomJid).length ) {
			$('.ongoing-property-chat-messages #' + strChatRoomJid).addClass('hide');
		}
		$( '.unclaimed-chat-messages' ).append( objChatPanel.createUnclaimedNode( objMessage, '' ) );

		var strTime = strMinutes * 60 + strSeconds;
		objChatPanel.countDown( strChatRoomJid, strTime, false );

		if( false == $('#active-chats #' + strChatRoomJid).hasClass('hide') ) {
			$( '.unclaimed-chat-messages' ).find('.' + strChatRoomJid ).find('.start-chat-button').trigger('click');
		} else {
			EntrataChatPanel.saveChatRoomWithNumberOfLeasingAgents( strChatRoomJid, 0 );
		}

		EntrataChatPanel.saveJidUserNameAssociation( 'prospect_' + objMessage.cid + '_' + objMessage.application_id, objMessage.applicant_name );

		objChatPanel.updateChatNoficationCount();
		// objThis.buildConversationDetails( strChatRoomJid, objMessage );

		var strCallback = function() {
			parent.focus();
			window.focus();
			EntrataChatPanel.showChat( {chat_room_jid: strChatRoomJid, target_tab: $( '#chats-tab' )} );
		};

		var intChatRequestMaxTime = 180; // 3 mins
		var intCloseTime = 1000 * intChatRequestMaxTime;
		var strNotificationBody = __( 'Unclaimed Chat' );

		var options = {
			title: objMessage.applicant_name,
			options: {
				body: strNotificationBody,
				icon: objEntrataNotification.strIconUrl,
				lang: 'en-US',
				tag: strChatRoomJid,
				closeTime: intCloseTime,
				requireInteraction: true,
				onClick: strCallback,
				storeObjects: true,
				onDenied: function() {
					objChatPanel.displayChatNotification( objMessage );
				}
			}
		};

		if( false === desktopNotification( options ) ) {
			objChatPanel.displayChatNotification( objMessage );
		}
	},
	processOnMessage: function( objDetail ) {
		var objMessage = objDetail.message;
		var intNotificationId = objDetail.id;
		if( 'undefined' == typeof objMessage.description || 'undefined' == typeof intNotificationId || 'undefined' == typeof objMessage.description.message || 'undefined' == typeof objMessage.description.applicant_name || 'undefined' == typeof objMessage.description.property_name ) {
			return true;
		}
		objMessage.description.message_id = objDetail.id;
		var intTime = getCurrentUtcTime();
		var boolIsNewMessage = false;
		if( null === intTime ) {
			intTime = getCurrentUtcTime();
		}

		if( 0 < $( '.sms-text-messages .text-section[data-chat-room=' + objMessage.description.chat_room + ']' ).length ) {
			var intOldMessageAggregatorId = $( ".sms-text-messages" ).find( "." + objMessage.description.chat_room ).attr( "data-message-aggregator-id" );
			var intOldCustomerId = $( ".sms-text-messages" ).find( "." + objMessage.description.chat_room ).attr( "data-customer-id" );
			var objElm = $( '.sms-text-messages .text-section[data-chat-room=' + objMessage.description.chat_room + ']' );
			$(objElm).attr( 'data-applicant-name', objMessage.description.applicant_name );
			$(objElm).attr( 'data-message-id', intNotificationId );
			$(objElm).attr( 'data-message-aggregator-id', objMessage.description.message_aggregator_id );

			//Chat node is exist with Applicant name and if co-applicant sent new message then need to update below fields under chatnode
			$( objElm ).attr( 'data-applicant-id', objMessage.description.applicant_id );
			$( objElm ).attr( 'data-customer-id', objMessage.description.customer_id );
			$( '#' + objMessage.description.chat_room ).find( '.chat-recipient' ).text( objMessage.description.applicant_name );
			// end

			var strChatIcon = '';
			switch( parseInt( objMessage.description.message_aggregator_id ) ) {
				case MESSAGE_AGGREGATOR_WHATSAPP:
					strChatIcon = ' <use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#whatsapp-icon"></use> ';
					break;

				case MESSAGE_AGGREGATOR_WECHAT:
					strChatIcon = ' <use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#we-chat-icon"></use> ';
					break;

				default:
					strChatIcon = ' <use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#chat-icon"></use> ';
					break;
			}

			$(objElm).find('.message-svg-icon').html(strChatIcon);

			var strRecipient = '';
			if( false == objMessage.description.is_reply_message ) {
				var strApplicantName = $(objElm).data( 'applicant-name' ).split( ' ' );
				strRecipient = __( '{%s,0}: ', [strApplicantName[0]] );
				if( 0 < $(objElm).data( 'applicant-name' ).search( 'SMS' ) ) {
					strRecipient = __( '{%s,0}: ', [ objElm.data( 'applicant-name' ).split( 'SMS' )[0]] );
				}
				if( 0 < $(objElm).data( 'applicant-name' ).search( 'WHATSAPP' ) ) {
					strRecipient = __( '{%s,0}: ', [ objElm.data( 'applicant-name' ).split( 'WHATSAPP' )[0]] );
				}
			}
			$(objElm).find( '.text-message-applicant-name' ).html(objMessage.description.applicant_name);
			$(objElm).find( '.text-alert-message' ).html( strRecipient + __( '<span class="text-message"> ' + objChatPanel.truncateChatMessage( objMessage.description.message ) + '</span>' ) );
			$(objElm).find('.text-message').html( objChatPanel.truncateChatMessage( objMessage.description.message ) );
			$(objElm).find('.messaged-time').html( __( '{%t,0,TIME_SHORT}', [getLocalTime(intTime)] ) );
			$(objElm).find('.text-message-status').html( __('New') );
			$(objElm).find( '.text-message-status' ).addClass( 'pad5' );
			//Remove the Parent div element of 'objElm' >(<span>)
			$( ".text-node-" + objMessage.description.chat_room ).remove();
			var newObjElm = $(objElm);
			objElm.remove();
			newObjElm.insertAfter('.sms-text-messages #sms-text-options-hr');
			$( ".text-section.new-text-section." + objMessage.description.chat_room ).wrap( '<div class="text-node-' + objMessage.description.chat_room + '" />' );
			if( true == $( '#' + objMessage.description.chat_room ).hasClass( 'hide' ) ) {
				$( '.sms-text-messages .text-section[data-chat-room=' + objMessage.description.chat_room + ']' ).addClass( 'unread' );
			}
			if( objMessage.description.chat_room == sessionStorage.getItem( 'current_active_sms_chat_room' ) ) {
				$(newObjElm).find('.text-message-status').removeClass( 'pad5' ).text( '' );
			}

			if( MESSAGE_AGGREGATOR_SMS == objMessage.description.message_aggregator_id ) {
				objChatPanelSmsTemplate.loadNotificationDetails( objMessage.description.chat_room );
			}

			// On active chatRoom if old conversation medium is different than new incoming message then load chatRoom previous messages & templates according to new aggrigator
			if( ( intOldMessageAggregatorId != objMessage.description.message_aggregator_id ) || ( intOldCustomerId != objMessage.description.customer_id ) ) {

				if( MESSAGE_AGGREGATOR_WHATSAPP == objMessage.description.message_aggregator_id ) {
					objChatPanelWhatsappTemplate.loadWhatsAppTemplates( objMessage.description.chat_room, objMessage.description.property_id, objMessage.description.customer_id, objMessage.description.applicant_id );
					objChatPanelWhatsappTemplate.loadNotificationDetails( objMessage.description.chat_room );
				}

				objChatPanel.loadPreviousTextMessages( newObjElm, objMessage.description.chat_room, objMessage.description.application_id );
			}
		} else {
			var strHideClass = '';
			if( false == objChatPanel.checkIfPropertyExists( objMessage.description.property_id.toString() ) ) {
				strHideClass = 'hide exclude';
			}
			if( true == $('.sms-text-messages #my-texts').hasClass('selected') ) {
				strHideClass = 'hide';
			}
			objMessage.description.status = 'new';
			objMessage.description.chat_initialize_time = getLocalTime(intTime);
			objMessage.description.message_id = intNotificationId;
			$( '.sms-text-messages #sms-text-options-hr' ).after( objChatPanel.createSmsTextNode( objMessage.description, strHideClass ) );
			$( '#sms-text-tab .notification' ).text( parseInt( $( '#sms-text-tab .notification' ).text() ) + 1 );
			if( 0 == $('#sms-text-section #' + objMessage.description.chat_room ).length ) {
				var objChatConversationElm = EntrataChatPanel.buildSmsConversationElement( objMessage.description.chat_room, objMessage.description, true );
				objChatConversationElm.appendTo( '#sms-text-section' );
				if( MESSAGE_AGGREGATOR_WHATSAPP == objMessage.description.message_aggregator_id ) {
					objChatPanelWhatsappTemplate.loadNotificationDetails( objMessage.description.chat_room );
				}

				if( MESSAGE_AGGREGATOR_SMS == objMessage.description.message_aggregator_id ) {
					objChatPanelSmsTemplate.loadNotificationDetails( objMessage.description.chat_room );
				}
			}
			var objElm = $( '.sms-text-messages .' + objMessage.description.chat_room );

			objChatPanel.loadPreviousTextMessages( objElm, objMessage.description.chat_room, objMessage.description.application_id );
			$('.sms-text-messages .' + objMessage.description.chat_room ).addClass( 'loaded' );
		}

		$( "#" + strChatRoomJid ).find( ".chat-actions .chat-text-area" ).css( 'display','block' );
		$( "#" + strChatRoomJid ).find( ".chat-actions .js-send-tools" ).css( 'display','block' );

		var objDescription = objMessage.description;
		var strChatRoomJid = objDescription.chat_room;
		var strApplicantName = objDescription.applicant_name;
		var strMessageFromProspect = objDescription.message;
		var boolIsChatInitiatedByAgent = objDescription.is_initiated_by_agent;

		var strMessageId = EntrataChatPanel.getMessageId();
		var intMessageAggregatorId = objDescription.message_aggregator_id;
		var boolIsChatStarted = ( true == $( "#new-text-section.text-section." + strChatRoomJid ).hasClass( "my-room" ) ) ? true : false;

		if( true === boolIsChatInitiatedByAgent ) {
			sessionStorage.removeItem( "chat_details" );
			objChatPanel.setSessionStorage( 'chat_details', strChatRoomJid + '::' + strApplicantName );
		}

		var strClass = 'user';
		var boolIsFromProspect = 'true';
		if( true === objDescription.is_reply_message ) {
			strClass = 'entrata';
			boolIsFromProspect = false;
		}

		var postMessageOptions = {
			strMessage: strMessageFromProspect,
			strChatRoomJid: strChatRoomJid,
			strClass: strClass,
			intNotificationId: intNotificationId,
			isReplyMessage: objDescription.is_reply_message,
			intTime: intTime,
			strMessageId: strMessageId,
			isPotentialLeadConvertedToGuestCard: objDescription.potential_lead_converted_into_guest_card,
			intApplicationId: objDescription.application_id,
			intCustomerId: objDescription.customer_id,
			intApplicantId: objDescription.applicant_id,
			intLeaseId: objDescription.lease_id,
			intMessageAggregatorId: intMessageAggregatorId,
			isUpdatedTimer: true,
			strPropertyName: objDescription.property_name,
			is_from_prospect: boolIsFromProspect,
			campaign_target_id:''
		};

		EntrataChatPanel.postMessageInConversationDiv( postMessageOptions, true );

		// On Incoming message, handle Centralized Leasing > Potential lead sms chat - Centralization
		if( strChatRoomJid && 'smsc' === strChatRoomJid.split( '_' )[0] ) {
			var intCampaignTargetId = strChatRoomJid.split( '_' )[3];
			postMessageOptions.campaign_target_id = intCampaignTargetId;
			psi.objCntPotentialLead.handleIncomingChatMessage( postMessageOptions );
		}

		if( '' != strMessageFromProspect && true == objDescription.is_communication_enabled && 'stop' != strMessageFromProspect.toLowerCase() ) {
			postMessageOptions.strMessage = __( 'You have opted-in to text messaging with {%s,0}. If you have a question, you may reply now and an agent will be in touch. Reply STOP to cancel all future text chats. Message & data rates may apply.', [objDescription.property_name] );
			postMessageOptions.is_from_prospect = false;
			EntrataChatPanel.postMessageInConversationDiv( postMessageOptions );
			$( "#" + strChatRoomJid ).find(".chat-actions").show();
			$( "#" + strChatRoomJid ).find( ".chat-actions .chat-text-area" ).css( 'display','block' );
			$( "#" + strChatRoomJid ).find( ".chat-actions .js-send-tools" ).css( 'display','block' );
		} else if( false == objDescription.is_communication_enabled && 'start' == strMessageFromProspect.toLowerCase() ) {
			postMessageOptions.strMessage = __( 'This phone number is already opted in for Text Messaging. If you have a question, you may reply now and an agent will be in touch. Reply STOP to cancel all future text chats. Message & data rates may apply.');
			postMessageOptions.is_from_prospect = false;
			EntrataChatPanel.postMessageInConversationDiv( postMessageOptions );
			$( "#" + strChatRoomJid ).find(".chat-actions").show();
			$( "#" + strChatRoomJid ).find( ".chat-actions .chat-text-area" ).css( 'display','block' );
			$( "#" + strChatRoomJid ).find( ".chat-actions .js-send-tools" ).css( 'display','block' );
		}

		if( '' != strMessageFromProspect && 'stop' != strMessageFromProspect.toLowerCase() ) {
			$( "#" + strChatRoomJid ).find( ".chat-actions .chat-text-area" ).css( 'display','block' );
			$( "#" + strChatRoomJid ).find( ".chat-actions .js-send-tools" ).css( 'display','block' );
		}
		var strCallback = function() {
			parent.focus();
			window.focus();
			objChatPanel.showChat( {chat_room_jid: strChatRoomJid, target_tab: $( '#sms-text-tab' )} );
		};

		var intChatRequestMaxTime = 180; // 3 mins
		var intCloseTime = 1000 * intChatRequestMaxTime;
		var strNotificationBody = __( 'Unclaimed Text' );

		if( true === boolIsChatStarted ) {
			strNotificationBody = strMessageFromProspect;
		} else if( true === objDescription.is_transferred_sms ) {
			strNotificationBody = __( 'Text Conversation - Transferred' );
		}

		if( false == $( "#sms-text-section #" + strChatRoomJid ).hasClass("hide") ) {
			EntrataChatPanel.updateSmsNotification( intNotificationId, null, null, null, true );
		}

		if( false == $('.chat-panel').hasClass( 'open' ) || sessionStorage.getItem( 'current_active_sms_chat_room' ) != $("#resume-chat-section .acitve_chat_conversations.js-chat_box").attr('id') ) {
			boolIsNewMessage = true;
		}

		if( true == $( "#sms-text-section #" + strChatRoomJid ).hasClass("hide") ) {
			objChatPanel.updateChatNoficationCount( boolIsNewMessage );

			if( '' != strMessageFromProspect ) {
				var options = {
					title: objDescription.applicant_name,
					options: {
						body: strNotificationBody,
						icon: objEntrataNotification.strIconUrl,
						lang: 'en-US',
						tag: strChatRoomJid,
						closeTime: intCloseTime,
						requireInteraction: true,
						onClick: strCallback,
						storeObjects: true,
						onDenied: function() {
							objChatPanel.displayNotification( objDetail, false );
						}
					}
				};

				if( false === desktopNotification( options ) ) {
					objChatPanel.displayNotification( objDetail, false );
				}
			}
		}

		if( 0 < strMessageFromProspect.search( "ou have successfully opted out" ) || 0 < strMessageFromProspect.search( "'ve opted out of" ) ) {
			if( true == $( "#sms-text-section #" + strChatRoomJid ).hasClass("hide") ) {
				$( "#sms-text-section #" + strChatRoomJid ).remove();
			}
			$('#sms-text-section .sms-text-messages').find('.text-section.' + strChatRoomJid ).remove();
			EntrataChatPanel.updateSmsNotification( intNotificationId, objMessage.description.chat_room, null, null, true );
			objChatPanel.updateChatNoficationCount();
		}

		if( true == objDescription.potential_lead_converted_into_guest_card ) {
			if( undefined != objDescription.applicant_id && objDescription.applicant_id.length > 0 ) {
				objChatPanel.handleInitiateLeadChat( {
					intApplicantId: objDescription.applicant_id,
					intApplicationId: objDescription.application_id,
					intPropertyId: objDescription.property_id,
					intMessageAggregatorId: objDescription.message_aggregator_id,
					intCustomerId: objDescription.customer_id,
					strElementSelector: "#js-create-application-message",
					strErrorSelector: "#js-sms-chat-error"
				} );
			}

			if( undefined != objDescription.lease_id && undefined != objDescription.customer_id && objDescription.lease_id.length > 0 && objDescription.customer_id.length > 0 ) {
				objChatPanel.handleInitiateResidentChat( {
					intLeaseId: objDescription.lease_id,
					intPropertyId: objDescription.property_id,
					intMessageAggregatorId: objDescription.message_aggregator_id,
					intCustomerId: objDescription.customer_id,
					strElementSelector: "#js-create-application-message",
					strErrorSelector: "#js-sms-chat-error"
				} );
			}
		}
	},
	processOnChat: function( objMessage ) {
		var objThis = this;
		var strFrom = objMessage.getAttribute( 'from' );
		var strType = objMessage.getAttribute( 'type' );
		var strMessageId = objMessage.getAttribute( 'id' );
		var intTime = objMessage.getAttribute( 'time' );
		var objBodyElement = objMessage.getElementsByTagName( 'body' );
		var objDelayElement = objMessage.getElementsByTagName( 'delay' );

		var objRequest = objMessage.getElementsByTagName( 'request' );
		var objConversation = objMessage.getElementsByTagName( 'conversation' );
		var strStatus = objMessage.getAttribute( 'status' );
		var strSenderName = objMessage.getAttribute( 'sender' );

		var objParameterElement = objMessage.getElementsByTagName( 'parameter' );
		if( 0 < objParameterElement.length ) {
			
			if( (objParameterElement[0]).hasAttribute( 'status' ) ) {
				strStatus = (objParameterElement[0]).getAttribute( 'status' );
			}
			if( (objParameterElement[0]).hasAttribute( 'sender' ) ) {
				strSenderName = (objParameterElement[0]).getAttribute( 'sender' );
			}
			if( (objParameterElement[0]).hasAttribute( 'time' ) ) {
				intTime = (objParameterElement[0]).getAttribute( 'time' );
			}
		}

		if( !strSenderName ) {
			strSenderName = strLeasingAgentName;
		}

		if( null === intTime ) {
			intTime = getCurrentUtcTime();
		}
		var strChatRoomId = Strophe.getNodeFromJid( strFrom );
		var strAction = objMessage.getAttribute( 'action' );
		var strBodytext = $( objBodyElement ).text();
		var objConversationNode = $( '#active-chats' ).find( '#' + strChatRoomId );
		var objOptions = '';
		var boolIsNewMessage = false;
		try {
			objOptions = $.parseJSON( $( "<div/>" ).html( Strophe.getText( objBodyElement[0] ) ).text() );
			if( 'remove_sms' === objOptions.action ) {
				if( 0 === objDelayElement.length ) {
					objChatPanel.removeSmsChatRequest( objMessage );
				}
				return true;
			}
		} catch( e ) {
			objOptions = '';
		}

		// To handle END or TRANSFER Chat events.
		if( null !== strStatus ) {
			switch( strStatus ) {
				case 'transfer':
					var strMessage = __( '{%s, senderName} has transferred the chat.', { senderName: strSenderName } );
					var strChatBubble = '<div class="clearfix" id="' + strMessageId + '"><div class="chat_status"><div class="body align-center">' + strMessage + '</div></div></div>';
					$( strChatBubble ).insertBefore( objConversationNode.find( '.js-conversation-history .conversation-messages .responder' ) );
					break;

				case 'end':
					if( ( strFrom !== objConnection.jid ) && ( null !== strChatRoomId.match( /^(entrata)/g ) ) ) {
						objThis.prepareAndCreateExpiredNode( strChatRoomId );
						EntrataChatPanel.endChat( strChatRoomId, false );
						EntrataChatPanel.saveJidUserNameAssociation( strFrom, strSenderName );
					} else {
						var strUsername = strFrom.split( '/' )[1];
						if( strUsername === objEntrataXmppChat.getJid().split( '@' )[0] ) {
							strSenderName = $( "#" + strChatRoomId ).find( "span.chat-recipient" ).text().trim();
						}
						strMessage = __( '{%s, 0} has ended the chat.', [strSenderName] );
						strChatBubble = '<div class="chat_status"><div id="' + strMessageId + '" class="body align-center">' + strMessage + '</div></div>';
						$( strChatBubble ).insertBefore( objConversationNode.find( '.js-conversation-history' ).find( '.chat-text-area' ) );
						objConversationNode.find( '.js-conversation-history' ).find( '.chat-text-area' ).removeClass( 'enterSmsMessage' ).addClass( 'hide' );
						objConversationNode.find( '.js-send-tools' ).addClass( 'hide' );
						EntrataChatPanel.saveJidUserNameAssociation( strUsername, strSenderName );

						objThis.prepareAndCreateExpiredNode( strChatRoomId );
						objThis.updateSessionChatData( strChatRoomId, false );
						setTimeout( objThis.saveAndEndChat, 1000, strChatRoomId );
						objCallbackReturnToActiveChats = {
							chat_room_id: strChatRoomId,
							action: function( strChatRoomId ) {
								$( '#resume-chat-section #' + strChatRoomId ).remove();
							}
						};

						if( true == $( '#resume-chat-section #' + strChatRoomId ).hasClass( 'hide' ) ) {
							$( '#resume-chat-section #' + strChatRoomId ).remove();
						}

						if( $( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomId ).length ) {
							$( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomId ).parent().remove();
						} else if( $( '.unclaimed-chat-messages' ).find( '.chat-messages.' + strChatRoomId ).length ) {
							$( '.unclaimed-chat-messages' ).find( '.chat-messages.' + strChatRoomId ).remove();
						}
						EntrataChatPanel.endChatFromProspect( strChatRoomId );

						// Wait until above saveAndEndChat function get execute to avoid wrong end message.
						setTimeout(() => {
							objEntrataXmppChat.joinOrLeaveChat( strChatRoomId, 'leave', true );
							objChatPanel.updateChatNoficationCount();
						}, MILLISECONDS_1_5_SECONDS);
					}
					break;

				case 'join':
					var strUsername = strFrom.split( '/' )[1];
					if( strUsername !== objEntrataXmppChat.getJid().split( '@' )[0] ) {
						strMessage = __( '{%s, 0} has joined the chat.', [ strSenderName ] );
						strChatBubble = '<div id="' + strMessageId + '" class="body align-center clearfix join-leave-chat-status">' + strMessage + '</div>';
						$( strChatBubble ).insertBefore( objConversationNode.find( '.js-conversation-history .conversation-messages .responder' ) );
						var objCurrentLeasingAgentsActiveNode = $('.active-chat-messages .' + strChatRoomId ).find('.current-leasing-agents');

						if( 'undefined' != typeof objCurrentLeasingAgentsActiveNode.html() ) {
							var strCurrentActiveLeasingAgents = objCurrentLeasingAgentsActiveNode.html();
							if( '' != strCurrentActiveLeasingAgents && -1 == strCurrentActiveLeasingAgents.indexOf(strSenderName ) ) {
								strCurrentActiveLeasingAgents += ', ' + strSenderName;
							} else if( '' == strCurrentActiveLeasingAgents ){
								strCurrentActiveLeasingAgents = ' You, ' + strSenderName;
							}
							$('.active-chat-messages .' + strChatRoomId ).find( '.group-chat-agents' ).removeClass( 'hide' );
							objCurrentLeasingAgentsActiveNode.html(strCurrentActiveLeasingAgents);
						}

						var arrMultiChat = [];
						var strMultiChat = sessionStorage.getItem( 'multi-chat' );

						if( null != strMultiChat ) {
							arrMultiChat = strMultiChat.split( ',' );
						}
						arrMultiChat.push(strChatRoomId);
						sessionStorage.setItem( 'multi-chat', arrMultiChat );
					}
					EntrataChatPanel.saveJidUserNameAssociation( strUsername, strSenderName );
					break;

				case 'leave':
					var strUsername = strFrom.split( '/' )[1];
					if( strUsername !== objEntrataXmppChat.getJid().split( '@' )[0] && 0 < $('#resume-chat-section #' + strChatRoomId ).length && false == $('#resume-chat-section #' + strChatRoomId + ' .chat-text-area').hasClass('hide') ) {
						strMessage = __( '{%s, 0} has left the chat.', [ strSenderName ] );
						strChatBubble = '<div id="' + strMessageId + '" class="body align-center clearfix join-leave-chat-status ">' + strMessage + '</div>';
						$( strChatBubble ).insertBefore( objConversationNode.find( '.js-conversation-history .conversation-messages .responder' ) );
						EntrataChatPanel.saveJidUserNameAssociation( strUsername, strSenderName );

						var objCurrentLeasingAgentsActiveNode = $('.active-chat-messages .' + strChatRoomId ).find('.current-leasing-agents');
						if( 'undefined' != typeof objCurrentLeasingAgentsActiveNode.html() ) {
							var strCurrentActiveLeasingAgents = objCurrentLeasingAgentsActiveNode.html();
							strCurrentActiveLeasingAgents = strCurrentActiveLeasingAgents.replace( ', ' + strSenderName, '' );
							if( strCurrentActiveLeasingAgents == ' You' ) {
								$('.active-chat-messages .' + strChatRoomId ).find( '.group-chat-agents' ).addClass( 'hide' );
							}
							objCurrentLeasingAgentsActiveNode.html(strCurrentActiveLeasingAgents);
						}
						EntrataChatPanel.saveChatRoomWithNumberOfLeasingAgents( strChatRoomId, strCurrentActiveLeasingAgents.split(',').length );
						if( intMaxAgentsAllowedInConversation <= EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( strChatRoomId ) ) {
							$( '#' + strChatRoomId ).find( '.chat-actions' ).find( '.add_leasing_agent' ).addClass( 'hide' );
						} else {
							$( '#' + strChatRoomId ).find( '.chat-actions' ).find( '.add_leasing_agent' ).removeClass( 'hide' );
						}
					}
					break;

				default:
					var strUsername = strFrom.split( '/' )[1];
					if( strUsername !== objEntrataXmppChat.getJid().split( '@' )[0] ) {
						var objCurrentLeasingAgentsActiveNode = $( '.active-chat-messages .' + strChatRoomId ).find( '.current-leasing-agents' );

						if( 'undefined' != typeof objCurrentLeasingAgentsActiveNode.html() ) {
							var strCurrentActiveLeasingAgents = objCurrentLeasingAgentsActiveNode.html();
							if( '' != strCurrentActiveLeasingAgents && -1 == strCurrentActiveLeasingAgents.indexOf( strSenderName ) ) {
								strCurrentActiveLeasingAgents += ', ' + strSenderName;
							} else if( '' == strCurrentActiveLeasingAgents ) {
								strCurrentActiveLeasingAgents = ' You, ' + strSenderName;
							}
							$( '.active-chat-messages .' + strChatRoomId ).find( '.group-chat-agents' ).removeClass( 'hide' );
							objCurrentLeasingAgentsActiveNode.html( strCurrentActiveLeasingAgents );
						}
					}
					break;
			}
			return true;
		} else {
			if( false == $('.chat-panel').hasClass( 'open' ) || sessionStorage.getItem( 'current_active_chat_room' ) != $("#resume-chat-section .acitve_chat_conversations.js-chat_box").attr('id') ) {
				boolIsNewMessage = true;
			}
		}

		if( 1 > objBodyElement.length ) {
			return true;
		}
		var body = objBodyElement[0];
		strMessage = Strophe.getText( body );
		// Do not show blank message. Normally this will come in case of Delivery report
		if( !strMessage ) {
			return true;
		}

		var arrstrNick = strFrom.split( '/' );
		var strNick = ( 1 < arrstrNick.length ) ? arrstrNick[1] : '';

		var strMarginClass = 'margin20-left';
		var strChatBubuleClass = 'chat-bubble';
		var strReport = '';
		var boolIsFromProspect = true;
		var strLeasingAgentNameLable = '';
		if( null !== strNick.match( /^(entrata)/g ) ) {
			strMarginClass = 'right margin20-right';
			strChatBubuleClass = 'chat-entrata';
			boolIsFromProspect = false;
			strReport = '<div class="align-right js-delivery-report"><i class="check-circle-lightgray"></i></div>';
			if( strLeasingAgentName != strSenderName ) {
				strLeasingAgentNameLable = strSenderName + ' - ';
			}
		}

		var strMessageToDisplay = strBodytext;

		if( null !== strSenderName && 0 < strSenderName.length ) {
			strMessageToDisplay = strSenderName.split( ' ' )[0] + ' : ' + strMessageToDisplay;
		}

		if( strLeasingAgentName == strSenderName ) {
			strMessageToDisplay = __( 'You : ' ) + strBodytext;
		}

		if( true == $( "#" + strChatRoomId ).hasClass( 'hide' ) && true == boolIsFromProspect ) {
			$( ".active-chat-messages ." + strChatRoomId ).addClass( 'unread' );
			$( ".active-chat-messages ." + strChatRoomId ).find( '.chat-message-status' ).removeClass( 'hide' );
		} else {
			$( ".active-chat-messages ." + strChatRoomId ).removeClass( 'unread' );
			$( ".active-chat-messages ." + strChatRoomId ).find( '.chat-message-status' ).addClass( 'hide' );
		}

		var strChatBubble = '<div class="clearfix margin10-bottom" id="' + strMessageId + '"><div class="' + strChatBubuleClass + ' clear"><div class="body chat-body">' + strBodytext + '</div>' + strReport + '</div><span class="clearfix"></span><p class="font10 italic chat-date-time ' + strMarginClass + '">' + strLeasingAgentNameLable + objThis.calculateTime( intTime ) + '</p></div>';
		$( strChatBubble ).insertBefore( objConversationNode.find( '.js-conversation-history .conversation-messages .responder' ) );

		$( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomId ).find( '.latest-msg' ).html( objChatPanel.truncateChatMessage( strMessageToDisplay ) );

		if( 0 < $( '#' + strMessageId ).length ) {
			$( '#' + strMessageId ).get(0).scrollIntoView();
		}

		if( true == boolIsFromProspect ) {
			if( 1 === $( "#" + strChatRoomId ).find( '.chat-text-area:focus' ).size() ) {
				setTimeout( function() {
					objEntrataXmppChat.sendRead( strChatRoomId, strMessageId );
				}, 1000 );
			} else {
				setTimeout( function() {
					objEntrataXmppChat.sendReceived( strChatRoomId, strMessageId );
				}, 1000 );
			}
		}

		var strUsername = strFrom.split( '/' )[1];
		if( strUsername !== objEntrataXmppChat.getJid().split( '@' )[0] ) {
			var strCallback = function() {
				parent.focus();
				window.focus();
				EntrataChatPanel.showChat( {chat_room_jid: strChatRoomId, target_tab: $( '#chats-tab' )} );
			};

			var intChatRequestMaxTime = 180; // 3 mins
			var intCloseTime = 1000 * intChatRequestMaxTime;

			var options = {
				title: strSenderName,
				options: {
					body: strBodytext,
					icon: objEntrataNotification.strIconUrl,
					lang: 'en-US',
					tag: strChatRoomId,
					closeTime: intCloseTime,
					requireInteraction: true,
					onClick: strCallback,
					storeObjects: true,
					onDenied: function() {
						objChatPanel.displayOnGoingChatNotification( strChatRoomId, strSenderName, strBodytext );
					}
				}
			};

			if( false === desktopNotification( options ) ) {
				objChatPanel.displayOnGoingChatNotification( strChatRoomId, strSenderName, strBodytext );
			}
		}

		if( true == boolIsFromProspect ) {
			objChatPanel.updateChatNoficationCount( boolIsNewMessage );
		}
	},
	prepareAndCreateExpiredNode: function( strChatRoomId ) {
		var arrstrMultiChat = sessionStorage.getItem( 'multi-chat' );
		var intUsers = 1;

		if( null != arrstrMultiChat ) {
			arrstrMultiChat = arrstrMultiChat.split( ',' );

			if( -1 != arrstrMultiChat.indexOf( strChatRoomId ) ) {
				intUsers = 2;
				arrstrMultiChat.splice( arrstrMultiChat.indexOf( strChatRoomId ), 1 );
				sessionStorage.setItem( 'multi-chat', arrstrMultiChat );
			}
		}

		if( !$( '.unclaimed-chat-messages' ).find( '.chat-messages.' + strChatRoomId ).length ) {
			var objNode = $( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomId );

			if( objNode.length ) {

				var strChatInitializeTime = objNode.data( 'chat-initialize-time' );
				var strDateTimeArray = strChatInitializeTime.split( " " );
				var strDate = strDateTimeArray[0];
				var strTime = strDateTimeArray[1] + ' ' + strDateTimeArray[2];
				var strDateArray = strDate.split( "/" );

				var strFormattedDateTime = strDateArray[2] + '-' + strDateArray[1] + '-' + strDateArray[0] + ' ' + strTime;
				var intUtcTimestamp = new Date( (new Date( strFormattedDateTime )).toUTCString() ).getTime();
				var strInitializeTime = intUtcTimestamp / 1000;

				var arrmixData = {
					applicant_name: objNode.data('applicant-name'),
					application_id: objNode.data( 'application-id' ),
					chat_initialize_time: strInitializeTime,
					chat_room: objNode.data( 'chat-room' ),
					chat_status: 'Expired',
					customer_id: null,
					users: intUsers,
					event_id: objNode.data( 'event-id' ),
					message_id: objNode.data( 'unique-id' ),
					message_type: 'chat',
					property_id: objNode.data( 'property_id' ),
					property_name: objNode.data( 'property-name' )
				};

				objChatPanel.createExpiredChatNode( arrmixData, '', true );
			}
		}
	},
	processOnReceipt: function( objMessage ) {
		var strMessageId = objMessage.getAttribute( 'id' );
		var strFrom = objMessage.getAttribute( 'from' );
		var strChatRoomId = Strophe.getNodeFromJid( strFrom );
		var objReceived = $( objMessage ).find( 'received' );
		var objRead = $( objMessage ).find( 'read' );
		var objConversationNode = $( '#active-chats' ).find( '#' + strChatRoomId );

		if( 0 < objReceived.length ) {
			var strMsgId = objReceived.attr( 'id' );
			objConversationNode.find( '#' + strMsgId + ' .js-delivery-report .check-circle-lightgray' ).removeClass( 'check-circle-lightgray' ).addClass( 'check-circle-lightgray' );
		}

		if( 0 < objRead.length ) {
			var strMessageReadId = objRead.attr( 'id' );
			objConversationNode.find( '#' + strMessageReadId + ' .js-delivery-report .check-circle-lightgray' ).removeClass( 'check-circle-lightgray' ).addClass( 'check-circle-green' );
		}
	},
	processRemoveChatRequest: function( objMessage ) {

		if( 'true' == objMessage.is_add_to_chat ) {
			this.addToChatRoomRequest( objMessage );
			return;
		}
		var strChatRoom = objMessage.chat_room_jid;
		var boolIsFromAddToChat = objMessage.is_from_add_to_chat;
		var intChatRoomWithNumberOfLeasingAgents = EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( strChatRoom );
		var intNotificationId = $('.sms-text-messages .' + strChatRoom).data('message-id');
		if( ( 'true' == objMessage.is_end_chat ) && 0 < $('.ongoing-property-chat-messages #' + strChatRoom) .length ) {
			$('.ongoing-property-chat-messages #' + strChatRoom ).remove();
			psi.patterns.ajaxRequest( {
				url: '/?module=entrata_chat_panelxxx&action=update_notification',
				data: { 'user_chat_room': strChatRoom },
			} );
		}

		if( 'true' == objMessage.end_all ) {
			$('.ongoing-property-chat-messages #' + strChatRoom ).remove();
			EntrataChatPanel.endChatFromProspect( strChatRoom );
			return;
		}

		if( 0 < $('.unclaimed-chat-messages .unclaimed-chat.' + strChatRoom ).length ) {
			var arrmixSelectedLeasingAgents = [];
			if( null != objMessage.selected_leasing_agents ) {
				arrmixSelectedLeasingAgents = objMessage.selected_leasing_agents.split( ',' );
			}
			var strSerializedData = $('.unclaimed-chat.' + strChatRoom ).find('#serialized_data').val();
			var arrmixData = JSON.parse( strSerializedData );
			if( null !== arrmixData.current_leasing_agents && undefined !== arrmixData.current_leasing_agents && -1 == arrmixData.current_leasing_agents.indexOf( objMessage.sender ) ) {
				arrmixData.current_leasing_agents = arrmixData.current_leasing_agents + ', ' + objMessage.sender;
			} else if( undefined == arrmixData.current_leasing_agents ) {
				arrmixData.current_leasing_agents = objMessage.sender;
			}
			intChatRoomWithNumberOfLeasingAgents = arrmixData.current_leasing_agents.split(',').length;
			if( 'true' == boolIsFromAddToChat || 'undefined' == boolIsFromAddToChat ) {
				if(-1 == $.inArray( objEntrataXmppChat.getJid().split( '@' )[0], arrmixSelectedLeasingAgents ) || 'undefined' == arrmixSelectedLeasingAgents || intChatRoomWithNumberOfLeasingAgents >= intMaxAgentsAllowedInConversation ) {
					var strAllActiveChatNode = objChatPanel.createOngoingPropertyChatNode( arrmixData, false );
					$( '.ongoing-property-chat-messages' ).prepend( strAllActiveChatNode );
					$('.unclaimed-chat-messages .unclaimed-chat.' + strChatRoom ).remove();
				} else {
					$( '.unclaimed-chat.' + strChatRoom ).find( '#serialized_data' ).val( JSON.stringify( arrmixData ) );
				}
			}

			if( intChatRoomWithNumberOfLeasingAgents >= intMaxAgentsAllowedInConversation && 'true' == objMessage.is_joined_chat && null == boolIsFromAddToChat ) {

				var strAllActiveChatNode = objChatPanel.createOngoingPropertyChatNode( arrmixData, false );
				$( '.ongoing-property-chat-messages' ).prepend( strAllActiveChatNode );
				$('.unclaimed-chat-messages .unclaimed-chat.' + strChatRoom ).remove();
			}

		} else if( 0 == $('.active-chat-messages .' + strChatRoom ).length && 0 < $('.ongoing-property-chat-messages #' + strChatRoom ).length ) {
				var objCurrentLeasingAgentsNode = $( '.ongoing-property-chat-messages #' + strChatRoom ).find( '.current-leasing-agents' );
				if( undefined !== objCurrentLeasingAgentsNode ) {
					var strCurrentLeasingAgents = objCurrentLeasingAgentsNode.html();
					var arrstrCurrentLeasingAgents = strCurrentLeasingAgents.split( ',' ).filter(n => n);
					$( '.ongoing-property-chat-messages #' + strChatRoom + ' .group-icon').show();
					if( 'true' == objMessage.is_joined_chat ) {
						if( -1 == strCurrentLeasingAgents.indexOf( objMessage.sender ) ) {
							if( 0 == arrstrCurrentLeasingAgents.length ) {
								strCurrentLeasingAgents = objMessage.sender;
							} else {
								strCurrentLeasingAgents += ', ' + objMessage.sender;
							}
						}
					} else {
						arrstrCurrentLeasingAgents = arrstrCurrentLeasingAgents.filter( function( value, index, arr ) {
							return value.trim() != objMessage.sender;
						} );

						strCurrentLeasingAgents = arrstrCurrentLeasingAgents.join( ',' );
					}
					var intCountOfLeasingAgents = strCurrentLeasingAgents.split( ',' ).length;
					if( intMaxAgentsAllowedInConversation <= intCountOfLeasingAgents ) {
						$( '.ongoing-property-chat-messages #' + strChatRoom ).find( '.join-chat-button' ).addClass( 'hide' );
					} else {
						$( '.ongoing-property-chat-messages #' + strChatRoom ).find( '.join-chat-button' ).removeClass( 'hide' );
					}
					objCurrentLeasingAgentsNode.html( strCurrentLeasingAgents );
					var strSerializedData = $( '.ongoing-property-chat-messages #' + strChatRoom ).find('#serialized_data').val();
					var arrmixData = JSON.parse( strSerializedData );
					arrmixData.current_leasing_agents = strCurrentLeasingAgents;
					$( '.ongoing-property-chat-messages #' + strChatRoom ).find( '#serialized_data' ).val( JSON.stringify( arrmixData ) );
				}
				intChatRoomWithNumberOfLeasingAgents = intCountOfLeasingAgents;
		} else if( 0 < $('.active-chat-messages .' + strChatRoom ).length ) {
			var objCurrentLeasingAgentsNode = $( '.active-chat-messages .' + strChatRoom ).find( '.current-leasing-agents' );
			var strCurrentActiveLeasingAgents = objCurrentLeasingAgentsNode.html();

			if( 'true' !== objMessage.is_agent_left ) {
				if( '' != strCurrentActiveLeasingAgents && -1 == strCurrentActiveLeasingAgents.indexOf( objMessage.sender ) ) {
					strCurrentActiveLeasingAgents += ', ' + objMessage.sender;
				} else if( '' == strCurrentActiveLeasingAgents ) {
					strCurrentActiveLeasingAgents = ' You, ' + objMessage.sender;
				}
				$( '.active-chat-messages .' + strChatRoom ).find( '.group-chat-agents' ).removeClass( 'hide' );
				objCurrentLeasingAgentsNode.html( strCurrentActiveLeasingAgents );
			} else {
				if( 'undefined' != typeof strCurrentActiveLeasingAgents ) {
					strCurrentActiveLeasingAgents = strCurrentActiveLeasingAgents.replace( ', ' + objMessage.sender, '' );
					if( strCurrentActiveLeasingAgents == ' You' ) {
						$( '.active-chat-messages .' + strChatRoom ).find( '.group-chat-agents' ).addClass( 'hide' );
					}
					objCurrentLeasingAgentsNode.html( strCurrentActiveLeasingAgents );
				}
			}
			var arrAddAgents = strCurrentActiveLeasingAgents.split( ',' );
			intChatRoomWithNumberOfLeasingAgents = arrAddAgents.length;
			if( intMaxAgentsAllowedInConversation <= intChatRoomWithNumberOfLeasingAgents ) {
				$( '#' + strChatRoom ).find( '.chat-actions' ).find( '.add_leasing_agent' ).addClass( 'hide' );
				$( '.ongoing-property-chat-messages #' + strChatRoom ).find( '.join-chat-button' ).addClass( 'hide' );
			} else {
				$( '#' + strChatRoom ).find( '.chat-actions' ).find( '.add_leasing_agent' ).removeClass( 'hide' );
				$( '.ongoing-property-chat-messages #' + strChatRoom ).find( '.join-chat-button' ).removeClass( 'hide' );
			}

		}

		EntrataChatPanel.saveChatRoomWithNumberOfLeasingAgents( strChatRoom, intChatRoomWithNumberOfLeasingAgents );
		EntrataChatPanel.saveJidUserNameAssociation( objMessage.senderJid, objMessage.sender );
		$('.text-section.' + strChatRoom ).remove();

		var objElem = $( '#sms-text-section #' + strChatRoom );
		if( 0 < objElem.length && false == objElem.hasClass('hide') ) {
			objElem.find('.back-to-active-chats').trigger('click');
		}
		$( '#sms-text-section #' + strChatRoom ).remove();

		if( $( '#chat_popup_' + strChatRoom ).length ) {
			objChatPanel.removeNotification( $( '#chat_popup_' + strChatRoom ) );
		}
		var objElement = $( ".unclaimed-chat-messages" ).find( ".unclaimed-chat." + strChatRoom ).data( "is-from-add-to-chat" );
		if( 'false' == objElement || 'undefined' == objElement || null == objElement ) {
			clearInterval( arrmixIntervals[strChatRoom] );
			clearInterval( arrmixAddToChatIntervals[strChatRoom] );
		}
		objChatPanel.updateChatNoficationCount();
	},
	calculateTime: function( intTime ) {
		var intCurrentDateTime = new Date();
		var intMessageDateTime = new Date( intTime * 1000 );
		var strDateTimeLabel   = '';
		if( intCurrentDateTime.getFullYear() === intMessageDateTime.getFullYear() && intCurrentDateTime.getMonth() === intMessageDateTime.getMonth() && intCurrentDateTime.getDate() === intMessageDateTime.getDate() ) {
			strDateTimeLabel = __( '{%t,0,TIME_SHORT}', [intMessageDateTime] );
		} else if( intCurrentDateTime.getFullYear() === intMessageDateTime.getFullYear() && intCurrentDateTime.getMonth() === intMessageDateTime.getMonth() && intCurrentDateTime.getDate() === ( intMessageDateTime.getDate() + 1 ) ) {
			strDateTimeLabel = __( 'Yesterday, {%t,0,TIME_SHORT}', [intMessageDateTime] );
		} else {
			strDateTimeLabel = __( '{%t,0,DATETIME_ALPHA_SHORT}', [intMessageDateTime] );
		}

		return strDateTimeLabel;
	},
	initChatRequests: function () {
		var objThis = this;
		$( '.js-launch-chat' ).removeClass( 'hide' );

		$("#unclaimed-chats").on( 'click', '.start-chat-button', function( e ){
			EntrataChatPanel.saveChatRoomWithNumberOfLeasingAgents( $(this).data('chat-room-id'), EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( $(this).data('chat-room-id') ) + 1 );
			objThis.startChat( $(this), objThis, false );
			var intChatRoomWithNumberOfLeasingAgents = EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( $(this).data('chat-room-id') );

			if( intMaxAgentsAllowedInConversation <= intChatRoomWithNumberOfLeasingAgents ) {
				$( '#' + $(this).data('chat-room-id') ).find( '.chat-actions' ).find( '.add_leasing_agent' ).addClass( 'hide' );
			} else {
				$( '#' + $(this).data('chat-room-id') ).find( '.chat-actions' ).find( '.add_leasing_agent' ).removeClass( 'hide' );
			}
		} );

		$("#ongoing-property-chats").on( 'click', '.join-chat-button', function( e ){
			var strChatRoom = $(this).data('chat-room-id');
			var strSerializedData = $('.ongoing-property-chat-messages #' + strChatRoom).find('#serialized_data').val();
			var arrmixData = JSON.parse( strSerializedData );
			var strUnclaimedChatNode = objChatPanel.createUnclaimedNode( arrmixData, '' );
			arrobjUnclaimedMessage[strChatRoom] = arrmixData;
			$('#unclaimed-chats').prepend( strUnclaimedChatNode);
			var objElm = $('#unclaimed-chats .' + strChatRoom + ' .start-chat-button');
			objThis.startChat( objElm, objThis, true );
			$('.ongoing-property-chat-messages #' + strChatRoom).addClass('hide');
			EntrataChatPanel.saveChatRoomWithNumberOfLeasingAgents( strChatRoom, EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( strChatRoom ) + 1 );
			var intChatRoomWithNumberOfLeasingAgents = EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( strChatRoom );

			if( intMaxAgentsAllowedInConversation <= intChatRoomWithNumberOfLeasingAgents ) {
				$( '#' + strChatRoom ).find( '.chat-actions' ).find( '.add_leasing_agent' ).addClass( 'hide' );
			} else {
				$( '#' + strChatRoom ).find( '.chat-actions' ).find( '.add_leasing_agent' ).removeClass( 'hide' );
			}
		} );

		$( '#resume-chat-section' ).on( 'click', '.send-reply', function(  event ) {
			event.stopPropagation();
			var objParentNode = $( this ).parents( '.active_chat_conversations' );
			var objTextAreaNode = objParentNode.find( '.chat-text-area' );
			var strMessage = objTextAreaNode.val().trim();

			// What should be the SMS message max length
			if( 1000 < strMessage.length ) {
				return false;
			}

			var strChatRoomJid = objParentNode.attr( 'id' );

			if( '' === strMessage ) {
				return false;
			}
			event.preventDefault();
			var strChatRoomJid = objEntrataXmppChat.getFullJid( strChatRoomJid );
			objEntrataXmppChat.sendMsg( strChatRoomJid, strMessage, 'groupchat', true );
			objTextAreaNode.val( '' );
			return true;
		} );

		$( '#resume-chat-section' ).on( "keyup", '.chat-text-area', function( event ){
			event.stopPropagation();
			var strMessage = $( this ).val().trim();
			if( 1000 < strMessage.length ) {
				return false;
			}
			var key = event.which;
			var strChatRoomJid = $( this ).data( 'chat-room-jid' );

			if( 8 == key ) {
				if( '' == strMessage ) {
					objEntrataXmppChat.sendPaused( strChatRoomJid );
				}
			}
		})

		$( '#resume-chat-section' ).on( 'click', '.add_leasing_agent', function(  event ) {
			var strChatRoomJid = sessionStorage.getItem( 'current_active_chat_room' );
			var strCurrentLeasingAgents = $('.active-chat-messages .' + strChatRoomJid ).find('.current-leasing-agents').html();
			var intPropertyId = $('.active-chat-messages .' + strChatRoomJid ).data('property_id');
			var objElement = $( "#" + strChatRoomJid + ' .js-conversation-history ' );

			psi.patterns.ajaxRequest( {
				type: 'POST',
				url: '/?module=entrata_chat_panelxxx&action=get_available_leasing_agents',
				datatype: 'JSON',
				data:  'property_id=' + intPropertyId + '&current_leasing_agents=' + strCurrentLeasingAgents,
				beforeSend: function() {
					psi.patterns.showLoadingImage( {strElementSelector: '#leasing_agent_list'} );
					objElement.find( '#leasing_agent_list' ).removeClass('hide');
					objElement.find( '#leasing_agent_list' ).css( 'display','block' );
				},
				success: function( objResponse ) {
					psi.patterns.removeLoadingImage( {strElementSelector: '#leasing_agent_list'} );
					objElement.find( '#leasing_agent_list' ).removeClass('hide');
					objElement.find( '#leasing_agent_list' ).css( 'display','block' );
					if( '' != objResponse ) {
						$( "#resume-chat-section #" + strChatRoomJid + " .js-conversation-history .conversation-messages" ).attr( 'style', 'max-height:calc(100vh - 610px) !important;' );
						objElement.find( '#leasing_agent_list' ).html( objResponse );
					} else {
						$( "#resume-chat-section #" + strChatRoomJid + " .js-conversation-history .conversation-messages" ).attr( 'style', 'max-height:calc(100vh - 500px) !important;' );
						objElement.find( '#leasing_agent_list' ).html( '<p class="alert error no-agent-avaialable slim">' + __('No Leasing Agents Available.') + '</p>' );
						$.when( $('#leasing_agent_list').show().delay(5000).fadeOut()).done(function(){
							$( "#resume-chat-section #" + strChatRoomJid + " .js-conversation-history .conversation-messages" ).attr( 'style', 'calc(~"100vh - 450px") !important;' );
						});
					}
				}
			});
		});

		$( '#resume-chat-section' ).on( "keypress", '.chat-text-area', function( event ){
			event.stopPropagation();
			var strMessage = $( this ).val().trim();
			var key = event.which;
			var strChatRoomJid = $( this ).data( 'chat-room-jid' );

			if( 1000 < strMessage.length ) {
				return false;
			}

			if( 13 !== key ) {
				objEntrataXmppChat.sendComposing( strChatRoomJid );
				return true;
			}

			if( 13 === key ) {
				objEntrataXmppChat.sendPaused( strChatRoomJid );
				if( '' === strMessage ) {
					return false;
				}
				event.preventDefault();
				var strChatRoomJid = objEntrataXmppChat.getFullJid( strChatRoomJid );
				objEntrataXmppChat.sendMsg( strChatRoomJid, strMessage, 'groupchat', true );
				$( this ).val( '' );
			}

			return true;
		} );

		$( '#resume-chat-section' ).on( "click", '.endChat', function( event ){
			event.stopPropagation();
			var strChatRoomJid = $( this ).parents( '.active_chat_conversations' ).attr( 'id' );
			clearInterval( arrmixAddToChatIntervals[strChatRoomJid] );
			$('#resume-chat-section #' + strChatRoomJid).find( '.js-conversation-history' ).find( '#leasing_agent_list' ).addClass('hide');
			$('#resume-chat-section #' + strChatRoomJid).find( '.js-conversation-history' ).find( '#leasing_agent_list' ).css( 'display','none' );
			psi.patterns.ajaxRequest( {
				url: '/?module=entrata_chat_panelxxx&action=end_company_user_chat',
				data: { 'chat_room': strChatRoomJid },
				success: function( objResponse ) {
					if( false == objResponse.status ) {
						return false;
					}
					if( 0 == objResponse.data.ongoing_chat_count ) {
						objThis.prepareAndCreateExpiredNode( strChatRoomJid );
						objThis.endChat( strChatRoomJid, true );
						$('.ongoing-property-chat-messages #' + strChatRoomJid).remove();
						$('#resume-chat-section #' + strChatRoomJid).find( '#leasing_agent_list #add-agent' ).removeClass('disable-links');
					} else {
						var strMyChatRooms = sessionStorage.getItem( 'my_chat_rooms' );
						var arrMyChatRooms = ( null == strMyChatRooms || '' == strMyChatRooms ) ? [] : strMyChatRooms.split( ',' );
						arrMyChatRooms = arrMyChatRooms.filter( function( value, index, arr ) {
							return value != strChatRoomJid;
						} );
						objChatPanel.setSessionStorage( 'my_chat_rooms', arrMyChatRooms.join() );
						sessionStorage.removeItem( 'current_active_sms_chat_room' );

						if( 0 == $('.ongoing-property-chat-messages #' + strChatRoomJid).length ) {
							var strSerializedData = $( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).find('#serialized_data').val();
							var arrmixData = JSON.parse( strSerializedData );
							arrmixData.current_leasing_agents = objResponse.data.leasing_agents;
							var strAllActiveChatNode = objChatPanel.createOngoingPropertyChatNode( arrmixData, false );
							$( '.ongoing-property-chat-messages' ).prepend( strAllActiveChatNode );
						} else {
							$('.ongoing-property-chat-messages #' + strChatRoomJid).removeClass('hide');
						}

						$( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).remove();
						$( '#resume-chat-section' ).find( '#' + strChatRoomJid ).remove();
						objThis.returnToActiveChat();
						objChatPanel.updateChatNoficationCount();
						objEntrataXmppChat.joinOrLeaveChat( strChatRoomJid, 'leave' );
						var intChatRoomWithNumberOfLeasingAgents = EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( strChatRoomJid ) - 1;
						EntrataChatPanel.saveChatRoomWithNumberOfLeasingAgents( strChatRoomJid, intChatRoomWithNumberOfLeasingAgents );
					}
				}
			} );
		});

		$( '#active-chats' ).on( 'click', '.resume-chat-button', function( event ){
			var strElement = event.target.nodeName;
			var strChatRoom = $( this ).data( 'chat-room-id' );

			var strApplicationId = $( this ).data( 'application-id' );
			if( ( 'use' == strElement || 'svg' == strElement ) && 'entrata-svg-icon fill- large' != event.target.classList.value ) {
				return;
			}

			if( !$( '#active-chats' ).find( '#' + strChatRoom ).length || true == $(this).hasClass('chats-loaded') ) {
				objEntrataXmppChat.acceptChat( strChatRoom );
			}
			if( $( '#chat_popup_' + strChatRoom ).length ) {
				objChatPanel.removeNotification( $( '#chat_popup_' + strChatRoom ) );
			}

			$( '.active-chat-messages .' + strChatRoom ).removeClass( 'unread' );
			$( ".active-chat-messages ." + strChatRoom ).find( '.chat-message-status' ).addClass( 'hide' );
			objThis.showChatConversation( strChatRoom );
			objChatPanel.setSessionStorage( 'current_active_chat_room', strChatRoom );
			objChatPanel.updateChatNoficationCount();
			if( -1 == $.inArray( strChatRoom, objChatPanel.strUserChatRooms ) ) {
				objChatPanel.strUserChatRooms.push( strChatRoom );
			}
		} );

		$( '#active-chats' ).on("click", '.back-to-active-chats', function( event ){
			event.stopPropagation();
			objThis.returnToActiveChat();
			sessionStorage.removeItem( 'current_active_chat_room' );
		});

		$( '#chat-inner-content' ).on("click", '#sms-text-section .back-to-active-chats', function( event ){
			event.stopPropagation();
			var objSmsTextSection = $( '#sms-text-section' );
			$( this ).find( '.text-message-status' ).removeClass( 'pad5' ).text( '' );
			var objSmsConversationDiv = $(this).parents('.active_chat_conversations');
			if( false == objSmsConversationDiv.find('.chat-text-area').is(':visible') && '' == objSmsConversationDiv.find('.chat-text-area').val() ) {
				objSmsConversationDiv.remove();
			}
			$( '#sms-text-section' ).find('.sms-text-messages' ).removeClass('hide');
			objSmsConversationDiv.addClass('hide');
			objSmsConversationDiv.find('.js-conversation-history .we_chat_template_content').addClass( 'hide' );
			objSmsConversationDiv.find( '.js-conversation-history .whatsapp_template_content' ).addClass( 'hide' );
			sessionStorage.removeItem('current_active_sms_chat_room');
		});

		$('#chat-inner-content').on('click', '#sms-text-section .send-reply', function( event ) {
			var strMessage = $( this ).parents('.js-conversation-history').find('.chat-text-area').val().trim();
			var objWeChatTemplateElement = $( this ).parents('.js-conversation-history').find('#we_chat_templates');
			var boolIsWeChatTemplateMessage = ( 0 < objWeChatTemplateElement.length && false != objWeChatTemplateElement.val() );
			var objWhatsappTemplateElement = $( this ).parents( '.js-conversation-history' ).find( '#whatsapp_templates' );
			var boolIsWhatsappTemplateMessage = ( 0 < objWhatsappTemplateElement.length && 0 !== objWhatsappTemplateElement.val().trim().length );

			// What should be the SMS message max length
			if( 1000 < strMessage.length ) {
				return false;
			}

			var strChatRoomJid = $( this ).parents('.js-chat_box').attr( 'id' );

			if( 0 === strMessage.length ) {
				return false;
			}

			var isWhatsAppTemplateMessage = false;
			if( true === boolIsWhatsappTemplateMessage ) {
				isWhatsAppTemplateMessage = true;
			}

			var intMessageAggregatorId = $( ".sms-text-messages" ).find( "." + strChatRoomJid ).attr( "data-message-aggregator-id" );
			event.preventDefault();
			var strMessageConversationId = objThis.getMessageId();
			objThis.sendSms( strMessage, strChatRoomJid, isWhatsAppTemplateMessage, strMessageConversationId, intMessageAggregatorId );
			if( true === boolIsWeChatTemplateMessage || true === boolIsWhatsappTemplateMessage ) {
				strMessage = 'Sending Message...';
			}

			var objElement = $( '#sms-text-section .sms-text-messages' ).find( '.' + strChatRoomJid );
			var intNotificationId = objElement.data( "message-id" );

			var options = {
				strMessage: strMessage,
				strChatRoomJid: strChatRoomJid,
				intNotificationId: intNotificationId,
				strClass: 'entrata',
				strMessageId: strMessageConversationId,
				intTime: ( new Date().getTime() / 1000 ),
				intMessageAggregatorId: intMessageAggregatorId,
				isUpdatedTimer: false,
				is_from_prospect: false,
				msg_status: MSG_STATUS_PENDING
			};

			objThis.postMessageInConversationDiv( options, false );

			$( this ).parents('.js-conversation-history' ).find( '.we_chat_template_content').addClass( 'hide' );
			$( this ).parents('.js-conversation-history' ).find( '.whatsapp_template_content').addClass( 'hide' );
			$( this ).parents('.js-conversation-history').find('.chat-text-area').css( 'display', 'block' );
			$( this ).parents('.js-conversation-history').find('.chat-text-area').val('');
			var objElement = $('.sms-text-messages .' + strChatRoomJid );
			objElement.find( '.text-alert-message' ).html( __( '<span class="text-message">You: {%s,0}</span>', [objChatPanel.truncateChatMessage( strMessage )] ) );
			objElement.find( '.messaged-time' ).html( __( '{%t,0,TIME_SHORT}', [getLocalTime(getCurrentUtcTime())] ) );
		} );

		$('#chat-inner-content').on( 'keypress', '#sms-text-section .js-chat_box .chat-text-area', function( event ) {
			if( 13 == event.which ) {
				$(this).parents('.js-chat_box').find('.send-reply').trigger('click');
				$(this).val('');
			}
		} );

		$('#chat-inner-content').on( "click", "#sms-text-section .js-chat_box #end-chat", function() {
			$( this ).addClass( "hide" );
			$( this ).parents('.js-send-tools').find('.js-end-chat-confirmation').removeClass( "hide" );
			var textNode = $(".active_chat_conversations").not( '.hide' );
			if( true == $( '#view-selected-properties' ).hasClass( 'hide' ) ) {
				textNode.children( '.js-conversation-history' ).find( '.text-message' ).removeClass( 'text-message' );
			} else {
				textNode.children( '.js-conversation-history' ).find( '.text-message' ).removeClass( 'text-message-logged-in-properties' );
			}
			var strChatRoomJid = $( this ).parents( ".js-chat_box" ).attr( "id" );

			//For safe purpose, clear the Whatsapp Messages WrapUpTime interval if not cleared.
			objChatPanelWhatsappTemplate.clearWrapUpTimeInterval( strChatRoomJid );
			objChatPanelSmsTemplate.clearWrapUpTimeInterval( strChatRoomJid );

			var intNotificationId = $('.sms-text-messages .' + strChatRoomJid ).data('message-id');
			objThis.updateSmsNotification( intNotificationId, strChatRoomJid, true );
			objThis.endSmsChat( strChatRoomJid, true );
		} )
		.on( "click", ".js-chat_box .js-end-chat", function() {
			var strChatRoomJid = $( this ).parents( ".js-chat_box" ).attr( "id" );
			var intNotificationId = $('.sms-text-messages .' + strChatRoomJid ).data('message-id');
			objThis.updateSmsNotification( intNotificationId, strChatRoomJid, true );
			objThis.endSmsChat( strChatRoomJid, true );
		} )
		.on( "click", ".js-chat_box .js-cancel-end-chat", function() {
			$( this ).parents('.js-send-tools').find('.js-end-chat-confirmation').addClass( "hide" );
			$( this ).parents('.js-send-tools').find('#end-chat').removeClass( "hide" );
			if( true == $('#sms-text-tab').hasClass( 'selected' ) ) {
				var textNode = $(".active_chat_conversations").not( '.hide' );
				if( true == $( '#view-selected-properties' ).hasClass( 'hide' ) ) {
					textNode.children( '.js-conversation-history' ).find( '.conversation-messages' ).addClass( 'text-message' );
				} else {
					textNode.children( '.js-conversation-history' ).find( '.conversation-messages' ).addClass( 'text-message-logged-in-properties' );
				}
			}
		} )

		$('#expired-chats')
			.on( 'click', '.expired-chats', function(){
				var intReferenceId = $( this ).data( 'event-id' );
				var strChatRoom = $( this ).data( 'chat-room' );
				objThis.loadExpiredChatConversation( strChatRoom, intReferenceId );
			} )
			.on( 'click', '.profile' , function(e) {
				e.stopImmediatePropagation();
				e.stopPropagation();
				loadApplication( $( this ).data( 'application-id' ), $( this ).data( 'customer_id' ), $( this ).data( 'lease_id' ), $( this ).data( 'campaign_target_id' ) );
				return false;
			} )
			.on( 'click', '.back-to-expired-chats', function(){
				$( '.expired-chat-messages' ).removeClass( 'hide' );
				$( this ).parents( '.coversation-wrapper' ).addClass( 'hide' ).find( '.chat-history' ).addClass( 'hide' );
				$('.js-conversation-history .conversation_error').remove
			} )
			.on( 'click', '.seperate-expired-chats', function(e){
				e.stopPropagation();
				var intReferenceId = $( this ).data( 'event-id' );
				var strChatRoom = $( this ).parents( '.expired-chats' ).data( 'chat-room' );
				objThis.loadExpiredChatConversation( strChatRoom, intReferenceId );
			} )
	},
	loadExpiredChatConversation: function( strChatRoom, intReferenceId ){
		var objThis = this;
		$( '.expired-chat-messages' ).addClass( 'hide' );
		$( '#' + strChatRoom + '-expired' ).removeClass( 'hide' );
		$( '#' + strChatRoom + '-expired' ).find( '#' + intReferenceId ).removeClass( 'hide' );

		if( $( '#' + strChatRoom + '-expired .js-conversation-history #' + intReferenceId ).hasClass( 'loaded' ) ) {
			$( '#' + strChatRoom + '-expired .js-conversation-history #' + intReferenceId ).removeClass( 'hide' );
		} else {
			var strUrl = '/?module=entrata_chat_panelxxx&action=load_expired_chat_conversation';

			psi.patterns.ajaxRequest( {
				url: strUrl,
				type: 'POST',
				dataType: 'JSON',
				data: { 'event_id': intReferenceId },
				beforeSend: function() {
					psi.patterns.showLoadingImage( {strElementSelector: '.js-conversation-history'} );
				},
				success: function( objResult ) {
					psi.patterns.removeLoadingImage( {strElementSelector: '.js-conversation-history'} );

					if( false == objResult.status ) {
						var strError = '<p class="conversation_error alert error slim">' + objResult.message + '</p>';
						$( '#' + strChatRoom + '-expired .js-conversation-history' ).html( strError );
						return false;
					}

					var strChatBubble = '';

					$.each( objResult.message, function( index, arrData ){
						var strMarginClass = 'margin20-left';
						var strChatBubuleClass = 'chat-bubble';
						var strReport = '';
						var strBodytext = arrData.msg
						var intTime = arrData.time;
						var strStatus = '';
						var strSender = '';

						if( 'string' === typeof arrData.status ) {
							strStatus = ( arrData.status ).toLowerCase();
						}

						if( 0 == arrData.is_prospect ) {
							strSender = arrData.sender;

							if( strLeasingAgentName == strSender ) {
								strSender = '';
							}

							if( '' != strSender ) {
								strSender += ' - ';
							}
							strMarginClass = 'right margin20-right';
							strChatBubuleClass = 'chat-entrata';
							strReport = '<div class="align-right js-delivery-report"><i class="check-circle-lightgray"/></div>';
						}

						if( 'transfer' === strStatus || 'end' === strStatus ) {
							strChatBubble += '<div class="clearfix margin10-bottom" id="' + arrData.msg_id + '"><div class="chat_status expired-chat-status"><div class="body align-center">' + strBodytext + '</div></div></div>';
						} else if( 'leave' === strStatus || 'join' === strStatus ) {
							strChatBubble += '<div class="clearfix margin10-bottom" id="' + arrData.msg_id + '"><div class="chat_status expired-chat-status"><div class="body align-center">' + strBodytext + '</div></div></div>';
						} else {
							strChatBubble += '<div class="clearfix margin10-bottom" id="' + arrData.msg_id + '"><div class="' + strChatBubuleClass + ' clear"><div class="body chat-body">' + strBodytext + '</div>' + strReport + '</div><span class="clearfix"></span><p class="font10 chat-date-time italic ' + strMarginClass + '">' + strSender + ' ' + objThis.calculateTime( intTime ) + '</p></div>';
						}

					} );

					$( '#' + strChatRoom + '-expired .js-conversation-history #' + intReferenceId ).removeClass( 'hide' ).html( strChatBubble );
					$( '#' + strChatRoom + '-expired .js-conversation-history #' + intReferenceId ).addClass( 'loaded' );
				}
			} );
		}
	},
	addMessageInConversation: function( options ) {

	},
	showChatConversation: function( strChatRoom ) {
		$( '.active-chat-messages' ).addClass( 'hide' );
		$( '#resume-chat-section .js-chat_box' ).addClass( 'hide' );
		$( '#active-chats #resume-chat-section' ).find( '#' + strChatRoom ).removeClass( 'hide' );
	},
	returnToActiveChat: function() {
		$( '.active-chat-messages' ).removeClass( 'hide' );
		$( '#active-chats' ).find( '.js-chat_box' ).addClass( 'hide' );
		$( '#resume-chat-section .active_chat_conversations' ).each( function(){
			var strChatRoomId = $( this ).attr( 'id' );
			if( 0 >= $( '.active-chat-messages' ).find( '.' + strChatRoomId ) ) {
				$( this ).remove();
			}
		} )
	},
	buildConversationDetails: function( strChatRoom, objMessage, boolIsExistingConversation ){
		var objThis = this;
		if( 0 < $( '#resume-chat-section' ).find( '#' + strChatRoom ).length ) {
			$( '#resume-chat-section' ).find( '#' + strChatRoom ).find( '.chat-text-area' ).removeClass( "hide" );
			$( '#resume-chat-section' ).find( '#' + strChatRoom ).find( '.js-send-tools' ).removeClass( 'hide' );
			$( '#resume-chat-section' ).find( '#' + strChatRoom ).find( '.chat_status' ).remove();
			return true;
		}

		var objConversationElement = $( '#online_chat_template' ).clone();
		$( objConversationElement ).attr( { id: strChatRoom } );
		$( objConversationElement ).addClass( "js-chat_box" );
		$( objConversationElement ).attr( "data-application-id", strChatRoom.split( '_' )[3] );
		$( objConversationElement ).find( ".endChat" ).attr( "data-chat-room-jid", strChatRoom );

		$( objConversationElement ).find( '.chat-recipient' ).text( objMessage.applicant_name );
		$( objConversationElement ).find( '.property-name' ).text( objMessage.property_name );
		$( objConversationElement ).find( '.profile' ).attr( 'data-application-id', objMessage.application_id );
		$( objConversationElement ).find( '.chat-text-area' ).data( 'chat-room-jid', strChatRoom );
		$( objConversationElement ).find( '.responder .chat-composing-sate' ).html( objMessage.applicant_name + ' is typing...' );

		if( true === boolIsExistingConversation ) {
			$( objConversationElement ).find( '.chat-text-area' ).removeClass( "hide" );
			$( objConversationElement ).find( '.js-send-tools' ).removeClass( 'hide' );
		}

		if( intMaxAgentsAllowedInConversation <= EntrataChatPanel.getCountOfLeasingAgentsForChatRoom( strChatRoom ) ) {
			$( objConversationElement ).find( '.add_leasing_agent' ).addClass('hide');
		} else {
			$( objConversationElement ).find( '.add_leasing_agent' ).removeClass('hide');
		}
		$( objConversationElement ).appendTo( '#resume-chat-section' );
		return false;
	},
	buildSmsConversationElement: function( strChatRoom, objMessage, boolIsExistingConversation ) {
		var objConversationElement = $( '#online_chat_template' ).clone();
		$( objConversationElement ).attr( { id: strChatRoom } );
		$( objConversationElement ).addClass( "js-chat_box" );
		$( objConversationElement ).find( '.add_leasing_agent' ).remove();
		if( true == objMessage.hasOwnProperty( 'application_id' ) ) {
			$( objConversationElement ).attr( "data-application-id", objMessage.application_id );
		}
		$( objConversationElement ).find( ".endChat" ).attr( "data-chat-room-jid", strChatRoom );

		$( objConversationElement ).find( '.chat-recipient' ).text( objMessage.applicant_name );
		$( objConversationElement ).find( '.property-name' ).html( '<div class="italic">' + objMessage.property_name + '</div>');
		$( objConversationElement ).find( '.profile' ).attr( 'data-application-id', objMessage.application_id );
		$( objConversationElement ).find( '.chat-text-area' ).attr( 'chat-room-jid', strChatRoom );

		if( true == objMessage.hasOwnProperty( 'campaign_target_id' ) ) {
			$( objConversationElement ).find( '.profile' ).attr( 'data-campaign_target_id', objMessage.campaign_target_id );
		}

		if( true == objMessage.hasOwnProperty( 'lease_id' ) ) {
			$( objConversationElement ).find( '.profile' ).attr( 'data-lease_id', objMessage.lease_id );
		}

		if( true == objMessage.hasOwnProperty( 'customer_id' ) ) {
			$( objConversationElement ).find( '.profile' ).attr( 'data-customer_id', objMessage.customer_id );
		}

		if( true === boolIsExistingConversation ) {
			$( objConversationElement ).find( '.chat-text-area' ).removeClass( "hide" );
			$( objConversationElement ).find( '.js-send-tools' ).removeClass( 'hide' );
		}

		return $( objConversationElement );
	},
	loadGreetingMsg: function ( strChatRoom ) {
		var objListItem = $( "#active-chats .active-chat-messages" ).find( ".chat-messages." + strChatRoom );
		var strPropertyName = objListItem.data( "property-name" );
		var strApplicantName = objListItem.data( "applicant-name" );
		var strApplicantFirstName = strApplicantName.split( ' ' )[0];
		var strGreetingMsg = __( 'Hi {%s, 0}! This is {%s, 1} with {%s, 2}. How can I help you?', [ strApplicantFirstName, strLeasingAgentFirstName, strPropertyName ] );
		var strChatRoomJid = objEntrataXmppChat.getFullJid( strChatRoom );
		objEntrataXmppChat.boolEventId = objListItem.data( 'event-id' );
		objEntrataXmppChat.sendMsg( strChatRoomJid, strGreetingMsg, 'groupchat', true );

		return true;
	},
	updateSessionChatData: function( strUserChatRoom, boolIsAvailable ) {
		var intApplicationId = $( '.chat-messages.' + strUserChatRoom ).data( 'application-id' )
		var strChatInitializeTime = $( '.chat-messages.' + strUserChatRoom ).data( 'chat-initialize-time' );
		var intEventId             = $( '.chat-messages.' + strUserChatRoom ).data( 'event-id' );

		psi.patterns.ajaxRequest( {
			url: '/?module=entrata_chat_panelxxx&action=update_session_chat_data',
			dataType: 'JSON',
			data: {'is_available': ( ( true === boolIsAvailable ) ? 1 : 0 ), 'user_chat_room' : strUserChatRoom, 'message_details' : { 'chat_initialize_time' : strChatInitializeTime, 'application_id' : intApplicationId }, 'event_id' : intEventId },
			success:function( objResponse ) {
				if( 'end_chat' == objResponse.status ) {
					objEntrataXmppChat.endChat( strUserChatRoom );
				}
			}
		} );
	},
	deleteChatNotification: function( strUserChatRoom ) {
		psi.patterns.ajaxRequest( {
			url: '/?module=entrata_chat_panelxxx&action=delete_chat_notification',
			dataType: 'JSON',
			data: { 'chat_rooms': strUserChatRoom }
		} );
	},
	startChat: function( objElm, objThis, boolIsFromJoinChat ) {
		var strChatRoom = objElm.data( 'chat-room-id' );
		var boolIsFromAddToChat = $( ".unclaimed-chat-messages" ).find( ".unclaimed-chat." + strChatRoom ).data( "is-from-add-to-chat" );
		var strAgentsToAddToChat = $( ".unclaimed-chat-messages" ).find( ".unclaimed-chat." + strChatRoom ).data( "leasing-agents-to-add" );
		var objParentNode = objElm.parents( '.chat-messages' );
		var intUniqueId = $( ".unclaimed-chat-messages" ).find( ".unclaimed-chat #" + strChatRoom ).data( "unique-id" );
		var arrstrExplodedChatRoomName = strChatRoom.split( '_' );

		if( $( '#chat_popup_' + strChatRoom ).length ) {
			objChatPanel.removeNotification( $( '#chat_popup_' + strChatRoom ) );
		}

		var strSerializedData = '';
		if( true == boolIsFromJoinChat ) {
			objEntrataXmppChat.joinOrLeaveChat( strChatRoom, 'join' );
			strSerializedData = $('.ongoing-property-chat-messages #' + strChatRoom ).find('#serialized_data').val()
		} else {
			objEntrataXmppChat.acceptChat( strChatRoom, boolIsFromAddToChat, strAgentsToAddToChat );
			strSerializedData = $( ".unclaimed-chat-messages" ).find( ".unclaimed-chat." + strChatRoom ).find('#serialized_data').val();
		}
		var arrmixData = JSON.parse( strSerializedData );
		var strActiveChatNode = objChatPanel.createActiveChatNode( arrmixData,'');
		$( '.active-chat-messages' ).prepend(strActiveChatNode);
		delete arrobjUnclaimedMessage[strChatRoom];
		$( "#active-chats-tab" ).click();
		objParentNode.remove();
		objChatPanel.updateChatNoficationCount();
		objThis.updateSessionChatData( strChatRoom, true );
		objThis.deleteChatNotification( strChatRoom );
		if( false == boolIsFromJoinChat ) {
			objThis.loadGreetingMsg( strChatRoom );
		}
		objThis.showChatConversation( strChatRoom );
		objChatPanel.strUserChatRooms.push(strChatRoom);
		$('#' + strChatRoom).find('.chat-actions').find('.chat-text-area').removeClass('hide');
		$('#' + strChatRoom).find('.chat-actions').find('.js-send-tools').removeClass('hide');
		objChatPanel.setSessionStorage( 'current_active_chat_room', strChatRoom );
		var strMyChatRooms = sessionStorage.getItem( 'my_chat_rooms' );
		var arrMyChatRooms = ( null == strMyChatRooms || '' == strMyChatRooms ) ? [] : strMyChatRooms.split( ',' );
		if( -1 == $.inArray( strChatRoom, arrMyChatRooms ) ) {
			arrMyChatRooms.push( strChatRoom );
		}
		objChatPanel.setSessionStorage( 'my_chat_rooms', arrMyChatRooms.join() );
		clearInterval( arrmixIntervals[strChatRoom] );
		clearInterval( arrmixAddToChatIntervals[strChatRoom] );
		if( true == $( '#view-selected-properties' ).hasClass( 'hide' ) ) {
			$( '#resume-chat-section .js-conversation-history .conversation-messages' ).removeClass( 'chats-logged-in-properties' );
		} else {
			$( '#resume-chat-section .js-conversation-history .conversation-messages' ).addClass( 'chats-logged-in-properties' );
		}
	},
	endChat: function( strChatRoomJid, isManuallyEnded ){
		var objThis = this;

		var objNode = $( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomJid );
		if( objNode.length ) {
			objEntrataXmppChat.boolEventId = objNode.data( 'event-id' );
		}

		if( true == isManuallyEnded ) {
			objEntrataXmppChat.endChat( strChatRoomJid );
			setTimeout( objEntrataXmppChat.saveAndEndChat, 1000, strChatRoomJid );
		} else {
			EntrataChatPanel.saveChatRoomWithNumberOfLeasingAgents( strChatRoomJid, 0 );
		}

		objThis.updateSessionChatData( strChatRoomJid, false );

		$( '.active-chat-messages' ).find( '.chat-messages.' + strChatRoomJid ).parent().remove();
		$( '#resume-chat-section' ).find( '#' + strChatRoomJid ).remove();
		objThis.returnToActiveChat();
		objChatPanel.updateChatNoficationCount();
		var strMyChatRooms = sessionStorage.getItem( 'my_chat_rooms' );
		var arrMyChatRooms = ( null == strMyChatRooms || '' == strMyChatRooms ) ? [] : strMyChatRooms.split( ',' );
		arrMyChatRooms = arrMyChatRooms.filter( function( value, index, arr ) {
			return value != strChatRoomJid;
		} );
		objChatPanel.setSessionStorage( 'my_chat_rooms', arrMyChatRooms.join() );
		sessionStorage.removeItem( 'current_active_sms_chat_room' );
		delete objChatPanel.strUserChatRooms[strChatRoomJid];
		return true;
	},
	saveAndEndChat: function( strUserChatRoom ) {
		var objThis = this;
		EntrataChatPanel.saveChatRoomWithNumberOfLeasingAgents( strUserChatRoom, 0 );
		var arrstrChatHistory = objEntrataXmppChat.getChatHistory( strUserChatRoom );

		var strChatHistory = ( "undefined" === arrstrChatHistory ) ? '' : arrstrChatHistory;

		var strApplicantName = $( "#" + strUserChatRoom ).find( "div.js-applicant-name" ).text().trim();

		var objData = {
			is_available: 0,
			user_chat_room: strUserChatRoom,
			chat_details: strChatHistory,
			is_transfer: 0,
			applicant_name: strApplicantName
		};

		psi.patterns.ajaxRequest( {
			url: '/?module=entrata_chat_panelxxx&action=end_chat',
			data: objData
		} );

		var strChatBubble = ''

		if( 'undefined' == typeof strChatHistory ) {
			return;
		}

		$.each( strChatHistory, function( index, arrChatData ){
			if( 'other_detaPils' == index || 'undefined' == typeof arrChatData || '' == arrChatData.msg || 'undefined' == typeof arrChatData.msg ) {
				return;
			}

			var strMarginClass = 'margin20-left';
			var strChatBubuleClass = 'chat-bubble';
			var strReport = '';
			var strBodytext = arrChatData.msg
			var intTime = arrChatData.time;
			var strStatus = '';
			var strSender = '';

			if( 'string' === typeof arrChatData.status ) {
				strStatus = ( arrChatData.status ).toLowerCase();
			}

			if( 0 == arrChatData.is_prospect ) {
				if( strLeasingAgentName != arrChatData.sender ) {
					strSender = arrChatData.sender;
				}

				if( '' != strSender ) {
					strSender += ' - ';
				}

				strMarginClass = 'right margin20-right';
				strChatBubuleClass = 'chat-entrata';
				strReport = '<div class="align-right js-delivery-report"><i class="check-circle-lightgray"/></div>';
			}

			if( 'transfer' === strStatus || 'end' === strStatus ) {
				strChatBubble += '<div class="clearfix margin10-bottom" id="' + arrChatData.msg_id + '"><div class="chat_status expired-chat-status"><div class="body align-center">' + strBodytext + '</div></div></div>';
			} else if( 'join' === strStatus || 'leave' === strStatus ) {
				strChatBubble += '<div class="clearfix margin10-bottom" id="' + arrChatData.msg_id + '"><div class="chat_status expired-chat-status"><div class="body align-center">' + strBodytext + '</div></div></div>';
			} else {
				strChatBubble += '<div class="clearfix margin10-bottom" id="' + arrChatData.msg_id + '"><div class="' + strChatBubuleClass + ' clear"><div class="body chat-body">' + strBodytext + '</div>' + strReport + '</div><span class="clearfix"></span><p class="font10 chat-date-time ' + strMarginClass + '">' + strSender + ' ' + EntrataChatPanel.calculateTime( intTime ) + '</p></div>';
			}

		} );

		if( true == strChatHistory.hasOwnProperty( 'other_details' ) && true == strChatHistory.other_details.hasOwnProperty( 'event_id' ) ) {
			$( '#' + strUserChatRoom + '-expired .js-conversation-history #' + strChatHistory.other_details.event_id ).html( strChatBubble );
			$( '#' + strUserChatRoom + '-expired .js-conversation-history #' + strChatHistory.other_details.event_id ).addClass( 'loaded' );
		}
		var strMyChatRooms = sessionStorage.getItem( 'my_chat_rooms' );
		var arrMyChatRooms = ( null == strMyChatRooms || '' == strMyChatRooms ) ? [] : strMyChatRooms.split( ',' );
		arrMyChatRooms = arrMyChatRooms.filter( function( value, index, arr ) {
			return value != strUserChatRoom;
		} );
		objChatPanel.setSessionStorage( 'my_chat_rooms', arrMyChatRooms.join() );
	},
	sendSms: function( strMessage, strChatRoomJid, isWhatsAppTemplateMessage, strMessageConversationId, intMessageAggregatorId ) {
		if( 'undefined' == typeof isWhatsAppTemplateMessage ) {
			isWhatsAppTemplateMessage = false;
		}
		if( 'undefined' == typeof strMessageConversationId ) {
			strMessageConversationId = '';
		}

		var objElm = $( '#sms-text-section .sms-text-messages' ).find( '.' + strChatRoomJid );
		var intApplicantId = objElm.data( "applicant-id" );
		var intCustomerId = objElm.data( "customer-id" );
		var intApplicationId = objElm.data( "application-id" );
		var intUniqueId = objElm.data( "unique-id" );
		var strWeChatOpenId = objElm.data( "wechat-open-id" );

		var objData = {
			applicant_id: intApplicantId,
			chat_room: strChatRoomJid,
			chat_message: strMessage,
			unique_id: intUniqueId,
			customer_id: intCustomerId,
			message_aggregator_id: intMessageAggregatorId,
			is_whatsapp_template_message: isWhatsAppTemplateMessage,
			wechat_open_id: strWeChatOpenId,
			whatsapp_message_originator_id: '',
			application_id: intApplicationId
		};

		if( 'smsc' == strChatRoomJid.split( '_' )[0] ) {
			var intcampaignTargetId = strChatRoomJid.split( '_' )[3];
			objData = {
				campaign_target_id: intcampaignTargetId,
				chat_room: strChatRoomJid,
				chat_message: strMessage,
				unique_id: intUniqueId,
				message_aggregator_id: intMessageAggregatorId,
				is_whatsapp_template_message: isWhatsAppTemplateMessage,
				wechat_open_id: strWeChatOpenId,
				whatsapp_message_originator_id: ''
			}
		}

		var objElement = $( '#sms-text-section #' + strChatRoomJid + ' .js-conversation-history #we_chat_templates');
		if( 0 < objElement.length && 0 !== objElement.val().trim().length ) {
			objData.is_wechat_template_message = true;
			objData.wechat_template_id = objElement.find('option:selected').data('wechat-template-id');
			objData.default_system_message_template_id = objElement.find('option:selected').val();
		}

		if( MESSAGE_AGGREGATOR_WHATSAPP == intMessageAggregatorId ) {
			objData.whatsapp_message_originator_id = $( '#sms-text-section #' + strChatRoomJid + ' .js-conversation-history' ).find( '.whatsapp_message_originator_id' ).val();
		}

		psi.patterns.ajaxRequest( {
			url: '/?module=sms_chatxxx&action=send_chat_sms',
			data: objData,
			success: function( response ) {
				var objChatElement = $( "#sms-text-section #" + strChatRoomJid + " .js-conversation-history" );
				if( true == response.data.success ) {
					var strChatMessage = response.data.chat_message;
					var strMsgStatusIcon = '<div><svg viewBox="0 0 32 32" class="entrata-svg-icon fill-green small right"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#checkmark-icon"></use></svg></div>';
					var objElement = $( '.sms-text-messages .' + strChatRoomJid );
					objChatElement.find( '.conversation-messages' ).find( '#' + strMessageConversationId + ' .chat-entrata .chat-body' ).html( strChatMessage + strMsgStatusIcon );
					if( true == objData.is_wechat_template_message || true == objData.is_whatsapp_template_message ) {
						objChatElement.find( '.chat_session_timer' ).addClass( 'hide' );
						$( "#sms-text-section #" + strChatRoomJid + " .js-conversation-history .conversation-messages" ).attr( 'style', 'max-height:calc(100vh - 510px) !important;' );
						objElement.find( '.text-alert-message' ).html( __( '<span class="text-message">You: {%s,0}</span>', [objChatPanel.truncateChatMessage( strChatMessage )] ) );
					}
					if( false == $( this ).parents( '.js-conversation-history' ).hasClass( '.chat_session_timer' ) || (true == $( this ).parents( '.js-conversation-history' ).hasClass( '.chat_session_timer' ) && true == $( this ).parents( '.js-conversation-history' ).find( '.chat_session_timer' ).hasClass( 'hide' )) ) {
						$( "#sms-text-section #" + strChatRoomJid + " .js-conversation-history .chat-text-area" ).attr( 'disabled', false );
					}
					objChatElement.find( '.whatsapp_template #search_whatsapp_template_dropdown' ).val( "" );
					objChatElement.find( '.whatsapp_template #whatsapp_templates' ).val( "" );
					objChatElement.find( '.we_chat_template #we_chat_templates' ).attr( "selected", false ).val( "" );

					if( true === response.data.is_sent_with_warning ) {
						$( "#sms-text-section #" + strChatRoomJid + " .js-conversation-history .chat-text-area" ).after( '<p class="alert warning slim failed-message margin20-right margin10-left"><i></i>' + response.data.message + '</p>' );
						$( '.failed-message' ).delay( 10000 ).fadeOut();
					}

				} else {
					$( "#sms-text-section #" + strChatRoomJid + " .js-conversation-history .chat-text-area" ).after( '<p class="alert error slim failed-message margin20-right margin10-left"><i></i>' + response.data.message + '</p>' );
					$( '.failed-message' ).delay( 5000 ).fadeOut();
				}

				if( MESSAGE_AGGREGATOR_WHATSAPP == intMessageAggregatorId ) {
					var isChatSessionTimeout = true;
					if( 'no' == objChatElement.find( ".is_whatsapp_session_expired" ).val() ) {
						isChatSessionTimeout = false;
					}
					objChatElement.find( ".chat_session_timer" ).removeClass( 'hide' );

					// Restrict agent to send any random text after sending template message until recipients reply in case of session expiration
					if( true == objData.is_whatsapp_template_message && true == isChatSessionTimeout ) {
						var ChatAggregator = EntrataChatPanel.loadAggregator( {
							strChatRoomJid: strChatRoomJid,
							intMessageAggregatorId: intMessageAggregatorId,
							intTime: 0,
							isTemplateMessage: true,
							isChatSessionTimeout: true,
						} );
						ChatAggregator.processMessage();
					}
				}
			}
		} );

		return true;
	},
	endSmsChat: function ( strChatRoomJid, isManuallyEnded ) {
		$('#sms-text-section').find('#' + strChatRoomJid).remove();
		$('.sms-text-messages').removeClass('hide');
		$('.sms-text-messages').find('.' + strChatRoomJid).parent().remove();
		var strMyChatRooms = sessionStorage.getItem( 'my_chat_rooms' );
		var arrMyChatRooms = ( null == strMyChatRooms || '' == strMyChatRooms ) ? [] : strMyChatRooms.split( ',' );
		arrMyChatRooms = arrMyChatRooms.filter( function( value, index, arr ) {
			return value != strChatRoomJid;
		} );
		objChatPanel.setSessionStorage( 'my_chat_rooms', arrMyChatRooms.join() );
		objEntrataXmppChat.endChat( strChatRoomJid );
		objChatPanel.updateChatNoficationCount();
		if( true == objChatPanel.isLeasingCenterSmsChat ) {
			objChatPanel.lcEndChat( strChatRoomJid );
		}
		sessionStorage.removeItem( 'current_active_sms_chat_room' );
	},
	endChatFromProspect: function( strChatRoomJid ) {
		$( '.unclaimed-chat-messages' ).find( 'div.' + strChatRoomJid ).remove();
		delete objChatPanel.strUserChatRooms[strChatRoomJid];
		clearInterval(arrmixIntervals[strChatRoomJid]);
		clearInterval(arrmixAddToChatIntervals[strChatRoomJid]);
		sessionStorage.removeItem( "chat_details" );
		objChatPanel.updateChatNoficationCount();
		return true;
	},
	postMessageInConversationDiv: function( options, strOnMessage ) {
		var strMessage = options.strMessage,
			strChatRoomJid = options.strChatRoomJid,
			strClass = options.strClass,
			intNotificationId = options.intNotificationId,
			boolIsReplyMessage = options.isReplyMessage,
			boolIsStopMessage = options.isStopMessage,
			intTime = options.intTime,
			strMessageId = options.strMessageId,
			intMessageAggregatorId = options.intMessageAggregatorId,
			isUpdatedTimer = options.isUpdatedTimer,
			strPropertyName = options.strPropertyName,
			strSenderName = '',
			strMsgStatus = options.msg_status;

		if( '' == strMessage ) {
			return true;
		}

		var objConversationElement = $('#sms-text-section').find('#' + strChatRoomJid );
		var objChatRoomListElement = $('.sms-text-messages').find('.' + strChatRoomJid );

		if( '' !== strPropertyName ) {
			objChatRoomListElement.attr( "data-property-name", strPropertyName );
		}

		if( true == isUpdatedTimer && MESSAGE_AGGREGATOR_WHATSAPP == intMessageAggregatorId ) {
			var ChatAggregator = EntrataChatPanel.loadAggregator( {
				strChatRoomJid: strChatRoomJid,
				intMessageAggregatorId: intMessageAggregatorId,
				intTime: intTime,
				isTemplateMessage: false,
				isChatSessionTimeout: false,
			} );

			ChatAggregator.processMessage();
		}

		if( true == isUpdatedTimer && MESSAGE_AGGREGATOR_SMS == intMessageAggregatorId ) {
			var ChatAggregator = EntrataChatPanel.loadAggregator( {
				strChatRoomJid: strChatRoomJid,
				intMessageAggregatorId: intMessageAggregatorId,
				intTime: intTime,
				isTemplateMessage: false,
				isChatSessionTimeout: false,
			} );

			ChatAggregator.processMessage();
		}

		var strChatBubble = '';

		if( true == options.isPotentialLeadConvertedToGuestCard ) {
			$( "#sms-text-section #" + strChatRoomJid ).find( ".chat-text-area,.js-send-tools" ).remove();
			var chatRoomName = strChatRoomJid.split( '_' );
			strChatBubble = '<div class="chat_status"><div class="body align-center">' + strMessage + '</div></div>';
			objConversationElement.append(strChatBubble);
			objChatRoomListElement.find( '.text-alert-message' ).text( strMessage );

			if( undefined != options.intApplicationId ) {
				$( '#' + strChatRoomJid ).find('.js-guestcard').removeAttr('data-campaigntarget-id').attr( 'data-application-id', options.intApplicationId );
			}
			if( undefined != options.intCustomerId && undefined != options.intLeaseId ) {
				$( '#' + strChatRoomJid ).find('.js-guestcard').removeAttr('data-campaigntarget-id').attr( 'data-customer-id', options.intCustomerId );
				$( '#' + strChatRoomJid ).find('.js-guestcard').attr( 'data-lease-id', options.intLeaseId );
			}

			if( undefined == options.intCustomerId && undefined == options.intApplicationId ) {
				$( '#' + strChatRoomJid ).find('.js-guestcard').remove();
			}
			EntrataChatPanel.updateSmsNotification( intNotificationId, strChatRoomJid, false, true );
			return true;
		}
		var strReport = '';
		var strMarginClass = 'margin20-left';
		var strBubbleClass = 'chat-bubble';
		if( false == options.is_from_prospect ) {
			strMarginClass = 'right margin20-right';
			strBubbleClass = 'chat-entrata';
			if( undefined != options.sender && null != options.sender && __( 'You' ) != options.sender ) {
				strSenderName = options.sender + ' - ';
			}
		}
		var strDateTimeLabel   = EntrataChatPanel.calculateTime( intTime );
		var strMsgStatusIcon = '';

		if( MSG_STATUS_SENT == strMsgStatus ) {
			strMsgStatusIcon = '<svg viewBox="0 0 32 32" class="entrata-svg-icon fill-green small right"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#checkmark-icon"></use></svg>';
		} else if( MSG_STATUS_FAILED == strMsgStatus ) {
			strMsgStatusIcon = '<svg viewBox="0 0 32 32" class="entrata-svg-icon fill-red small right"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#alert-triangle-icon"></use></svg>';
		} else if( MSG_STATUS_PENDING == strMsgStatus ) {
			strMsgStatusIcon = '<svg viewBox="0 0 32 32" class="entrata-svg-icon fill-blue small right"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#time-icon"></use></svg>';
		}
		var strChatBubble = '<div class="clearfix" id="' + strMessageId + '"><div class="' + strBubbleClass + '"><div class="body chat-body">' + strMessage + '<div>' + strMsgStatusIcon + '</div></div>' + strReport + '</div></div><div class="clearfix"><div class="font10 italic chat-date-time ' + strMarginClass + '">'+ strSenderName + strDateTimeLabel + '</div></div>';
		objConversationElement.find('.js-conversation-history .conversation-messages').append(strChatBubble);
		$( "#" + strChatRoomJid ).find('.js-conversation-history .chat-text-area').attr('disabled', false);
		if( MESSAGE_AGGREGATOR_WHATSAPP != intMessageAggregatorId ) {
			$( "#" + strChatRoomJid ).find( '.js-conversation-history' ).find( '#chat_session_timer' ).addClass( 'hide' );
		}
		if( true === boolIsStopMessage ) {
			$( "#" + strChatRoomJid ).find(".chat-actions").hide();
			EntrataChatPanel.buildOptOutMessage( strChatRoomJid, objConversationElement, objChatRoomListElement, objChatRoomListElement.data('applicant-name'), strOnMessage );
		} else {
			$( "#" + strChatRoomJid ).find(".chat-actions").show();
		}
		if( true === boolIsReplyMessage ) {
			EntrataChatPanel.buildOptOutMessage( strChatRoomJid, objConversationElement, objChatRoomListElement, objChatRoomListElement.data('applicant-name') );
			EntrataChatPanel.updateSmsNotification( intNotificationId, strChatRoomJid, false, true );
		}
		var boolIsNewMessage = ( false == $('.chat-panel').hasClass( 'open' ) && sessionStorage.getItem( 'current_active_sms_chat_room' ) != $("#resume-chat-section .acitve_chat_conversations.js-chat_box").attr('id') );
		objChatPanel.updateChatNoficationCount( boolIsNewMessage );
		objChatPanel.scrollConversationPage( strChatRoomJid );
	},
	getMessageId: function() {
		var randomId = function() {
			return (((1 + Math.random()) * 0x10000) | 0).toString( 16 ).substring( 1 );
		};
		return (randomId() + randomId() + randomId() + randomId() + randomId());
	},
	saveJidUserNameAssociation: function( strJid, strUserName) {
		objJidUserNameAssociations[strJid] = strUserName;
		sessionStorage.setItem( 'jid_username_association', JSON.stringify( objJidUserNameAssociations ) );
	},
	saveChatRoomWithNumberOfLeasingAgents: function( strChatRoom, intNumberOfLeasingAgents ) {
		if( 0 > intNumberOfLeasingAgents ) {
			intNumberOfLeasingAgents = 0;
		}
		objNumberOfLeasingAgentsForChatRooms[strChatRoom] = intNumberOfLeasingAgents;
		sessionStorage.setItem( 'chatroom_leasing_agents_count', JSON.stringify( objNumberOfLeasingAgentsForChatRooms ) );
	},
	getCountOfLeasingAgentsForChatRoom: function( strChatRoom ) {
		if( objNumberOfLeasingAgentsForChatRooms.hasOwnProperty( strChatRoom ) ) {
			return objNumberOfLeasingAgentsForChatRooms[strChatRoom];
		}
		return 0;
	},
	buildOptOutMessage: function( strChatRoomJid, objConversationElement, objListItem, strApplicantName, strOnMessage ) {
		var strMessage = __( '{%s, 0} has opted-out of text message chats.', [strApplicantName] );
		var strChatBubble = '<div class="chat_status"><div class="body align-center">' + strMessage + '</div></div>';
		objConversationElement.find('.js-conversation-history .conversation-messages').append(strChatBubble);
		if( true == strOnMessage ) {
			this.endSmsChat( strChatRoomJid );
		}
	},

	updateSmsNotification: function( intNotificationId, strChatRoomJid, boolIsEndChat, boolIsStopRequest, boolIsRead  ) {
		var objElement = $( ".sms-text-messages" ).find( "." + strChatRoomJid );
		var intApplicationId = (true == boolIsEndChat || true == boolIsStopRequest) ? objElement.attr( 'data-application-id' ) : null;
		var strReadUrl = ( true == boolIsRead ) ? '&company_user_notification[read_on]=1' : '';

		var strUrl = '/?module=sms_chatxxx&action=update_sms_notification&company_user_notification[id]=' + intNotificationId + '&application[id]=' + intApplicationId + strReadUrl;
		if( strChatRoomJid && 'smsc' === strChatRoomJid.split( '_' )[0] ) {
			var intCampaignTargetId = strChatRoomJid.split( '_' )[3];
			strUrl = '/?module=sms_chatxxx&action=update_sms_notification&company_user_notification[id]=' + intNotificationId + '&campaign_target[id]=' + intCampaignTargetId;
		}
		psi.patterns.ajaxRequest( {
			url: strUrl,
			success: function( objResult ) {
				if( true === boolIsEndChat ) {
					// To end same chat in other windows/tabs of current user
					objEntrataXmppChat.sendMsg( objEntrataXmppChat.getConnection().authzid, JSON.stringify( { chat_room_jid: strChatRoomJid } ), 'end_sms' );
				} else if( true === boolIsStopRequest ) {
					$( "#" + strChatRoomJid ).find( ".chat-actions .chat-text-area" ).css( 'display','none' );
					$( "#" + strChatRoomJid ).find( ".chat-actions .js-send-tools" ).css( 'display','none' );
					$('#sms-text-section .sms-text-messages').find('.text-section.' + strChatRoomJid ).remove();
					objChatPanel.updateChatNoficationCount();
				}
				return true;
			}
		} );
	},

	deleteOtherUsersNotifications( strChatRoom, boolIsEndChat ) {

		var strUrl = '/?module=entrata_chat_panelxxx&action=delete_other_user_chat_notifications';

		psi.patterns.ajaxRequest( {
			url: strUrl,
			type: 'POST',
			data: { 'chat_room': strChatRoom },
			success: function( objResult ) {
				if( true === boolIsEndChat ) {
					// To end same chat in other windows/tabs of current user
					arrstrChatRoomJids.forEach( function( strChatRoom ) {
						sendMsg( connection.authzid, JSON.stringify( { chat_room_jid: strChatRoom } ), 'end_sms' );
					} )
				}
				return true;
			}
		} );
	},

	loadAggregator: function( options ) {
		switch( parseInt( options.intMessageAggregatorId ) ) {
			case MESSAGE_AGGREGATOR_WHATSAPP:
				EntrataChatPanel.WhatsAppAggregator.prototype = new EntrataChatPanel.Aggregator();
				var ChatAggregator = new EntrataChatPanel.WhatsAppAggregator( options );
				break;

			case MESSAGE_AGGREGATOR_WECHAT:
				EntrataChatPanel.WeChatAppAggregator.prototype = new EntrataChatPanel.Aggregator();
				var ChatAggregator = new EntrataChatPanel.WeChatAppAggregator( options );
				break;

			case MESSAGE_AGGREGATOR_SMS:
			default:
				EntrataChatPanel.SmsAppAggregator.prototype = new EntrataChatPanel.Aggregator();
				var ChatAggregator = new EntrataChatPanel.SmsAppAggregator( options );
		}

		return ChatAggregator;
	},

	SmsAppAggregator: function ( options ) {
		EntrataChatPanel.Aggregator.call( this, options );
		objChatPanelSmsTemplate.handleWrapUpTimeInterval( this.strChatRoomJid );
		this.processMessage = function() {
			// Remove the timer and invitation button (if any) for text messages
			this.clearInterval();
			this.showTextBox();
			this.removeChatInvitationButton();
			this.removeChatSessionTimer();
		}
	},

	WhatsAppAggregator: function( options ) {
		EntrataChatPanel.Aggregator.call( this, options );
		objChatPanelWhatsappTemplate.handleWrapUpTimeInterval( this.strChatRoomJid );
		this.processMessage = function() {
			var objElement = $( "#" + this.strChatRoomJid + ' .js-conversation-history' );
			objElement.find( '.conversation-messages' ).removeClass( 'text-message' );
			objElement.find( '.conversation-messages' ).attr( 'style', 'max-height:calc(100vh - 510px) !important;' );
			objElement.find( '.chat_session_timer' ).removeClass( 'hide' );
			this.clearInterval();
			if( false == this.isChatSessionTimeout ) {
				this.handleChatMessage();
			} else {
				objElement.find( '.whatsapp_template' ).removeClass( 'hide' );
				objElement.find( '.chat-actions' ).find( '.chat-text-area' ).attr( 'disabled', true );
				objElement.find( '.chat_session_timer' ).text( 'This conversation has expired. WhatsApp only allows sending an approved template message until the recipient replies to the conversation.' );
				objElement.find( '.is_whatsapp_session_expired' ).val( 'yes' );
			}
		}

		this.handleChatMessage = function() {
			this.clearInterval();
			this.addChatSessionTimer( __( 'Chat will expire in: ' ), MESSAGE_AGGREGATOR_WHATSAPP );
			this.removeChatInvitationButton();
			var objThis = this;
			this.setTimer( function() {
				var intMessageDateTime = new Date( objThis.intTime * 1000 ).getTime();
				var intCountDownTime = (intMessageDateTime + MICROSECONDS_24_HOURS);
				var objRemainingTime = objThis.getRemainingTime( intCountDownTime );
				objThis.objChatRoomJid.find( '#session_timer' ).text( objRemainingTime.time_string );
				var objElement = $( "#" + objThis.strChatRoomJid + ' .js-conversation-history' );
				objElement.find( '.whatsapp_template' ).removeClass( 'hide' );
				if( '00:00:00' >= objRemainingTime.time_string ) {
					objElement.find( '#chat_session_timer' ).text( 'This conversation has expired. WhatsApp only allows sending an approved template message until the recipient replies to the conversation.' );
					objElement.find( '.chat-actions' ).find( '.chat-text-area' ).attr( 'disabled', true );
					objElement.find( '.is_whatsapp_session_expired' ).val( 'yes' );
					objThis.clearInterval();
				} else {
					objElement.find( '.is_whatsapp_session_expired' ).val( 'no' );
				}
			}, 1000 );
		}
	},

	WeChatAppAggregator: function ( options ) {
		EntrataChatPanel.Aggregator.call( this, options );

		this.processMessage = function() {
			var objElement = $( "#" + options.strChatRoomJid + ' .js-conversation-history' );
			objElement.find(' .chat-actions .we_chat_template').removeClass('hide');
			objElement.find( '.conversation-messages' ).removeClass( 'text-message' );
			objElement.find( '.conversation-messages' ).addClass( 'wechat_message' );
			this.showTextBox();
			this.handleWeChatMessageExpiration();
		}
		this.handleWeChatMessageExpiration = function() {
			var intCountDownTime = this.getCountDownTime( this.intTime, MICROSECONDS_48_HOURS );

			var objRemainingTime = this.getRemainingTime( intCountDownTime );
			var objElement = $( "#" + options.strChatRoomJid + ' .js-conversation-history' );
			if( 0 >= objRemainingTime.remaining_time ) {
				objElement.find('#chat_session_timer').removeClass('hide');
				objElement.find('#chat_session_timer').text( 'This conversation has expired and WeChat requires a templated message to start a new conversation.' );
				objElement.find('.conversation-messages' ).attr( 'style', 'max-height:calc(100vh - 640px) !important;' );
				$( "#" + options.strChatRoomJid).find('.chat-actions').find('.chat-text-area').attr('disabled', true);
				$( "#" + options.strChatRoomJid).find('.chat-actions').find('.we_chat_template').removeClass('hide');
			} else {
				$( "#" + options.strChatRoomJid).find('.chat-actions').find('.we_chat_template').addClass('hide');
				objElement.find('#chat_session_timer').addClass('hide');
			}
		}
	},

	showWeChatTemplateText: function( objElm ) {
		if( false == $(objElm).val() ) {
			$(objElm).parents('.js-chat_box').find('.js-conversation-history .chat-text-area').val( '' );
			$(objElm).parents('.js-chat_box').find('.js-conversation-history .chat-text-area').attr('disabled', false);
			return;
		}
		psi.patterns.ajaxRequest( {
			type: 'POST',
			url: '/?module=entrata_chat_panelxxx&action=get_wechat_template_content&default_system_message_id=' + $(objElm).val(),
			datatype: 'JSON',
			success: function( objResponse ) {
				$(objElm).parents('.js-chat_box').find('.js-conversation-history .chat-text-area').css( 'display', 'none' );
				$(objElm).parents('.js-chat_box').find('.js-conversation-history .chat-text-area').val( objResponse.data.content );
				$(objElm).parents('.js-chat_box').find('.js-conversation-history .we_chat_template_content').removeClass( 'hide' );
				$(objElm).parents('.js-chat_box').find('.js-conversation-history .we_chat_template_content').html( objResponse.data.content );
			}
		});
	},

	showMessageAction: function( wechat_open_id, strChatRoom ) {

		psi.patterns.ajaxRequest( {
			type: 'POST',
			url: '/?module=entrata_chat_panelxxx&action=show_message_action&open_id=' + wechat_open_id,
			datatype: 'JSON',
			success: function( objResponse ) {
				if( '' != objResponse ) {
					$( "#" + strChatRoom + ' .profile' ).addClass( 'hide' );
					if( $( "#" + strChatRoom + ' .js-conversation-history' ).find('#chat_session_timer').hasClass('hide') ) {
						$( "#sms-text-section #" + strChatRoom + " .js-conversation-history .conversation-messages" ).attr( 'style', 'max-height:calc(100vh - 610px) !important;' );
					} else {
						$( "#sms-text-section #" + strChatRoom + " .js-conversation-history .conversation-messages" ).attr( 'style', 'max-height:calc(100vh - 640px) !important;' );
						$( "#" + strChatRoom ).find('.chat-actions').find('.we_chat_template').removeClass('hide');
					}
				}
				$( "#" + strChatRoom + ' #wechat_message_action' ).removeClass( 'hide' );
				$( "#" + strChatRoom + ' #wechat_message_action' ).html( objResponse );
				$( "#" + strChatRoom + ' #wechat_message_action' ).find( '#wechat_unknown_lead').find( '#wechat_open_id' ).val( wechat_open_id );
				var intCampaignTargetId = $( "#" + strChatRoom + ' .profile' ).data( 'campaign_target_id' );
				$( "#" + strChatRoom + ' #wechat_message_action' ).find( '#wechat_unknown_lead').find( '#campaign_target_id' ).val( intCampaignTargetId );
			}
		});
	},

	loadWeChatTemplates : function( strChatRoomJid ) {

		psi.patterns.ajaxRequest( {
			type: 'POST',
			url: '/?module=entrata_chat_panelxxx&action=get_wechat_templates',
			datatype: 'JSON',
			success: function( objResponse ) {
				var objElement = $( "#" + strChatRoomJid + ' .js-conversation-history ' );
				objElement.find( '.we_chat_template' ).html( objResponse );
			}
		});
	},

	SaveWeChatMessageAction( objElm ) {
		var strActionVal = $(objElm).parents('.js-chat_box').find(".js-actiontype").val();
		var strWechatId = $(objElm).parents('.js-chat_box').find('#wechat_message_action').find('#wechat_open_id').val();
		var strChatRoom = $(objElm).parents('.js-chat_box').attr('id');
		var intPropertyId = $('.sms-text-messages').find( '.' + strChatRoom ).data('property_id');
		var intCampaignTargetId = $(objElm).parents('.js-chat_box').find('#wechat_unknown_lead #campaign_target_id').val();

		switch( strActionVal ) {
			case 'create_lead' :
				var intIncomingSmsEventTypeId = $(objElm).parents('.js-chat_box').find('#wechat_unknown_lead #incoming_sms_event_type_id').val();
				psi.patterns.loadLargeDialog( {
					title: __( 'Create Lead From WeChat Message' ),
					strUrl: '/?module=application_add_leadxxx&action=create_application&application[kill_session]=1&application[property_id]=' + intPropertyId + '&campaign_target[id]=' + intCampaignTargetId + '&event[event_type_id]=' + intIncomingSmsEventTypeId,
					data: { wechat_open_id: strWechatId, chat_room: strChatRoom },
					onCloseCallback: function() {
						objChatPanel.setSessionStorage( 'is_create_lead_from_we_chat', 0 );
					}
				} );
				objChatPanel.setSessionStorage( 'is_create_lead_from_we_chat', 1 );
				$(objElm).parents('.js-chat_box').find('#wechat_message_action').addClass('hide');
				break;

			case 'attach_to_lead':
			case 'attach_to_resident':
				$(objElm).parents('.js-chat_box').find('#unkown_lead_attach_to').val( strActionVal );
				$(objElm).parents('.js-chat_box').find('#wechat_open_id').val( strWechatId );
				var intApplicationId = $(objElm).parents('.js-chat_box').find('#wechat_unknown_lead #wechat_application_id').val();
				var intCustomerId = $(objElm).parents('.js-chat_box').find('#wechat_unknown_lead #wechat_customer_id').val();
				var intLeaseId = $(objElm).parents('.js-chat_box').find('#wechat_unknown_lead #wechat_lease_id').val();
				var intIncomingSmsEventTypeId = $(objElm).parents('.js-chat_box').find('#wechat_unknown_lead #incoming_sms_event_type_id').val();

				psi.patterns.ajaxRequest({
					strElementSelector: '#dashboard_unknown_leads_actions',
					url: '/?module=dashboard_leads_unknown_leadxxx&action=attach_existing_reference&is_from_wechat_message=1&event[event_type_id]=' + intIncomingSmsEventTypeId,
					data : $(objElm).parents('.js-chat_box').find('#wechat_unknown_lead').serialize(),
					beforeSend: function() {
						psi.patterns.showLoadingImage( {strElementSelector: '.chat-panel'} );
					},
					success: function( objResponse ) {
						$(objElm).parents('.js-chat_box').find('#wechat_message_action').addClass('hide');
						objChatPanel.updateNotificationAfterAttach( intCampaignTargetId, intApplicationId, intCustomerId, intPropertyId );
						objChatPanel.showMessage( 'success', 'Campaign target attached successfully.', 'chat_panel_msg' );
						$(objElm).parents('.js-chat_box').find('.profile').attr( 'data-application-id', intApplicationId );
						$(objElm).parents('.js-chat_box').find('.profile').attr( 'data-customer-id', intCustomerId );
						$(objElm).parents('.js-chat_box').find('.profile').attr( 'data-lease-id', intLeaseId );
						psi.patterns.removeLoadingImage( {strElementSelector: '.chat-panel'} );
					}
					});
				break;

		}

	},

	addToChatRoomRequest( objMessage ) {
		var arrSelectedLeasingAgents = objMessage.selected_leasing_agents.split(',');
		var strChatRoomId = objMessage.chat_room_jid;
		var strSenderName = objMessage.sender;

		if(-1 == $.inArray( objEntrataXmppChat.getJid().split( '@' )[0], arrSelectedLeasingAgents ) ) {
			return false;
		}

		if( 0 < $('.ongoing-property-chat-messages #' + strChatRoomId ).length ) {
			var strSerializedData = $('.ongoing-property-chat-messages #' + strChatRoomId ).find('#serialized_data').val();
			var arrmixData = JSON.parse( strSerializedData );
			arrobjUnclaimedMessage[strChatRoomId] = arrmixData;
			psi.patterns.ajaxRequest( {
				type: 'POST',
				url: '/?module=entrata_chat_panelxxx&action=update_add_to_chat_notification',
				data: { 'user_chat_room': strChatRoomId, 'company_users_info': objMessage.selected_leasing_agents, 'chat_room_data': strSerializedData },
				dataType: 'json',
				success: function( objResponse ) {
					objChatPanel.addCountDownTimer( strChatRoomId, objResponse.data.chat_created_time, objMessage.selected_leasing_agents );
				}
			} );
			var strAllActiveChatNode = objChatPanel.createUnclaimedNode( arrmixData, false, true, arrSelectedLeasingAgents );
			$( '.unclaimed-chat-messages' ).prepend( strAllActiveChatNode );
			$('.ongoing-property-chat-messages #' + strChatRoomId ).remove();
		} else {
			if( 'undefined' == typeof objMessage.chat_room_data || '' == objMessage.chat_room_data ) {
				return;
			}
			var arrmixData = JSON.parse( objMessage.chat_room_data );

			arrobjUnclaimedMessage[strChatRoomId] = arrmixData;
			psi.patterns.ajaxRequest( {
				type: 'POST',
				url: '/?module=entrata_chat_panelxxx&action=update_add_to_chat_notification',
				data: { 'user_chat_room': strChatRoomId, 'company_users_info': objMessage.selected_leasing_agents, 'chat_room_data': objMessage.chat_room_data },
				dataType: 'json',
				success: function( objResponse ) {
					objChatPanel.addCountDownTimer( strChatRoomId, objResponse.data.chat_created_time, objMessage.selected_leasing_agents );
				}
			} );

			var strAllActiveChatNode = objChatPanel.createUnclaimedNode( arrmixData, false, true, arrSelectedLeasingAgents );
			$( '.unclaimed-chat-messages' ).prepend( strAllActiveChatNode );
		}

		if( true === $( "#" + strChatRoomId ).is(":visible") ) {
			return true;
		}

		objChatPanel.updateChatNoficationCount();

		var strMessage = strSenderName + ' Requested to join chat';
		var strContainer = '';
		if( 0 == $('#chat_popup_' + strChatRoomId ).length ) {
			var strContainer = objChatPanel.buildRequestToJoinChatPopUp( {chat_room: strChatRoomId, sender_name: strSenderName}, strMessage );
			$( strContainer )
				.appendTo( '.js-notifications .nAlertWrapper' )
				.delay( 2000 )
				.animate( { right: "+=360" }, 400 );
		} else {
			$('#chat_popup_' + strChatRoomId ).find( "span.nAlertText " ).text( strMessage );
		}
	},

	Aggregator: function ( options ) {
		var defaults = {
			strChatRoomJid: '',
			intMessageAggregatorId: MESSAGE_AGGREGATOR_SMS,
			intTime:0,
			isTemplateMessage: false,
			isChatSessionTimeout: false
		};
		defaults = $.extend( {}, defaults, options );

		for( property in defaults ) {
			this[property] = defaults[property];
		}

		this.objChatRoomJid = $( '#' + this.strChatRoomJid );

		EntrataChatPanel.Aggregator.prototype.showTextBox = function() {
			this.objChatRoomJid.find( '.enterSmsMessage' ).show();
		}

		EntrataChatPanel.Aggregator.prototype.insertBeforeTextBox = function( strDiv, intAggregatorId = null ) {
			if( MESSAGE_AGGREGATOR_WECHAT == intAggregatorId ) {
				$( strDiv ).insertBefore( this.objChatRoomJid.find( '.we_chat_template' ) );
			} else if( MESSAGE_AGGREGATOR_WHATSAPP == intAggregatorId ) {
				$( strDiv ).insertBefore( this.objChatRoomJid.find( '.whatsapp_template' ) );
			} else {
				$( strDiv ).insertBefore( this.objChatRoomJid.find( '.enterSmsMessage' ) );
			}
		}

		EntrataChatPanel.Aggregator.prototype.addChatSessionTimer = function( strText, intAggregatorId = null ) {
			var strDiv = __( '<div class="margin10-bottom margin10-left chat_session_timer" id="chat_session_timer"> {%s,0}: <span id="session_timer"></span></div>', [strText] );

			if( 1 > this.objChatRoomJid.find( '#chat_session_timer' ).length ) {
				this.insertBeforeTextBox( strDiv, intAggregatorId  );
			} else {
				this.objChatRoomJid.find( '#chat_session_timer' ).html( __( '{%s,0}: <span id="session_timer"></span>', [strText] ) );
			}
		}

		EntrataChatPanel.Aggregator.prototype.removeChatSessionTimer = function() {
			if( 1 <= this.objChatRoomJid.find( '#chat_session_timer' ).length ) {
				this.objChatRoomJid.find( '#chat_session_timer' ).remove();
			}
		}

		EntrataChatPanel.Aggregator.prototype.clearInterval = function() {
			clearInterval( arrintIntervalIds[this.strChatRoomJid] );
		}

		EntrataChatPanel.Aggregator.prototype.removeChatInvitationButton = function() {
			if( 1 <= this.objChatRoomJid.find( '#send_chat-invitation' ).length ) {
				this.objChatRoomJid.find( '#send_chat-invitation' ).parent().remove();
			}
		}

		EntrataChatPanel.Aggregator.prototype.addChatInvitationButton = function( options ) {
			var strChatInvitationButton = '<div class="align-center"><div class="button action js-chat-invitation-btn" data-chat-room-jid="' + this.strChatRoomJid + '" id="send_chat_invitation"><svg viewBox="0 0 32 32" class="entrata-svg-icon fill-green default"><use xlink:href="/Common/assets/components/patterns/svg/line_sprite.svg#whatsapp-icon"></use></svg> ' + options.strSendInvitationText + '</div></div>';

			if( 1 <= this.objChatRoomJid.find( '#chat_session_timer' ).length ) {
				this.objChatRoomJid.find( '#chat_session_timer' ).html( options.infoMessage + '<br>' + options.sessionExpiredMessage );
				this.insertBeforeTextBox( strChatInvitationButton )
			} else {
				var strDiv = __( '<div class="margin10-bottom chat_session_timer" id="chat_session_timer">{%s,0} <br> {%s,1}</div> {%s,2}', [options.infoMessage, options.sessionExpiredMessage, strChatInvitationButton] );
				this.insertBeforeTextBox( strDiv );
			}
		}

		EntrataChatPanel.Aggregator.prototype.getCountDownTime = function( intTime, intInterval ) {
			return new Date( getLocalTime( intTime ) ).getTime() + intInterval;
		}

		EntrataChatPanel.Aggregator.prototype.getRemainingTime = function( intCountDownTime, format ) {

			format = ( 'undefined' != typeof format ) ? format : 'h:m:s';

			var arrmixFormats = format.split( ':' ),
				boolIsRequiredHours = ( arrmixFormats.includes( 'h' ) || arrmixFormats.includes( 'H' ) ),
				boolIsRequiredMinutes = ( arrmixFormats.includes( 'm' ) || arrmixFormats.includes( 'M' ) ),
				boolIsRequiredSeconds = ( arrmixFormats.includes( 's' ) || arrmixFormats.includes( 'S' ) ),
				intCurrentTime = new Date().getTime(),

				intRemainingTime = intCountDownTime - intCurrentTime,
				intHours = ( true == boolIsRequiredHours ) ? Math.floor( ( intRemainingTime % ( 1000 * 60 * 60 * 24 ) ) / ( 1000 * 60 * 60 ) ) + '' : '',
				intMinutes = ( true == boolIsRequiredMinutes ) ? Math.floor( ( intRemainingTime % ( 1000 * 60 * 60 ) ) / ( 1000 * 60 ) ) + '' : '',
				intSeconds = ( true == boolIsRequiredSeconds ) ? Math.floor( ( intRemainingTime % ( 1000 * 60)) / 1000 ) + '' : '',
				strTime = '';

			if( '' != intHours ) {
				strTime = ( intHours.length > 1 ? '' : 0 ) + intHours;
			}

			if( '' != intMinutes ) {
				strTime = ( '' != strTime ) ? strTime + ':' : strTime;
				strTime += ( intMinutes.length > 1 ? '' : 0 ) + intMinutes;
			}

			if( '' != intSeconds ) {
				strTime = ( '' != strTime ) ? strTime + ':' : strTime;
				strTime += ( intSeconds.length > 1 ? '' : 0 ) + intSeconds;
			}

			return {time_string: strTime, remaining_time: intRemainingTime};
		}

		EntrataChatPanel.Aggregator.prototype.setTimer = function ( callBackMethod, intInterval ) {
			arrintIntervalIds[this.strChatRoomJid] = setInterval( callBackMethod, intInterval );
		}

		EntrataChatPanel.Aggregator.prototype.hideTextBox = function() {
			this.objChatRoomJid.find( '.enterSmsMessage' ).hide();
		}
	}
}
